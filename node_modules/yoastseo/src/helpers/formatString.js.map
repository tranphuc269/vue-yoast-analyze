{"version":3,"sources":["../../../src/helpers/formatString.js"],"names":["string","formatMap","delimiter","parameterRegex","RegExp","match","formattedString","exec","key","replaceRegex","replace"],"mappings":";;;;;;kBAce,UAAUA,MAAV,EAAkBC,SAAlB,EAA6BC,YAAY,IAAzC,EAAgD;AAC9DA,aAAY,4BAAcA,SAAd,CAAZ;AACA,OAAMC,iBAAiB,IAAIC,MAAJ,CAAa,GAAEF,SAAU,QAAOA,SAAU,EAA1C,EAA6C,GAA7C,CAAvB;AACA,KAAIG,KAAJ;AACA,KAAIC,kBAAkBN,MAAtB;;AAEA;AACA,QAAQ,CAAEK,QAAQF,eAAeI,IAAf,CAAqBP,MAArB,CAAV,MAA8C,IAAtD,EAA6D;AAC5D,QAAMQ,MAAMH,MAAO,CAAP,CAAZ;AACA;AACA,QAAMI,eAAe,IAAIL,MAAJ,CAAa,GAAEF,SAAU,GAAG,4BAAcM,GAAd,CAAqB,GAAEN,SAAU,EAA7D,EAAgE,GAAhE,CAArB;AACA;AACA,MAAKM,OAAOP,SAAZ,EAAwB;AACvBK,qBAAkBA,gBAAgBI,OAAhB,CAAyBD,YAAzB,EAAuCR,UAAWO,GAAX,CAAvC,CAAlB;AACA;AACD;;AAED,QAAOF,eAAP;AACA,C;;AAhCD","file":"formatString.js","sourcesContent":["import { escapeRegExp } from \"lodash-es\";\n\n/**\n * Formats a string with named parameters as defined in the given parameter mapping.\n *\n * E.g. `\"Hello %par_1% and %par_2%\"` plus the map `{ par_1: \"world\", par_2: \"you!\" }`\n * gives: `\"Hello world and you!\"`.\n *\n * @param {string} string           The string to be formatted.\n * @param {Object} formatMap        The mapping in the form of parameter - value pairs.\n * @param {string} [delimiter=\"%%\"] The string used to delimit parameters in the to be formatted string.\n *\n * @returns {string} The formatted string.\n */\nexport default function( string, formatMap, delimiter = \"%%\" ) {\n\tdelimiter = escapeRegExp( delimiter );\n\tconst parameterRegex = new RegExp( `${delimiter}(.+?)${delimiter}`, \"g\" );\n\tlet match;\n\tlet formattedString = string;\n\n\t// Try to match and replace each occurrence of \"%%something%%\" in the string.\n\twhile ( ( match = parameterRegex.exec( string ) ) !== null ) {\n\t\tconst key = match[ 1 ];\n\t\t// Create regex from parameter (e.g. \"%%key%%\")\n\t\tconst replaceRegex = new RegExp( `${delimiter}${ escapeRegExp( key ) }${delimiter}`, \"g\" );\n\t\t// Replace occurrence (if parameter exists in the format map).\n\t\tif ( key in formatMap ) {\n\t\t\tformattedString = formattedString.replace( replaceRegex, formatMap[ key ] );\n\t\t}\n\t}\n\n\treturn formattedString;\n}\n"]}