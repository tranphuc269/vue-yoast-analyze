{"version":3,"sources":["../../../../src/morphology/german/determineStem.js"],"names":["determineStem","findStemOnNounExceptionList","morphologyDataNouns","stemmedWord","exceptionStems","exceptionStemSet","matchedStem","find","exceptionStem","endsWith","precedingLexicalMaterial","slice","length","findStemOnAdjectiveExceptionList","morphologyDataAdjectives","adjectiveExceptionClasses","exceptions","key","Object","keys","includes","findStemOnVerbExceptionList","morphologyDataVerbs","wordToCheck","strongAndIrregularVerbStems","strongAndIrregularVerbs","stems","prefixes","matchedPrefix","prefix","startsWith","wordWithoutPrefix","strongOrIrregularVerbParadigm","values","present","word","morphologyDataGerman","verbData","verbs","nouns","adjectives"],"mappings":"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","file":"determineStem.js","sourcesContent":["import { flatten } from \"lodash-es\";\nimport { detectAndStemRegularParticiple } from \"./detectAndStemRegularParticiple\";\nimport { flattenSortLength } from \"../morphoHelpers/flattenSortLength\";\n\nimport stem from \"./stem\";\n\n/**\n * Returns a stem for a word that appears on the noun exception lists.\n *\n * @param {Object}  morphologyDataNouns The German morphology data for nouns.\n * @param {string}  stemmedWord         The stem to check.\n *\n * @returns {string|null} The stemmed word or null if none was found.\n */\nconst findStemOnNounExceptionList = function( morphologyDataNouns, stemmedWord ) {\n\tconst exceptionStems = morphologyDataNouns.exceptionStems;\n\n\tfor ( const exceptionStemSet of exceptionStems ) {\n\t\tconst matchedStem = exceptionStemSet.find( exceptionStem => stemmedWord.endsWith( exceptionStem ) );\n\n\t\tif ( matchedStem ) {\n\t\t\tconst precedingLexicalMaterial = stemmedWord.slice( 0, stemmedWord.length - matchedStem.length );\n\n\t\t\treturn precedingLexicalMaterial + exceptionStemSet[ 0 ];\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Returns a stem for a word that appears on the adjective exception lists.\n *\n * @param {Object}  morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}  stemmedWord                 The stem to check.\n *\n * @returns {string|null} The stemmed word or null if none was found.\n */\nconst findStemOnAdjectiveExceptionList = function( morphologyDataAdjectives, stemmedWord ) {\n\tconst adjectiveExceptionClasses = morphologyDataAdjectives.exceptions;\n\n\tfor ( const key of Object.keys( adjectiveExceptionClasses ) ) {\n\t\tconst exceptionStems = adjectiveExceptionClasses[ key ];\n\n\t\tfor ( const exceptionStemSet of exceptionStems ) {\n\t\t\tif ( exceptionStemSet.includes( stemmedWord ) ) {\n\t\t\t\treturn ( exceptionStemSet[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Returns a stem for a word that appears on the verb exception lists.\n *\n * @param {Object}  morphologyDataVerbs The German morphology data for verbs.\n * @param {string}  stemmedWord         The stem to check.\n *\n * @returns {string|null} The stemmed word or null if none was found.\n */\nconst findStemOnVerbExceptionList = function( morphologyDataVerbs, stemmedWord ) {\n\tlet wordToCheck = stemmedWord;\n\tconst strongAndIrregularVerbStems = morphologyDataVerbs.strongAndIrregularVerbs.stems;\n\tconst prefixes = flattenSortLength( morphologyDataVerbs.prefixes );\n\n\tlet matchedPrefix = prefixes.find( prefix => stemmedWord.startsWith( prefix ) );\n\n\tif ( matchedPrefix ) {\n\t\tconst wordWithoutPrefix = wordToCheck.slice( matchedPrefix.length, wordToCheck.length );\n\n\t\t/* At least 3 characters so that e.g. \"be\" is not found in the stem \"berg\". A minimum length of 3 was chosen\n\t\t * as a safe option, since 2-letter verb stems are highly unlikely to impossible.\n\t\t */\n\t\tif ( wordWithoutPrefix.length > 2 ) {\n\t\t\twordToCheck = wordWithoutPrefix;\n\t\t} else {\n\t\t\tmatchedPrefix = null;\n\t\t}\n\t}\n\n\tfor ( const strongOrIrregularVerbParadigm of strongAndIrregularVerbStems ) {\n\t\tlet stems = strongOrIrregularVerbParadigm.stems;\n\t\tstems = flatten( Object.values( stems ) );\n\n\t\tif ( stems.includes( wordToCheck ) ) {\n\t\t\tif ( matchedPrefix ) {\n\t\t\t\t// The present tense stem is returned as a default stem.\n\t\t\t\treturn matchedPrefix + strongOrIrregularVerbParadigm.stems.present;\n\t\t\t}\n\n\t\t\treturn strongOrIrregularVerbParadigm.stems.present;\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Returns the stem for a given German input word.\n *\n * @param   {string} word                   The word to get the stem for.\n * @param   {Object} morphologyDataGerman   The German morphology data.\n *\n * @returns {string} Stemmed form of the word.\n */\nexport function determineStem( word, morphologyDataGerman ) {\n\tconst verbData = morphologyDataGerman.verbs;\n\tconst stemmedWord = stem( verbData, word );\n\n\t/*\n\t * Goes through the stem exception functions from left to right, returns the first stem it finds.\n\t * If no stem has been found, return the original, programmatically created, stem.\n\t */\n\treturn findStemOnNounExceptionList( morphologyDataGerman.nouns, stemmedWord ) ||\n\t\tfindStemOnAdjectiveExceptionList( morphologyDataGerman.adjectives, stemmedWord ) ||\n\t\tfindStemOnVerbExceptionList( verbData, stemmedWord ) ||\n\t\tdetectAndStemRegularParticiple( verbData, word ) ||\n\t\tstemmedWord;\n}\n"]}