{"version":3,"sources":["../../../../src/morphology/arabic/createBasicWordForms.js"],"names":["createBasicWordForms","word","prefixes","forms","push","map","prefix","stemmedWord","startsWith","slice","length"],"mappings":";;;;;QAOgBA,oB,GAAAA,oB;AAPhB;;;;;;;AAOO,SAASA,oBAAT,CAA+BC,IAA/B,EAAsC;AAC5C,OAAMC,WAAW,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EACf,KADe,EACR,KADQ,EACD,KADC,EACM,KADN,EACa,KADb,EACoB,MADpB,CAAjB;;AAGA,OAAMC,QAAQ,EAAd;;AAEA;;;;;AAKAA,OAAMC,IAAN,CAAY,GAAGF,SAASG,GAAT,CAAcC,UAAUA,SAASL,IAAjC,CAAf;;AAEA,KAAIM,cAAc,EAAlB;;AAEA;;;;AAIA,MAAM,MAAMD,MAAZ,IAAsBJ,QAAtB,EAAiC;AAChC,MAAKD,KAAKO,UAAL,CAAiBF,MAAjB,CAAL,EAAiC;AAChCC,iBAAcN,KAAKQ,KAAL,CAAYH,OAAOI,MAAnB,CAAd;AACA;AACD;;AAED,KAAKH,YAAYG,MAAZ,GAAqB,CAA1B,EAA8B;AAC7BP,QAAMC,IAAN,CAAYG,WAAZ;AACAJ,QAAMC,IAAN,CAAY,GAAGF,SAASG,GAAT,CAAcC,UAAUA,SAASC,WAAjC,CAAf;AACA;;AAED,QAAOJ,KAAP;AACA","file":"createBasicWordForms.js","sourcesContent":["/**\n * Creates basic word forms for a given Arabic word.\n *\n * @param {string} word     The word for which to create basic word forms.\n *\n * @returns {Array}        Prefixed and de-prefixed variations of a word.\n */\nexport function createBasicWordForms( word ) {\n\tconst prefixes = [ \"ل\", \"ب\", \"ك\", \"و\", \"ف\", \"س\", \"أ\", \"ال\", \"وب\", \"ول\", \"لل\", \"فس\", \"فب\", \"فل\", \"وس\",\n\t\t \"وال\", \"بال\", \"فال\", \"كال\", \"ولل\", \"وبال\" ];\n\n\tconst forms = [];\n\n\t/*\n\t * Add prefixes to the input word. We always do this, since some words\n\t * beginning with a prefix-like letter might be exceptions where this is the\n\t * actual first letter of the word.\n\t */\n\tforms.push( ...prefixes.map( prefix => prefix + word ) );\n\n\tlet stemmedWord = \"\";\n\n\t/*\n\t * If a word starts with one of the prefixes, we strip it and create all possible\n\t * prefixed forms based on this stem.\n\t */\n\tfor ( const prefix of prefixes ) {\n\t\tif ( word.startsWith( prefix ) ) {\n\t\t\tstemmedWord = word.slice( prefix.length );\n\t\t}\n\t}\n\n\tif ( stemmedWord.length > 0 ) {\n\t\tforms.push( stemmedWord );\n\t\tforms.push( ...prefixes.map( prefix => prefix + stemmedWord ) );\n\t}\n\n\treturn forms;\n}\n"]}