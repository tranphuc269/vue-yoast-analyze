{"version":3,"sources":["../../../../src/morphology/arabic/stem.js"],"names":["stem","matchWithRegexAndReplace","word","regexAndReplacement","replace","RegExp","checkWordsWithRemovedLastLetter","morphologyData","externalStemmer","characters","wordsWithLastAlefRemoved","includes","alef","wordsWithLastHamzaRemoved","alef_hamza_above","wordsWithLastMaksoraRemoved","yeh_maksorah","wordsWithLastYehRemoved","yeh","checkWordsWithRemovedFirstLetter","wordsWithFirstWawRemoved","waw","wordsWithFirstYehRemoved","checkWordsWithRemovedMiddleLetter","wordsWithMiddleWawRemoved","wordsWithMiddleYehRemoved","processTwoLetterWords","wordsWithRemovedDuplicateLetter","substring","wordAfterLastLetterCheck","wordAfterFirstLetterCheck","wordAfterMiddleLetterCheck","processThreeLetterWordsWithWeakLetterOrHamza","replacementPattern","functionToRunToGetRoot","wordAfterRemovingWeakLetterOrHamza","processThreeLetterWords","threeLetterRoots","waw_hamza","yeh_hamza","slice","wordAfterLastWeakLetterOrHamzaCheck","regexRemoveLastWeakLetterOrHamza","wordAfterMiddleWeakLetterOrHamzaCheck","regexRemoveMiddleWeakLetterOrHamza","regexReplaceMiddleLetterWithAlef","regexReplaceMiddleLetterWithAlefWithHamza","wordAfterReplacingMiddleLetterWithAlef","regexRemoveShaddaAndDuplicateLastLetter","checkFirstPatternAndGetRoot","numberSameLetters","length","checkSecondPatternAndGetRoot","pattern","root","i","feh","aen","lam","concat","countSharedLettersBetweenWordAndPattern","checkPatterns","wordAfterModification","regexReplaceFirstHamzaWithAlef","patterns","wordAfterCheckingFirstPattern","rootFound","wordAfterCheckingSecondPattern","checkIfWordIsRoot","wordAfterThreeLetterProcessing","fourLetterRoots","removeSuffix","suffixes","suffix","endsWith","removePrefix","prefixes","prefix","startsWith","processWordWithSuffix","wordAfterRemovingSuffix","outputAfterCheckingPatterns","processWordWithPrefix","wordAfterRemovingPrefix","outputAfterCheckingForSuffixes","findRoot","outputAfterProcessingSuffix","outputAfterRemovingPrefix","processWordWithDefiniteArticle","wordAfterRemovingDefiniteArticle","definiteArticles","outputAfterTryingToFindRoot","processWordWithPrefixWaw","wordAfterRemovingWaw","regexRemovingDiacritics","outputAfterProcessingDefiniteArticle","outputAfterProcessingPrefixWaw","wordAfterProcessingPrefix"],"mappings":"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","file":"stem.js","sourcesContent":["/**\n * Copyright (c) 2015 Mouaffak A. Sarhan\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Tries to match a word with a regex. If matched, modifies the string according to the indicated pattern.\n *\n * @param {string}\t\tword\t\t\t\tThe word to check.\n * @param {string[]}\tregexAndReplacement\tThe regex to match the word with and what the word should be replaced with if it is matched.\n *\n * @returns {string}\tThe modified word or the original word if it was not matched.\n */\nconst matchWithRegexAndReplace = function( word, regexAndReplacement ) {\n\treturn word.replace( new RegExp( regexAndReplacement[ 0 ] ),\n\t\tregexAndReplacement[ 1 ] );\n};\n\n/**\n * Check if the word is on the list of three-letter roots which had the last weak letter removed (so are now two letters long).\n * If the word is on the list, add back the removed last letter and return the three-letter root.\n * Examples: طر -> طري (word with last weak letter ي (yeh) removed) , حص -> حصا (word with last weak letter ا (alef) removed)\n *\n * @param {string}\tword\t\t\tThe two-letter word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string|null}\tThe word with the last weak letter added back or null if the word was not found on a list.\n */\nconst checkWordsWithRemovedLastLetter = function( word, morphologyData ) {\n\tconst externalStemmer = morphologyData.externalStemmer;\n\tconst characters = externalStemmer.characters;\n\n\tif ( externalStemmer.wordsWithLastAlefRemoved.includes( word ) ) {\n\t\treturn word + characters.alef;\n\t}\n\tif ( externalStemmer.wordsWithLastHamzaRemoved.includes( word ) ) {\n\t\treturn word + characters.alef_hamza_above;\n\t}\n\tif ( externalStemmer.wordsWithLastMaksoraRemoved.includes( word ) ) {\n\t\treturn word + characters.yeh_maksorah;\n\t}\n\tif ( externalStemmer.wordsWithLastYehRemoved.includes( word ) ) {\n\t\treturn word + characters.yeh;\n\t}\n};\n\n/**\n * Check if the word is on the list of three-letter roots which had the first weak letter removed (so are now two letters long).\n * If the word is on the list, add back the removed first letter and return the three-letter root.\n * Examples: مض -> ومض (word with first weak letter و (waw) removed) , سن -> يسن (word with first weak letter ي (yeh) removed)\n *\n * @param {string}\tword\t\t\tThe two-letter word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string|null}\tThe word with the first weak letter added back or null if the word was not found on any list.\n */\nconst checkWordsWithRemovedFirstLetter = function( word, morphologyData ) {\n\tconst externalStemmer = morphologyData.externalStemmer;\n\tconst characters = externalStemmer.characters;\n\n\tif ( externalStemmer.wordsWithFirstWawRemoved.includes( word ) ) {\n\t\treturn characters.waw + word;\n\t}\n\tif ( externalStemmer.wordsWithFirstYehRemoved.includes( word ) ) {\n\t\treturn characters.yeh + word;\n\t}\n};\n\n/**\n * Check if the word is on the list of three-letter roots which had the middle weak letter removed (so are now two letters long).\n * If the word is on the list, add back the removed middle letter and return the three-letter root.\n * Examples: غز -> غوز (word with middle weak letter و (waw) removed), لن -> لين (word with middle weak letter ي (yeh) removed)\n *\n * @param {string}\tword\t\t\tThe two-letter word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string|null}\tThe word with the middle weak letter added back or null if the word was not found on a list.\n */\nconst checkWordsWithRemovedMiddleLetter = function( word, morphologyData ) {\n\tconst externalStemmer = morphologyData.externalStemmer;\n\tconst characters = externalStemmer.characters;\n\n\tif ( externalStemmer.wordsWithMiddleWawRemoved.includes( word ) ) {\n\t\treturn word[ 0 ] + characters.waw + word[ 1 ];\n\t}\n\tif ( externalStemmer.wordsWithMiddleYehRemoved.includes( word ) ) {\n\t\treturn word[ 0 ] + characters.yeh + word[ 1 ];\n\t}\n};\n\n\n/**\n * Find the root of two-letter words. Two-letter words usually come from three-letter roots for which a letter was deleted\n * as it is a duplicated last letter or a weak letter.\n *\n * @param {string}\tword\t\t\tThe two-letter word to process.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string}\tThe three-letter root or the input word if no root was found.\n */\nconst processTwoLetterWords = function( word, morphologyData ) {\n\t// Check whether the word is on the list of words with removed duplicate last letter. If it is, add back the removed letter to get the root.\n\tif ( morphologyData.externalStemmer.wordsWithRemovedDuplicateLetter.includes( word ) ) {\n\t\treturn word + word.substring( 1 );\n\t}\n\t// Check whether the word is on one of the lists of words with removed weak letter or hamza.\n\tconst wordAfterLastLetterCheck = checkWordsWithRemovedLastLetter( word, morphologyData );\n\tif ( wordAfterLastLetterCheck ) {\n\t\treturn wordAfterLastLetterCheck;\n\t}\n\tconst wordAfterFirstLetterCheck = checkWordsWithRemovedFirstLetter( word, morphologyData );\n\tif ( wordAfterFirstLetterCheck ) {\n\t\treturn wordAfterFirstLetterCheck;\n\t}\n\tconst wordAfterMiddleLetterCheck = checkWordsWithRemovedMiddleLetter( word, morphologyData );\n\tif ( wordAfterMiddleLetterCheck ) {\n\t\treturn wordAfterMiddleLetterCheck;\n\t}\n\n\treturn word;\n};\n\n/**\n * Remove the middle/last weak letter or hamza in a three letter word. Find its root by checking the appropriate exception lists\n * (words with middle letter removed or words with last letter removed) and attaching the removed letter back.\n * Example: بدء -> بد -> بدأ (three letter word with (ء) hamza ending,\n * which is found on the list of words with last letter removed after removing the suffix)\n *\n * @param {string}\t\tword\t\t\t\t\tThe three-letter word to check.\n * @param {Object}\t\tmorphologyData\t\t\tThe Arabic morphology data.\n * @param {string[]}\treplacementPattern\t\tThe regex to find and remove middle or last weak letter/hamza in three letter words\n * @param {function}\tfunctionToRunToGetRoot\tThe function that checks lists of words with either middle or last letter removed\n * \t\t\t\t\t\t\t\t\t\t\t\tand attaches it back.\n *\n * @returns {string|null}\tThe root or null if no root was found.\n */\nconst processThreeLetterWordsWithWeakLetterOrHamza = function( word, morphologyData, replacementPattern, functionToRunToGetRoot ) {\n\t// Find and remove middle or last weak letter or hamza\n\tconst wordAfterRemovingWeakLetterOrHamza = word.replace( new RegExp( replacementPattern[ 0 ] ),\n\t\treplacementPattern[ 1 ] );\n\tif ( wordAfterRemovingWeakLetterOrHamza !== word ) {\n\t\t/*\n\t\t * If the weak letter or hamza was removed, get the root by checking lists of words with middle/last weak letter\n\t\t * or hamza removed and attaching it back.\n\t\t */\n\t\treturn functionToRunToGetRoot( wordAfterRemovingWeakLetterOrHamza, morphologyData );\n\t}\n};\n\n/**\n * Get the root of three letter words.\n * Examples: ؤكد -> أكد (three letter word with ؤ (waw_hamza) beginning, قدّ -> قدد (three letter word which has a shadda on the second letter)\n *\n * @param {string}\tword\t\t\tThe three-letter word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string}\tThe root or the original input word (which may already be the root).\n */\nconst processThreeLetterWords = function( word, morphologyData ) {\n\tconst characters = morphologyData.externalStemmer.characters;\n\n\t// If the word exists on the list of three letter roots, return the word.\n\tif ( morphologyData.externalStemmer.threeLetterRoots.includes( word ) ) {\n\t\treturn word;\n\t}\n\t// If the first letter is ا/ ؤ/ ئ (yeh_hamza/waw_hamza/alef), change it to أ (alef_hamza_above).\n\tif ( word[ 0 ] === characters.alef || word[ 0 ] === characters.waw_hamza ||\n\t\t\tword[ 0 ] === characters.yeh_hamza ) {\n\t\tword = characters.alef_hamza_above + word.slice( 1 );\n\t}\n\n\t// If the last letter is a weak letter or a hamza, check if the word is a root that may get the last weak letter/hamza removed.\n\tconst wordAfterLastWeakLetterOrHamzaCheck = processThreeLetterWordsWithWeakLetterOrHamza( word, morphologyData,\n\t\tmorphologyData.externalStemmer.regexRemoveLastWeakLetterOrHamza, checkWordsWithRemovedLastLetter );\n\tif ( wordAfterLastWeakLetterOrHamzaCheck ) {\n\t\treturn wordAfterLastWeakLetterOrHamzaCheck;\n\t}\n\n\t// If the middle letter is a waw, yeh, alef or a yeh_hamza, check if the word is a root that may get the middle weak letter/hamza removed..\n\tconst wordAfterMiddleWeakLetterOrHamzaCheck = processThreeLetterWordsWithWeakLetterOrHamza( word, morphologyData,\n\t\tmorphologyData.externalStemmer.regexRemoveMiddleWeakLetterOrHamza, checkWordsWithRemovedMiddleLetter );\n\tif ( wordAfterMiddleWeakLetterOrHamzaCheck ) {\n\t\treturn wordAfterMiddleWeakLetterOrHamzaCheck;\n\t}\n\n\tconst regexReplaceMiddleLetterWithAlef = morphologyData.externalStemmer.regexReplaceMiddleLetterWithAlef;\n\tconst regexReplaceMiddleLetterWithAlefWithHamza = morphologyData.externalStemmer.regexReplaceMiddleLetterWithAlefWithHamza;\n\n\t// If the word has ئ/ؤ (yeh_hamza/waw_hamza) as the second letter and ends in ر/ز/ن (noon/zai/reh), change ئ/ؤ (yeh_hamza/waw_hamza) to ا (alef).\n\tconst wordAfterReplacingMiddleLetterWithAlef = word.replace( new RegExp( regexReplaceMiddleLetterWithAlef[ 0 ] ),\n\t\tregexReplaceMiddleLetterWithAlef[ 1 ] );\n\tif ( wordAfterReplacingMiddleLetterWithAlef === word ) {\n\t\tword = word.replace( new RegExp( regexReplaceMiddleLetterWithAlefWithHamza[ 0 ] ),\n\t\t\tregexReplaceMiddleLetterWithAlefWithHamza[ 1 ] );\n\t} else {\n\t\t// If the second letter is a ئ/ؤ (yeh_hamza/waw_hamza) and it doesn't end in noon/zai/reh, change ئ/ؤ d to أ (alef_hamza_above).\n\t\tword = wordAfterReplacingMiddleLetterWithAlef;\n\t}\n\t// If the last letter is a shadda, remove it and duplicate the last letter.\n\tconst regexRemoveShaddaAndDuplicateLastLetter = morphologyData.externalStemmer.regexRemoveShaddaAndDuplicateLastLetter;\n\tword = word.replace( new RegExp( regexRemoveShaddaAndDuplicateLastLetter[ 0 ] ),\n\t\tregexRemoveShaddaAndDuplicateLastLetter[ 1 ] );\n\n\treturn word;\n};\n\n/**\n * Check whether the word matches the pattern (it is a 6 letter-word, the fourth and sixth letter are the same, and the pattern\n * and the word share two same letters at the same index). If it does, remove the first character and the two last characters and\n * get the root.\n * Example: احولال -> حول (the stem is the 2nd to 4th character)\n *\n * @param {string}\tword\t\t\t\tThe word to check.\n * @param {number}\tnumberSameLetters\tThe number of letters the word and the pattern share at the same index.\n * @param {Object}\tmorphologyData\t\tThe Arabic morphology data.\n *\n * @returns {string} The root or the original word if word was not matched by the pattern.\n */\nconst checkFirstPatternAndGetRoot = function( word, numberSameLetters, morphologyData ) {\n\tif ( word.length === 6 && word[ 3 ] === word[ 5 ] && numberSameLetters === 2 ) {\n\t\treturn processThreeLetterWords( word.substring( 1, 4 ), morphologyData );\n\t}\n\treturn word;\n};\n\n/**\n * Checks whether the word matches the pattern (the word shares three characters with the pattern) and get the root if it does.\n * Example: استكتب -> كتب (A word that matches pattern (استفعل))\n *\n * @param {string}\tword\t\t\t\tThe word to check.\n * @param {string}\tpattern\t\t\t\tThe pattern to check.\n * @param {number}\tnumberSameLetters\tThe number of letters the word and the pattern share at the same index.\n * @param {Object}\tmorphologyData\t\tThe Arabic morphology data.\n *\n * @returns {string} The root or the original word if no root was found.\n */\nconst checkSecondPatternAndGetRoot = function( word, pattern, numberSameLetters, morphologyData ) {\n\tconst characters = morphologyData.externalStemmer.characters;\n\t// If the word length minus three is equal to or less than the number of same letters found in the checkPatterns function.\n\tif ( word.length - 3 <= numberSameLetters ) {\n\t\tlet root = \"\";\n\t\tfor ( let i = 0; i < word.length; i++ ) {\n\t\t\tif ( pattern[ i ] === characters.feh ||\n\t\t\t\tpattern[ i ] === characters.aen ||\n\t\t\t\tpattern[ i ] === characters.lam ) {\n\t\t\t\troot = root.concat( word[ i ] );\n\t\t\t}\n\t\t}\n\t\tif ( root.length === 3 ) {\n\t\t\treturn processThreeLetterWords( root, morphologyData );\n\t\t}\n\t}\n\treturn word;\n};\n\n/**\n * Count the number of letters the word and the pattern to match with share at the same index.\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {string}\tpattern\t\t\tThe pattern to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {number}\tThe number of shared letters between the word and the pattern at the same index.\n */\nconst countSharedLettersBetweenWordAndPattern = function( word, pattern, morphologyData ) {\n\tconst characters = morphologyData.externalStemmer.characters;\n\n\tlet numberSameLetters = 0;\n\tfor ( let i = 0; i < word.length; i++ ) {\n\t\tif ( pattern[ i ] === word[ i ] &&\n\t\t\tpattern[ i ] !== characters.feh &&\n\t\t\tpattern[ i ] !== characters.aen &&\n\t\t\tpattern[ i ] !== characters.lam ) {\n\t\t\tnumberSameLetters++;\n\t\t}\n\t}\n\treturn numberSameLetters;\n};\n\n/**\n * Check if a word matches a specific pattern of letters, and if it does, modify the word to get the root.\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null} An object with either the root or the modified word and the information whether the root was found,\n * \t\t\t\t\t\t  or null if the word was not modified and the root was not found.\n */\nconst checkPatterns = function( word, morphologyData ) {\n\t// If the first letter is an alef_madda, alef_hamza_above, or alef_hamza_below (أ/إ/آ), change it to an alef (ا)\n\tconst wordAfterModification = matchWithRegexAndReplace( word, morphologyData.externalStemmer.regexReplaceFirstHamzaWithAlef );\n\n\t// Try and find a pattern that matches the word\n\tfor ( const pattern of morphologyData.externalStemmer.patterns ) {\n\t\tif ( pattern.length === wordAfterModification.length ) {\n\t\t\t// Count the number of letters the word and the pattern share at the same index.\n\t\t\tconst numberSameLetters = countSharedLettersBetweenWordAndPattern( wordAfterModification, pattern, morphologyData );\n\n\t\t\tconst wordAfterCheckingFirstPattern = checkFirstPatternAndGetRoot( wordAfterModification, numberSameLetters, morphologyData );\n\t\t\tif ( wordAfterCheckingFirstPattern !== wordAfterModification ) {\n\t\t\t\treturn { word: wordAfterCheckingFirstPattern, rootFound: true };\n\t\t\t}\n\n\t\t\tconst wordAfterCheckingSecondPattern = checkSecondPatternAndGetRoot( wordAfterModification, pattern, numberSameLetters, morphologyData );\n\t\t\tif ( wordAfterCheckingSecondPattern !== wordAfterModification ) {\n\t\t\t\treturn { word: wordAfterCheckingSecondPattern, rootFound: true };\n\t\t\t}\n\t\t}\n\t}\n\t// If a pattern was not matched but the word was modified, return the modified word.\n\tif ( wordAfterModification !== word ) {\n\t\treturn { word: wordAfterModification, rootFound: false };\n\t}\n};\n\n/**\n * Tries to find the root of two-, three- and four-letter words by checking lists and/or applying modifications to the word.\n *\n * Example: the word أبطر is on the list of four-letter roots.\n *\n * @param {string} \tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string|null} The root or null if the root was not found.\n */\nconst checkIfWordIsRoot = function( word, morphologyData ) {\n\t// Check if the word consists of two letters and find its root.\n\tif ( word.length === 2 ) {\n\t\treturn processTwoLetterWords( word, morphologyData );\n\t}\n\t// Check if the word consists of three letters.\n\tif ( word.length === 3 ) {\n\t\t// Check if it is a root.\n\t\tif ( morphologyData.externalStemmer.threeLetterRoots.includes( word ) ) {\n\t\t\treturn word;\n\t\t}\n\t\t// If it is not a root, process it to find its root.\n\t\tconst wordAfterThreeLetterProcessing = processThreeLetterWords( word, morphologyData );\n\t\tif ( wordAfterThreeLetterProcessing ) {\n\t\t\treturn wordAfterThreeLetterProcessing;\n\t\t}\n\t}\n\t// If the word consists of four letters, check if it is on the list of four-letter roots.\n\tif ( word.length === 4 ) {\n\t\tif ( morphologyData.externalStemmer.fourLetterRoots.includes( word ) ) {\n\t\t\treturn word;\n\t\t}\n\t}\n};\n\n/**\n * Checks whether the word ends in a suffix, and removes it if it does.\n *\n * @param {string}\t\tword\t\tThe word to check.\n * @param {string[]}\tsuffixes\tThe suffixes to check.\n *\n * @returns {string}\tThe word with the suffix removed or the input word if no suffix was found.\n */\nconst removeSuffix = function( word, suffixes ) {\n\tfor ( const suffix of suffixes ) {\n\t\tif ( word.endsWith( suffix ) ) {\n\t\t\treturn word.slice( 0, -suffix.length );\n\t\t}\n\t}\n\treturn word;\n};\n\n/**\n * Checks whether the word starts with a prefix, and removes it if it does.\n *\n * @param {string}\t\tword\t\tThe word to check.\n * @param {string[]}\tprefixes\tThe prefixes to check.\n *\n * @returns {string}\tThe word with the prefix removed or the input word if no prefix was found.\n */\nconst removePrefix = function( word, prefixes ) {\n\tfor ( const prefix of prefixes ) {\n\t\tif ( word.startsWith( prefix ) ) {\n\t\t\treturn word.substring( prefix.length, word.length );\n\t\t}\n\t}\n\treturn word;\n};\n\n/**\n * Searches for a suffix, removes it if found, and tries to find the root of the stemmed word. If the root is not found, the\n * function returns null, with one exception: it is possible that in the checkPatterns function that is ran inside of this one,\n * the word is modified but no root is found. In this case, the function returns the modified word.\n *\n * Example: جمعكم -> جمع (word with suffix كم which is found on the list of three-letter roots after removing the suffix).\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null} An object with the root/modified word and information about whether the root was found, or null if\n * \t\t\t\t\t\t  the word is not modified and no root is found.\n */\nconst processWordWithSuffix = function( word, morphologyData ) {\n\t// If the word length is three letters or less, return null as the word is too short to have a suffix.\n\tif ( word.length <= 3 )  {\n\t\treturn null;\n\t}\n\t// Find and remove suffix.\n\tconst wordAfterRemovingSuffix = removeSuffix( word, morphologyData.externalStemmer.suffixes );\n\tif ( wordAfterRemovingSuffix !== word ) {\n\t\t// If suffix was removed, check if the stemmed word is a root.\n\t\tconst root = checkIfWordIsRoot( wordAfterRemovingSuffix, morphologyData );\n\t\tif ( root ) {\n\t\t\treturn { word: root, rootFound: true };\n\t\t}\n\t\t// If no root was found and the stemmed word is longer than 2 characters, try to get the root by matching with a pattern.\n\t\tif ( word.length > 2 ) {\n\t\t\tconst outputAfterCheckingPatterns = checkPatterns( wordAfterRemovingSuffix, morphologyData );\n\t\t\tif ( outputAfterCheckingPatterns ) {\n\t\t\t\treturn outputAfterCheckingPatterns;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Searches for a prefix (other than the definite article), removes it if found, and tries to find the root of the stemmed\n * word. If the root is not found, the function returns null, with one exception: it is possible that in the checkPatterns\n * function that is ran inside of this one, the word is modified but no root is found. In this case, the function returns\n * the modified word.\n *\n * Example: للزهور -> زهر (word with prefix لل that gets its root by matching with a pattern after removing the prefix).\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null}\tAn object with the root/modified word and information about whether the root was found, or null if\n * \t\t\t\t\t\t    the word is not modified and no root is found.\n */\nconst processWordWithPrefix = function( word, morphologyData ) {\n\t// If the word length is less than or the same as three letters, return null as the word is too short to have a prefix.\n\tif ( word.length <= 3 )  {\n\t\treturn null;\n\t}\n\t// Find and remove prefix.\n\tlet wordAfterRemovingPrefix = removePrefix( word, morphologyData.externalStemmer.prefixes );\n\tif ( wordAfterRemovingPrefix !== word ) {\n\t\t// If prefix was removed, check if the stemmed word is a root.\n\t\tconst root = checkIfWordIsRoot( wordAfterRemovingPrefix, morphologyData );\n\t\tif ( root ) {\n\t\t\treturn { word: root, rootFound: true };\n\t\t}\n\t\t// If no root was found and the stemmed word is longer than 2 characters, try to get the root by matching with a pattern.\n\t\tif ( wordAfterRemovingPrefix.length > 2 ) {\n\t\t\tconst outputAfterCheckingPatterns = checkPatterns( wordAfterRemovingPrefix, morphologyData );\n\t\t\tif ( outputAfterCheckingPatterns ) {\n\t\t\t\tif ( outputAfterCheckingPatterns.rootFound === true ) {\n\t\t\t\t\treturn outputAfterCheckingPatterns;\n\t\t\t\t}\n\t\t\t\twordAfterRemovingPrefix = outputAfterCheckingPatterns.word;\n\t\t\t}\n\t\t}\n\t\t// If the root was still not found, try to find and remove suffixes and find the root again.\n\t\tconst outputAfterCheckingForSuffixes = processWordWithSuffix( wordAfterRemovingPrefix, morphologyData );\n\t\tif ( outputAfterCheckingForSuffixes ) {\n\t\t\treturn outputAfterCheckingForSuffixes;\n\t\t}\n\t}\n};\n\n/**\n * Checks if the word is a root. If root is not found, checks whether the root can be derived using a pattern. If the root is\n * still not found, removes affixes and tries to find the root again. If the root is not found, the function returns null,\n * with one exception: it is possible that in the checkPatterns function that is ran inside of this one, the word is modified\n * but no root is found. In this case, the function returns the modified word.\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null}\tAn object with the root/modified word and information about whether the root was found, or null if\n * \t\t\t\t\t\t    the word is not modified and no root is found.\n */\nconst findRoot = function( word, morphologyData ) {\n\t// Check if the word is a root.\n\tconst root = checkIfWordIsRoot( word, morphologyData );\n\tif ( root ) {\n\t\treturn { word: root, rootFound: true };\n\t}\n\tif ( word.length > 2 ) {\n\t\t// Check if the root can be derived by matching a pattern.\n\t\tconst outputAfterCheckingPatterns = checkPatterns( word, morphologyData );\n\t\tif ( outputAfterCheckingPatterns ) {\n\t\t\tif ( outputAfterCheckingPatterns.rootFound === true ) {\n\t\t\t\treturn outputAfterCheckingPatterns;\n\t\t\t}\n\t\t\tword = outputAfterCheckingPatterns.word;\n\t\t}\n\t}\n\t// Remove affixes and check if the stemmed word is a root\n\tconst outputAfterProcessingSuffix = processWordWithSuffix( word, morphologyData );\n\tif ( outputAfterProcessingSuffix ) {\n\t\tif ( outputAfterProcessingSuffix.rootFound === true ) {\n\t\t\treturn outputAfterProcessingSuffix;\n\t\t}\n\t\tword = outputAfterProcessingSuffix.word;\n\t}\n\tconst outputAfterRemovingPrefix = processWordWithPrefix( word, morphologyData );\n\tif ( outputAfterRemovingPrefix ) {\n\t\treturn outputAfterRemovingPrefix;\n\t}\n};\n\n/**\n * Search for and remove a definite article and try to get the root of the word. If the root was not found, but the word\n * was modified inside the checkPatterns function, returns the modified word. If the definite article was removed and the\n * stemmed word is longer than three letters, but the root was not found, returns the stemmed word. Otherwise, if the root\n * was not found, returns null.\n *\n * Example: الجدولين -> جدول (word with definite article ال and suffix ين ).\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null}\tAn object with the root/modified word and information about whether the root was found, or null if\n * \t\t\t\t\t\t    the word is not modified and no root is found.\n */\nconst processWordWithDefiniteArticle = function( word, morphologyData ) {\n\t// Search for and remove the definite article.\n\tlet wordAfterRemovingDefiniteArticle = removePrefix( word, morphologyData.externalStemmer.definiteArticles );\n\t// If a definite article was removed, try to find the root.\n\tif ( wordAfterRemovingDefiniteArticle !== word ) {\n\t\t/**\n\t\t * If definite article was removed, try to find root by checking whether the word is a root, matching with a pattern, and/or\n\t\t * searching for and removing prefixes.\n\t\t */\n\t\tconst outputAfterTryingToFindRoot = findRoot( wordAfterRemovingDefiniteArticle, morphologyData );\n\t\tif ( outputAfterTryingToFindRoot  ) {\n\t\t\tif ( outputAfterTryingToFindRoot.rootFound === true ) {\n\t\t\t\treturn outputAfterTryingToFindRoot;\n\t\t\t}\n\t\t\twordAfterRemovingDefiniteArticle = outputAfterTryingToFindRoot.word;\n\t\t}\n\t\t// If the word after removing the definite article is longer than three words, return it even if no root was found.\n\t\tif ( wordAfterRemovingDefiniteArticle > 3 ) {\n\t\t\treturn { word: wordAfterRemovingDefiniteArticle, rootFound: false };\n\t\t}\n\t}\n};\n\n/**\n * Searches for prefix waw (و) and removes it if found, then tries to find the root. If the root is still not found, removes\n * affixes and tries to find the root again. If the root is not found, the function returns null, with one exception: it\n * is possible that in the checkPatterns function that is ran inside of this one, the word is modified but no root is found.\n * In this case, the function returns the modified word.\n *\n * Example: وتمثّل -> مثل (word with prefix waw which matches a pattern after removing the prefix).\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {Object|null}\tAn object with the root/modified word and information about whether the root was found, or null if\n * \t\t\t\t\t\t    the word is not modified and no root is found.\n */\nconst processWordWithPrefixWaw = function( word, morphologyData ) {\n\tlet wordAfterRemovingWaw = \"\";\n\tif ( word.length > 3 && word.startsWith( morphologyData.externalStemmer.characters.waw ) ) {\n\t\twordAfterRemovingWaw = word.substring( 1 );\n\t\t/*\n\t\t * If the prefix waw was removed, try to find the root by checking whether the word is a root, matching with a pattern,\n\t\t * and/or searching for and removing prefixes.\n\t\t */\n\t\tconst outputAfterTryingToFindRoot = findRoot( wordAfterRemovingWaw, morphologyData );\n\t\tif ( outputAfterTryingToFindRoot ) {\n\t\t\treturn outputAfterTryingToFindRoot;\n\t\t}\n\t}\n};\n\n/**\n * Stems Arabic words.\n *\n * @param {string}\tword\t\t\tThe word to stem.\n * @param {Object}\tmorphologyData\tThe Arabic morphology data.\n *\n * @returns {string}\tThe stemmed word.\n */\nexport default function stem( word, morphologyData ) {\n\t// Remove diacritics that serve as phonetic guides and are not usually used in regular writing.\n\tconst regexRemovingDiacritics = morphologyData.externalStemmer.regexRemovingDiacritics;\n\tword.replace( new RegExp( regexRemovingDiacritics ), \"\" );\n\n\tconst root = checkIfWordIsRoot( word, morphologyData );\n\tif ( root ) {\n\t\treturn root;\n\t}\n\t// If the root still hasn't been found, check if the word matches a pattern and get its root if it does.\n\tconst outputAfterCheckingPatterns = checkPatterns( word, morphologyData );\n\tif ( outputAfterCheckingPatterns ) {\n\t\t// Return the root if it was found in the checkPatterns function\n\t\tif ( outputAfterCheckingPatterns.rootFound === true ) {\n\t\t\treturn outputAfterCheckingPatterns.word;\n\t\t}\n\t\t// If the checkPatterns function modified the word but did not find the root, replace the word with the modified word.\n\t\tword = outputAfterCheckingPatterns.word;\n\t}\n\n\t// If the root still hasn't been found, remove the definite article and try to find the root.\n\tconst outputAfterProcessingDefiniteArticle = processWordWithDefiniteArticle( word, morphologyData );\n\tif ( outputAfterProcessingDefiniteArticle ) {\n\t\t// Return the root if it was found after removing the definite article.\n\t\tif ( outputAfterProcessingDefiniteArticle.rootFound === true ) {\n\t\t\treturn outputAfterProcessingDefiniteArticle.word;\n\t\t}\n\t\t// If the definite article was removed but the root was not found, replace the word with the stemmed word.\n\n\t\tword = outputAfterProcessingDefiniteArticle.word;\n\t}\n\n\t// If the root still hasn't been found, remove the prefix waw and try to find the root.\n\tconst outputAfterProcessingPrefixWaw = processWordWithPrefixWaw( word, morphologyData );\n\tif ( outputAfterProcessingPrefixWaw ) {\n\t\tif ( outputAfterProcessingPrefixWaw.rootFound === true ) {\n\t\t\treturn outputAfterProcessingPrefixWaw.word;\n\t\t}\n\t\t// If the checkPatterns function modified the word but did not find the root, replace the word with the modified word.\n\t\tword = outputAfterProcessingPrefixWaw.word;\n\t}\n\t// If the root still hasn't been found, remove a suffix and try to find the root.\n\tconst outputAfterProcessingSuffix = processWordWithSuffix( word, morphologyData );\n\tif ( outputAfterProcessingSuffix ) {\n\t\tif ( outputAfterProcessingSuffix.rootFound === true ) {\n\t\t\treturn outputAfterProcessingSuffix.word;\n\t\t}\n\t\t// If the checkPatterns function modified the word but did not find the root, replace the word with the modified word.\n\t\tword = outputAfterProcessingSuffix.word;\n\t}\n\n\t// If the root still hasn't been found, remove a prefix and try to find the root.\n\tconst wordAfterProcessingPrefix = processWordWithPrefix( word, morphologyData );\n\tif ( wordAfterProcessingPrefix ) {\n\t\treturn wordAfterProcessingPrefix.word;\n\t}\n\n\treturn word;\n}\n"]}