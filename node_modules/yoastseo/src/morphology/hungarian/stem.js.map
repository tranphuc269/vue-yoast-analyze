{"version":3,"sources":["../../../../src/morphology/hungarian/stem.js"],"names":["stem","isVowel","morphologyData","word","vowels","externalStemmer","regex","RegExp","search","consonantOrDigraphPosition","digraphRegex","digraphs","consonantRegex","consonants","digraphPosition","consonantPosition","findR1Position","vowelPosition","consonantOrDigraph","stemSuffixes1","length","r1Position","suffix","suffixes1","wordAfterStemming","slice","doubleConsonantRegex","doubleConsonants","checkIfWordEndsOnDoubleConsonant","tripleConsonantsRegex","tripleDoubleConsonants","checkIfWordEndsOnTripleDoubleConsonant","charAt","stemSuffixes2","suffixes2","suffix2","substring","checkIfWordEndsOnAccentedEorE","endsWith","replace","stemSuffixes3","suffixes3","suffix3a","suffixes3a","suffix3b","suffixes3b","stemSuffixes4","suffixes4","suffix4","stemSuffixes5","suffixes5","suffix5a","suffixes5a","suffix5b","suffixes5b","stemSuffixes6","suffixes6","suffix6","stemSuffixes7","suffixes7","suffix7","stemSuffixes8","suffixes8","suffix8a","suffixes8a","suffix8b","suffixes8b","stemSuffixes9","suffixes9","suffix9","stemSuffixes10","suffixes10","suffix10","stemSuffixes11","suffixes11","suffixes11a","suffixes11b","stemSuffixes12","suffixes12","suffix12a","suffixes12a","suffix12b","suffixes12b","stemSuffixes13","suffixes13","suffix13a","suffixes13a","suffix13b","suffixes13b","stemSuffixes14","suffixes14","suffix14","wordAfterSuffixes1","wordAfterSuffixes2","wordAfterSuffixes3","wordAfterSuffixes4","wordAfterSuffixes5","wordAfterSuffixes6","wordAfterSuffixes7","wordAfterSuffixes8","wordAfterSuffixes9","wordAfterSuffixes10","wordAfterSuffixes11","wordAfterSuffixes12","wordAfterSuffixes13"],"mappings":"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","file":"stem.js","sourcesContent":["/*\n * Copyright (c) 2001, Dr Martin Porter,\n * Copyright (c) 2002, Richard Boulton.\n *\n * All rights reserved.\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided\n * that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Checks if the input character is a Hungarian vowel.\n *\n * @param {Object} morphologyData   The Hungarian morphology data.\n * @param {string} word The word to check\n * @returns {number} Whether the input character is a Hungarian vowel.\n */\nconst isVowel = function( morphologyData, word ) {\n\tconst vowels = morphologyData.externalStemmer.vowels;\n\tconst regex = new RegExp( vowels );\n\treturn word.search( regex );\n};\n\n/**\n * Defines consonants or digraphs position.\n *\n * @param {Object} morphologyData Morphology data file\n * @param {string} word the word to check\n * @returns {number} the position of the digraph or consonant\n */\nconst consonantOrDigraphPosition = function( morphologyData, word ) {\n\tconst digraphRegex = new RegExp( morphologyData.externalStemmer.digraphs );\n\tconst consonantRegex = new RegExp( morphologyData.externalStemmer.consonants );\n\tconst digraphPosition = word.search( digraphRegex );\n\tconst consonantPosition = word.search( consonantRegex );\n\tif ( digraphPosition === consonantPosition ) {\n\t\treturn digraphPosition + 1;\n\t}\n\treturn consonantPosition;\n};\n\n/**\n * Defines the R1 region: Checks if the word begins with a vowel: defines R1 as the region after the first consonant or diagraph\n * Checks if the word begins with a consonant: defines R1 as the region after the first vowel\n *\n * @param {Object} morphologyData Morphology data file\n * @param {string} word The word to stem\n * @returns {number} The R1 region index.\n */\nconst findR1Position = function( morphologyData, word ) {\n\tconst vowelPosition = isVowel( morphologyData, word );\n\tif ( vowelPosition === 0 ) {\n\t\tconst consonantOrDigraph = consonantOrDigraphPosition( morphologyData, word );\n\t\treturn ( consonantOrDigraph + 1 );\n\t}\n\treturn ( vowelPosition + 1 );\n};\n\n/**\n * Searches on of the following noun case suffixes: al, el and stems the suffix if found in R1 and preceded by a double consonant\n * and removes one of the double consonants\n *\n * @param {string} word             The word to stem\n * @param {Object} morphologyData   The morphology data file with suffix list\n *\n * @returns {string}    The stemmed word.\n *\n */\nconst stemSuffixes1 = function( word, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix = word.search( new RegExp( morphologyData.externalStemmer.suffixes1 ) );\n\tif ( suffix >= r1Position ) {\n\t\tlet wordAfterStemming = word.slice( 0, -2 );\n\n\t\tconst doubleConsonantRegex = new RegExp( morphologyData.externalStemmer.doubleConsonants );\n\t\tconst checkIfWordEndsOnDoubleConsonant = wordAfterStemming.search( doubleConsonantRegex );\n\t\tif ( checkIfWordEndsOnDoubleConsonant !== -1 ) {\n\t\t\twordAfterStemming = wordAfterStemming.slice( 0, -1 );\n\t\t}\n\n\t\tconst tripleConsonantsRegex = new RegExp( morphologyData.externalStemmer.tripleDoubleConsonants );\n\t\tconst checkIfWordEndsOnTripleDoubleConsonant = wordAfterStemming.search( tripleConsonantsRegex );\n\t\tif ( checkIfWordEndsOnTripleDoubleConsonant !== -1 ) {\n\t\t\twordAfterStemming = wordAfterStemming.slice( 0, -2 ) + wordAfterStemming.charAt( wordAfterStemming.length - 1 );\n\t\t}\n\n\t\tif ( wordAfterStemming.length !== word.slice( 0, -2 ).length ) {\n\t\t\treturn wordAfterStemming;\n\t\t}\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longer of the following suffixes: ban   ben   ba   be   ra   re   nak   nek   val   vel   tól   tõl\n * ról   rõl   ból   bõl   hoz   hez   höz   nál   nél   ig   at   et   ot   öt   ért   képp   képpen   kor   ul   ül\n * vá   vé   onként   enként   anként   ként   en   on   an   ön   n   t and stems the suffix if found in R1\n * If the suffix is preceded by á replaces with a. If the suffix is preceded by é replaces with e\n *\n * @param {string} word         The word to stem\n * @param {string} suffixes2  suffixes from group 2\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string}    The stemmed word\n */\nconst stemSuffixes2 = function( word, suffixes2, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix2 = word.search( new RegExp( suffixes2 ) );\n\tif ( suffix2 >= r1Position ) {\n\t\tlet wordAfterStemming = word.substring( 0, suffix2 );\n\t\tconst checkIfWordEndsOnAccentedEorE = ( wordAfterStemming.endsWith( \"á\" ) || wordAfterStemming.endsWith( \"é\" ) );\n\t\tif ( checkIfWordEndsOnAccentedEorE ) {\n\t\t\twordAfterStemming = wordAfterStemming.replace( /á$/i, \"a\" || /é$/i, \"e\" );\n\t\t}\n\t\treturn wordAfterStemming;\n\t}\n\treturn word;\n};\n\n/** Searches for the longest among the following suffixes in R1: án   ánként and replace by a\n * Search for én in R1 and replace with e\n *\n * @param {string} word         The word to check for the suffix.\n * @param {Object} suffixes3    The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes3 = function( word, suffixes3, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix3a = word.search( new RegExp( suffixes3.suffixes3a ) );\n\tif ( suffix3a >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix3a ) + \"a\" );\n\t}\n\tconst suffix3b = word.search( new RegExp( suffixes3.suffixes3b ) );\n\tif ( suffix3b >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix3b ) + \"e\" );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest among following suffixes astul   estül   stul   stül in R1 and delete.\n *\n * @param {string} word         The word to check for the suffix.\n * @param {string} suffixes4    The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes4 = function( word, suffixes4, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix4 = word.search( new RegExp( suffixes4 ) );\n\tif ( suffix4 >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix4 ) );\n\t}\n\treturn word;\n};\n\n/**\n * Searhes for one of the suffixes ástul éstül, and replace ástul with a and éstül with e.\n *\n * @param {string} word         The word to check for the suffix.\n * @param {string[]} suffixes5  The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes5 = function( word, suffixes5, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix5a = word.search( new RegExp( suffixes5.suffixes5a ) );\n\tif ( suffix5a >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix5a ) + \"a\" );\n\t}\n\tconst suffix5b = word.search( new RegExp( suffixes5.suffixes5b ) );\n\tif ( suffix5b  >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix5b ) + \"e\" );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for one of the suffixes Search for one of the following suffixes: á   é and delete. If preceded by double\n * Consonant, remove one of the double consonants.\n *\n * @param {string} word         The word to check for the suffix.\n * @param {string} suffixes6  The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes6 = function( word, suffixes6, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix6 = word.search( new RegExp( suffixes6 ) );\n\tif ( suffix6 >= r1Position ) {\n\t\tlet wordAfterStemming = word.slice( 0, -1 );\n\t\tconst doubleConsonantRegex = new RegExp( morphologyData.externalStemmer.doubleConsonants );\n\t\tconst checkIfWordEndsOnDoubleConsonant = wordAfterStemming.search( doubleConsonantRegex );\n\t\tif ( checkIfWordEndsOnDoubleConsonant !== -1 ) {\n\t\t\twordAfterStemming = wordAfterStemming.slice( 0, -1 );\n\t\t}\n\t\treturn wordAfterStemming;\n\t}\n\treturn word;\n};\n\n/**\n * Searches for one of the suffixes in R1 and delete oké   öké   aké   eké   ké   éi   é.\n *\n * @param {string} word         The word to check for the suffix.\n * @param {string} suffixes7  The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n *\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes7 = function( word, suffixes7, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix7 = word.search( new RegExp( suffixes7 ) );\n\tif ( suffix7 >= r1Position ) {\n\t\treturn word.substring( 0, suffix7 );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for one of the suffixes if R1 : áké   áéi and replace with a, or éké   ééi   éé and replace with e.\n *\n * @param {string} word         The word to check for the suffix.\n * @param {Object} suffixes8  The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes8 = function( word, suffixes8, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix8a = word.search( new RegExp( suffixes8.suffixes8a ) );\n\tif ( suffix8a >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix8a ) + \"a\" );\n\t}\n\tconst suffix8b = word.search( new RegExp( suffixes8.suffixes8b ) );\n\tif ( suffix8b >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix8b ) + \"e\" );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest one of the suffixes in R1 and delete: ünk   unk   nk   juk   jük   uk   ük   em   om   am\n * m   od   ed ad   öd   d   ja   je   a   e o\n * @param {string} word         The word to check for the suffix.\n * @param {string} suffixes9  The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes9 = function( word, suffixes9, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix9 = word.search( new RegExp( suffixes9 ) );\n\tif ( suffix9 >= r1Position ) {\n\t\treturn word.substring( 0, suffix9 );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest one of these suffixes in R1: jaim, jeim, aim, eim, im, jaid, eid, aid, eid, id, jai, jei, ai,\n * ei, i, jaink, jeink, eink, aink, ink, jaitok, jeitek, aitok, eitek, itek, jeik, jaik, aik, eik, ik and stem it\n *\n * @param {string} word         The word to check.\n * @param {string} suffixes10     The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n * @returns {string}    The stemmed word.\n */\nconst stemSuffixes10 = function( word, suffixes10, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix10 = word.search( new RegExp( suffixes10 ) );\n\tif ( suffix10 >= r1Position ) {\n\t\treturn word.substring( 0, suffix10 );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest one of these suffixes in R1 ánk ájuk ám ád á and replace  with a\n * Searches the longest one of the suffixes in R1 énk éjük ém éd é and replace with e\n *\n * @param {string} word             The word to check for the suffix.\n * @param {string[]} suffixes11     The suffixes to check.\n * @param {Object} morphologyData Morphology data file\n * @returns {string} The word without the suffix.\n */\nconst stemSuffixes11 = function( word, suffixes11, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffixes11a = word.search( new RegExp( suffixes11.suffixes11a ) );\n\tif ( suffixes11a >= r1Position ) {\n\t\treturn word.substring( 0, suffixes11a ) + \"a\";\n\t}\n\tconst suffixes11b = word.search( new RegExp( suffixes11.suffixes11b ) );\n\tif ( suffixes11b >= r1Position ) {\n\t\treturn word.substring( 0, suffixes11b ) + \"e\";\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest one of these suffixes in R1 áim   áid   ái   áink   áitok   áik and replace with a, and\n * Search for the longest one of the suffixes in R1 éim   éid     éi   éink   éitek   éik and replace with e\n *\n * @param {string} word         The word to check.\n * @param {string[]}suffixes12  The suffixes to stem.\n * @param {Object} morphologyData Morphology data file\n * @returns {string}    The stemmed word.\n */\nconst stemSuffixes12 = function( word, suffixes12, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix12a = word.search( new RegExp( suffixes12.suffixes12a ) );\n\tif ( suffix12a >= r1Position ) {\n\t\treturn word.substring( 0, suffix12a ) + \"a\";\n\t}\n\tconst suffix12b = word.search( new RegExp( suffixes12.suffixes12b ) );\n\tif ( suffix12b >= r1Position ) {\n\t\treturn word.substring( 0, suffix12b ) + \"e\";\n\t}\n\treturn word;\n};\n\n/**\n * Searches for suffix ák and ék in R1 and replace with a and e respectively.\n *\n * @param {string} word         The word to check.\n * @param {Object}suffixes13  The suffixes to stem.\n * @param {Object} morphologyData Morphology data file\n * @returns {string}    The stemmed word.\n */\nconst stemSuffixes13 = function( word, suffixes13, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix13a = word.search( new RegExp( suffixes13.suffixes13a ) );\n\tif ( suffix13a >= r1Position ) {\n\t\treturn ( word.slice( 0, -2 ) + \"a\" );\n\t}\n\tconst suffix13b = word.search( new RegExp( suffixes13.suffixes13b ) );\n\tif ( suffix13b >= r1Position  ) {\n\t\treturn ( word.slice( 0, -2 ) + \"e\" );\n\t}\n\treturn word;\n};\n\n/**\n * Searches for the longest of these suffixes ök ok ek ak k in R1 and stem the suffix\n *\n * @param {string} word         The word to check.\n * @param {string}suffixes14  The suffixes to stem.\n * @param {Object} morphologyData Morphology data file\n * @returns {string}    The stemmed word.\n */\nconst stemSuffixes14 = function( word, suffixes14, morphologyData ) {\n\tif ( word.length < 3 ) {\n\t\treturn word;\n\t}\n\tconst r1Position = findR1Position( morphologyData, word );\n\tconst suffix14 = word.search( new RegExp( suffixes14 ) );\n\tif ( suffix14 >= r1Position ) {\n\t\treturn ( word.substring( 0, suffix14 ) );\n\t}\n\treturn word;\n};\n\n/**\n * Stems Hungarian words.\n *\n * @param {string} word            The word to stem.\n * @param {Object} morphologyData  The Hungarian morphology data.\n *\n * @returns {string} The stemmed word.\n */\nexport default function stem( word, morphologyData ) {\n\tconst wordAfterSuffixes1 = stemSuffixes1( word, morphologyData );\n\tconst wordAfterSuffixes2 = stemSuffixes2( wordAfterSuffixes1, morphologyData.externalStemmer.suffixes2, morphologyData );\n\tconst wordAfterSuffixes3 = stemSuffixes3( wordAfterSuffixes2, morphologyData.externalStemmer.suffixes3, morphologyData );\n\tconst wordAfterSuffixes4 = stemSuffixes4( wordAfterSuffixes3, morphologyData.externalStemmer.suffixes4, morphologyData );\n\tconst wordAfterSuffixes5 = stemSuffixes5( wordAfterSuffixes4, morphologyData.externalStemmer.suffixes5, morphologyData );\n\tconst wordAfterSuffixes6 = stemSuffixes6( wordAfterSuffixes5, morphologyData.externalStemmer.suffixes6, morphologyData );\n\tconst wordAfterSuffixes7 = stemSuffixes7( wordAfterSuffixes6, morphologyData.externalStemmer.suffixes7, morphologyData );\n\tconst wordAfterSuffixes8 = stemSuffixes8( wordAfterSuffixes7, morphologyData.externalStemmer.suffixes8, morphologyData );\n\tconst wordAfterSuffixes9 = stemSuffixes9( wordAfterSuffixes8, morphologyData.externalStemmer.suffixes9, morphologyData );\n\tconst wordAfterSuffixes10 = stemSuffixes10( wordAfterSuffixes9, morphologyData.externalStemmer.suffixes10, morphologyData );\n\tconst wordAfterSuffixes11 = stemSuffixes11( wordAfterSuffixes10, morphologyData.externalStemmer.suffixes11, morphologyData );\n\tconst wordAfterSuffixes12 = stemSuffixes12( wordAfterSuffixes11, morphologyData.externalStemmer.suffixes12, morphologyData );\n\tconst wordAfterSuffixes13 = stemSuffixes13( wordAfterSuffixes12, morphologyData.externalStemmer.suffixes13, morphologyData );\n\n\treturn ( stemSuffixes14( wordAfterSuffixes13, morphologyData.externalStemmer.suffixes14, morphologyData ) );\n}\n\n"]}