{"version":3,"sources":["../../../../src/morphology/indonesian/stem.js"],"names":["stem","checkSingleSyllableWordSuffix","word","suffixesArray","suffix","match","stemSingleSyllableWordsPrefixes","morphologyData","startsWith","stemming","singleSyllableWords","substring","length","test","stemSingleSyllableWords","suffixCombination","singleSyllableWordsSuffixes","inputWord","some","shortWord","regexRules","removeParticle","doNotStemWords","doNotStemParticle","removePronoun","doNotStemPronounSuffix","wordWithoutDerivationalSuffix","removeSuffixes","doNotStemSuffix","includes","tryStemmingKeAndTer","terException","doNotStemPrefix","doNotStemFirstOrderPrefix","doNotStemTer","wordWithTer","beginningModification","rBeginning","replace","checkFirstOrderPrefixExceptions","nBeginning","kBeginning","pBeginning","mBeginning","wordAfterKeTerCheck","removeFirstOrderPrefix","firstOrderPrefixException","regex","removeFirstOrderPrefixes","withRemovedFirstOrderPrefix","removeSecondOrderPrefix","removeSecondOrderPrefixes","withRemovedSecondOrderPrefix","stemDerivational","wordLength","removeSuffixRules","removeSuffixExceptions","doNotStemSecondOrderPrefix","wordWithPrefixLookAlike","stemSingular","doNotStemPronoun","firstDerivationalStem","stemPlural","hyphenIndex","indexOf","splitWord","split","firstPart","secondPart","firstPartBeginningTrimmed","substr","secondPartBeginningTrimmed","nonPlurals","nonPluralReduplications","shouldNotBeStemmed","stemmedPlural"],"mappings":"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","file":"stem.js","sourcesContent":["import { buildOneFormFromRegex } from \"../morphoHelpers/buildFormRule\";\nimport createRulesFromMorphologyData from \"../morphoHelpers/createRulesFromMorphologyData\";\nimport { flattenSortLength } from \"../morphoHelpers/flattenSortLength\";\nimport { calculateTotalNumberOfSyllables, removeEnding, checkBeginningsList } from \"./helpers\";\n\n/**\n * MIT License\n *\n * Adapted from: Copyright (c) 2013 Adinda Praditya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish,  distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"\n */\n\n/**\n * Checks if a single syllable word has one of the suffixes/suffix combination.\n *\n * @param {string} word The word to check.\n * @param {Array} suffixesArray The array of suffixes\n * @returns {boolean}   Whether the word ends in one of the suffixes or not.\n */\nconst checkSingleSyllableWordSuffix = function( word, suffixesArray ) {\n\tfor ( const suffix of suffixesArray ) {\n\t\tif ( word.match( suffix ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n};\n\n/**\n * Stems the prefix of the single syllable words, i.e. di-/penge-/menge-\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Indonesian morphology data file.\n *\n * @returns {string} The stemmed word.\n */\nconst stemSingleSyllableWordsPrefixes = function( word, morphologyData ) {\n\t// If the word gets prefix di-, stem the prefix here. E.g. dicekkanlah -> cekkanlah, dibomi -> bomi\n\tif ( word.startsWith( \"di\" ) && checkBeginningsList( word, 2, morphologyData.stemming.singleSyllableWords ) ) {\n\t\treturn word.substring( 2, word.length );\n\t}\n\t/*\n\t * If the word gets prefix menge-/penge- and is followed by one of the words in the list, stem the prefix here.\n\t * E.g. pengeboman -> boman\n\t */\n\tif ( /^[mp]enge/i.test( word ) && checkBeginningsList( word, 5, morphologyData.stemming.singleSyllableWords ) ) {\n\t\treturn word.substring( 5, word.length );\n\t}\n\treturn word;\n};\n\n/**\n * Stems Indonesian single syllable words. This function concerns single syllable words\n * with this possible word format [di/penge/menge] + single syllable word + [kan/an/i] + [ku/mu/nya] + [kah/lah/pun], with [] being optional.\n * E.g. dipel -> pel, dipelkan -> pel, dipelkanlah -> pel, pelkan -> pel, pelmulah -> pel, pengeboman -> bom, mengesahkan -> sah\n *\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Indonesian morphology data file.\n *\n * @returns {string} The stemmed word.\n */\nconst stemSingleSyllableWords = function( word, morphologyData ) {\n\tconst singleSyllableWords = morphologyData.stemming.singleSyllableWords;\n\tconst suffixCombination = morphologyData.stemming.singleSyllableWordsSuffixes;\n\tconst inputWord = word;\n\t// If the word starts with prefix di-/penge-/menge-, stem the prefix here. E.g. pengeboman -> boman, dipelkan -> pelkan\n\tword = stemSingleSyllableWordsPrefixes( word, morphologyData );\n\n\t// Check if a word starts with one of the words in the list, has maximum 3 syllables, and ends in one of the single syllable suffixes\n\tif ( singleSyllableWords.some( shortWord => word.startsWith( shortWord ) ) && calculateTotalNumberOfSyllables( word ) <= 3 &&\n\t\tcheckSingleSyllableWordSuffix( word, suffixCombination ) ) {\n\t\t// If the word gets a particle suffix, stem the particle. E.g. cekkanlah -> cekkan, pelkan -> pel, vasmulah -> vasmu\n\t\tword = removeEnding( word, morphologyData.stemming.regexRules.removeParticle,\n\t\t\tmorphologyData.stemming.doNotStemWords.doNotStemParticle, morphologyData );\n\n\t\t// If the word gets a possessive pronoun suffix, stem the possessive pronoun. E.g. vasmu -> vas\n\t\tword = removeEnding( word, morphologyData.stemming.regexRules.removePronoun,\n\t\t\tmorphologyData.stemming.doNotStemWords.doNotStemPronounSuffix, morphologyData );\n\n\t\t// If the word ends in -kan/-an/-i suffix, stem the suffix. E.g. cekkan -> cek, bomi -> bom\n\t\tconst wordWithoutDerivationalSuffix = removeEnding( word, morphologyData.stemming.regexRules.removeSuffixes,\n\t\t\tmorphologyData.stemming.doNotStemWords.doNotStemSuffix, morphologyData );\n\n\t\tif ( singleSyllableWords.includes( wordWithoutDerivationalSuffix ) ) {\n\t\t\tword = wordWithoutDerivationalSuffix;\n\t\t}\n\t}\n\t/*\n\t * We only want to stem single syllable words here.\n\t * Thus, if the output word has more than one syllable, we don't stem the input word at all.\n\t */\n\tif ( calculateTotalNumberOfSyllables( word ) > 1 || word.length === 1 ) {\n\t\tword = inputWord;\n\t}\n\treturn word;\n};\n\n/**\n * Tries stemming prefixes ke- and ter-. Ke- is always stemmed, and ter- only if it is a prefix and not part of the stem.\n * Also if the stem of the word begins with r-, only te- is stemmed, not ter-.\n *\n * @param {Object}\tmorphologyData\tThe Indonesian morphology data file.\n * @param {string}\tword\t\t\tThe word to check.\n *\n * @returns {string|null}\tThe stem or null if the word did not start with ter/keter.\n */\nconst tryStemmingKeAndTer = function( morphologyData, word ) {\n\tconst terException = morphologyData.stemming.doNotStemWords.doNotStemPrefix.doNotStemFirstOrderPrefix.doNotStemTer;\n\n\t// If prefix -ter is preceded by prefix -ke, remove it first.\n\tif ( word.startsWith( \"keter\" ) ) {\n\t\tword = word.substring( 2, word.length );\n\t}\n\tif ( word.startsWith( \"ter\" ) ) {\n\t\t// If word is on an exception list of words where -ter should not be stemmed, do not stem -ter and return the word.\n\t\tif ( terException.some( wordWithTer => word.startsWith( wordWithTer ) ) )  {\n\t\t\treturn word;\n\t\t}\n\t\t// If word (without prefixes) is on the list of words beginning with -r, remove only -te instead of -ter.\n\t\tif ( checkBeginningsList( word, 3, morphologyData.stemming.beginningModification.rBeginning ) ) {\n\t\t\treturn word.replace( /^ter/i, \"r\" );\n\t\t}\n\t\t// Otherwise, remove -ter.\n\t\treturn word.substring( 3, word.length );\n\t}\n};\n/**\n * Checks whether a word has a first order prefix and whether it is on an exception list of words which require a stem mofification\n * after removing the prefix. Returns the stem if the prefix was found and the word was matched on an exception list.\n *\n *\n * @param {string}\tword\t\t\tThe word to check.\n * @param {Object}\tmorphologyData\tThe Indonesian morphology data file.\n *\n * @returns {string|null}\tThe stem or null if a prefix was not found, or was found but the word was not on the exception list.\n */\nconst checkFirstOrderPrefixExceptions = function( word, morphologyData ) {\n\tconst beginningModification = morphologyData.stemming.beginningModification;\n\n\t// If a word starts with \"men\" or \"pen\" and is present in the nBeginning exception list, the prefix should be replaced with \"n\".\n\tif ( /^[mp]en/i.test( word ) ) {\n\t\tif ( checkBeginningsList( word, 3, beginningModification.nBeginning ) ) {\n\t\t\treturn word.replace( /^[mp]en/i, \"n\" );\n\t\t}\n\t}\n\tif ( /^[mp]eng/i.test( word ) && checkBeginningsList( word, 4, beginningModification.kBeginning ) ) {\n\t\treturn word.replace( /^[mp]eng/i, \"k\" );\n\t}\n\n\tif ( /^[mp]em/i.test( word ) ) {\n\t\tif ( checkBeginningsList( word, 3, beginningModification.pBeginning ) ) {\n\t\t\treturn word.replace( /^(mem|pem)/i, \"p\" );\n\t\t} else if ( checkBeginningsList( word, 3, beginningModification.mBeginning ) ) {\n\t\t\treturn word.replace( /^(mem|pem)/i, \"m\" );\n\t\t}\n\t}\n\t// Stem prefix ke- if found. Stem te(r)- unless the word was found on the exception list of words with stem beginning in -ter.\n\tconst wordAfterKeTerCheck = tryStemmingKeAndTer( morphologyData, word );\n\tif ( wordAfterKeTerCheck ) {\n\t\treturn wordAfterKeTerCheck;\n\t}\n};\n\n/**\n * Stems the first-order prefix of a word based on regexRules. If the word is found in an exception list, implements a stem modification.\n *\n * @param {string} word           The word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string} The stemmed word.\n */\nconst removeFirstOrderPrefix = function( word, morphologyData ) {\n\t// Checks whether the word has a first order prefix and requires a stem modification.\n\tconst firstOrderPrefixException = checkFirstOrderPrefixExceptions( word, morphologyData );\n\n\tif ( firstOrderPrefixException ) {\n\t\treturn firstOrderPrefixException;\n\t}\n\tconst regex = createRulesFromMorphologyData( morphologyData.stemming.regexRules.removeFirstOrderPrefixes );\n\tconst withRemovedFirstOrderPrefix = buildOneFormFromRegex( word, regex );\n\n\treturn withRemovedFirstOrderPrefix || word;\n};\n\n/**\n * Stems the second-order prefix of a word based on regexRules. If the word is found in an exception list, implements a stem modification.\n *\n * @param {string} word           The word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string} The stemmed word.\n */\nconst removeSecondOrderPrefix = function( word, morphologyData ) {\n\t// If a word starts with \"ber\" or \"per\" and is present in the rBeginning exception list, the prefix should be replaced with \"r\".\n\tif ( ( word.startsWith( \"ber\" ) || word.startsWith( \"per\" ) ) &&\n\t\tcheckBeginningsList( word, 3, morphologyData.stemming.beginningModification.rBeginning ) ) {\n\t\treturn word.replace( /^(ber|per)/i, \"r\" );\n\t}\n\t// If a word starts with a first order prefix followed by peng- and is in the kBeginning exception list, then peng- should be replaced with k.\n\tif ( /^peng/i.test( word ) && checkBeginningsList( word, 4, morphologyData.stemming.beginningModification.kBeginning ) ) {\n\t\treturn word.replace( /^peng/i, \"k\" );\n\t}\n\tconst regex = createRulesFromMorphologyData( morphologyData.stemming.regexRules.removeSecondOrderPrefixes );\n\tconst withRemovedSecondOrderPrefix = buildOneFormFromRegex( word, regex );\n\n\treturn withRemovedSecondOrderPrefix || word;\n};\n\n/**\n * Stems derivational affixes of Indonesian words.\n *\n * @param {string} word           The word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string} The stemmed word.\n */\nconst stemDerivational = function( word, morphologyData ) {\n\tlet wordLength = word.length;\n\tconst removeSuffixRules = morphologyData.stemming.regexRules.removeSuffixes;\n\tconst removeSuffixExceptions = morphologyData.stemming.doNotStemWords.doNotStemSuffix;\n\tconst doNotStemFirstOrderPrefix = flattenSortLength( morphologyData.stemming.doNotStemWords.doNotStemPrefix.doNotStemFirstOrderPrefix );\n\tconst doNotStemSecondOrderPrefix = flattenSortLength( morphologyData.stemming.doNotStemWords.doNotStemPrefix.doNotStemSecondOrderPrefix );\n\n\t// If a word is in the list of words with a beginning that looks like a valid suffix, do not stem the suffix\n\tif ( ! doNotStemFirstOrderPrefix.some( wordWithPrefixLookAlike => word.startsWith( wordWithPrefixLookAlike ) ) ) {\n\t\t/**\n\t\t * If the word has more than 2 syllables and starts with one of first order prefixes (i.e. meng-, meny-, men-, mem-, me-,\n\t\t * peng-, peny-, pen-, pem-, di-, ter-, ke- ), the prefix will be stemmed here. e.g. penyebaran -> sebaran, diperlebarkan -> perlebarkan\n\t\t */\n\t\tword = removeFirstOrderPrefix( word, morphologyData );\n\t}\n\n\tif ( wordLength === word.length ) {\n\t\tif ( ! doNotStemSecondOrderPrefix.some( wordWithPrefixLookAlike => word.startsWith( wordWithPrefixLookAlike ) ) ) {\n\t\t\t/**\n\t\t\t * If the word does not start with one of the first order prefixes but starts with one of the second order prefixes,\n\t\t\t * the prefix will be stemmed here, e.g., peranakan -> anakan\n\t\t\t */\n\t\t\tword = removeSecondOrderPrefix( word, morphologyData );\n\t\t}\n\t\t// If the word has more than 2 syllables and ends in either -kan, -an, or -i suffixes, the suffix will be deleted here, e.g., anakan -> anak\n\t\tif ( calculateTotalNumberOfSyllables( word ) > 2 ) {\n\t\t\tword = removeEnding( word, removeSuffixRules, removeSuffixExceptions, morphologyData );\n\t\t}\n\t} else {\n\t\t// If the word previously had a first order prefix, assign wordLength to the length of the word after prefix deletion.\n\t\twordLength = word.length;\n\t\t/**\n\t\t * If the word after first order prefix deletion is bigger than 2 and ends in either -kan, -an, or -i suffixes,\n\t\t * the suffix will be stemmed here. e.g. penyebaran - sebar.\n\t\t */\n\t\tif ( calculateTotalNumberOfSyllables( word ) > 2 ) {\n\t\t\tword = removeEnding( word, removeSuffixRules, removeSuffixExceptions, morphologyData );\n\t\t}\n\t\t/**\n\t\t * If the word previously had a suffix, we check further if the word after first order prefix and suffix deletion has more than 2 syllables.\n\t\t * If it does have more than 2 syllables and starts with one of the second order prefixes (i.e. ber-, be-, per-, pe-), the prefix will\n\t\t * be stemmed here unless the word is in the exception list of words with a beginning that looks like a second order prefix.\n\t\t */\n\t\tif ( wordLength !== word.length && ! doNotStemSecondOrderPrefix.includes( word ) ) {\n\t\t\tif ( calculateTotalNumberOfSyllables( word ) > 2 ) {\n\t\t\t\tword = removeSecondOrderPrefix( word, morphologyData );\n\t\t\t}\n\t\t}\n\t}\n\treturn word;\n};\n\n/**\n * Stems Indonesian singular words.\n *\n * @param {string} word           The singular word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string} The stem of an Indonesian singular word.\n */\nconst stemSingular = function( word, morphologyData ) {\n\tconst singleSyllableWords = stemSingleSyllableWords( word, morphologyData );\n\t// Stem the single syllable words\n\tword = singleSyllableWords;\n\n\tconst doNotStemParticle = morphologyData.stemming.doNotStemWords.doNotStemParticle;\n\tconst doNotStemPronoun = morphologyData.stemming.doNotStemWords.doNotStemPronounSuffix;\n\n\tif ( calculateTotalNumberOfSyllables( word ) <= 2 ) {\n\t\treturn word;\n\t}\n\n\t// Check if a word after its derivational affixes stemmed exists in the exception list.\n\tconst firstDerivationalStem = stemDerivational( word, morphologyData );\n\tif ( doNotStemParticle.includes( firstDerivationalStem ) || doNotStemPronoun.includes( firstDerivationalStem ) ) {\n\t\t// If it does exist in the exception list, the ending that looks like a particle or a pronoun suffix should not be stemmed.\n\t\treturn firstDerivationalStem;\n\t}\n\n\t/**\n\t * If the word has more than 2 syllables and ends in of the particle endings (i.e. -kah, -lah, -pun), stem the particle here.\n\t * e.g. bajumulah -> bajumu, bawalah -> bawa\n\t */\n\tword = removeEnding( word, morphologyData.stemming.regexRules.removeParticle, doNotStemParticle, morphologyData );\n\n\t// If the word (still) has more than 2 syllables and ends in of the possessive pronoun endings (i.e. -ku, -mu, -nya), stem the ending here.\n\tif ( calculateTotalNumberOfSyllables( word ) > 2 ) {\n\t\t// E.g. bajumu -> baju\n\t\tword = removeEnding( word, morphologyData.stemming.regexRules.removePronoun, doNotStemPronoun, morphologyData );\n\t}\n\n\t// If the word (still) has more than 2 syllables and has derivational affixes, the affix(es) will be stemmed here.\n\tif ( calculateTotalNumberOfSyllables( word ) > 2  ) {\n\t\tword = stemDerivational( word, morphologyData );\n\t}\n\treturn word;\n};\n\n/**\n * Stems Indonesian plural words.\n *\n * @param {string} word           The plural word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string|null} The stem of an Indonesian plural word or null if no plural was detected.\n */\nconst stemPlural = function( word, morphologyData ) {\n\tconst hyphenIndex = word.indexOf( \"-\" );\n\n\t// If there is no hyphen in the word, it can't be a reduplicated plural.\n\tif ( hyphenIndex === -1  ) {\n\t\treturn null;\n\t}\n\n\tconst splitWord = word.split( \"-\" );\n\n\tif ( splitWord.length === 2 ) {\n\t\tlet firstPart = splitWord[ 0 ];\n\t\tlet secondPart = splitWord[ 1 ];\n\n\t\tfirstPart = stemSingular( firstPart, morphologyData );\n\t\tsecondPart = stemSingular( secondPart, morphologyData );\n\n\t\t/*\n\t\t * To compare the first and second part and see whether it's actually a reduplication:\n\t\t * Trim the beginning of the word since it might be variable due to stem changes caused by prefixes.\n\t\t * For example, in \"meniru-nirukan\" the singular stemmer will correctly stem the first \"niru\" to \"tiru\" because\n\t\t * of the prefix \"me\". Since the second part of the word is stemmed individually, there is no \"me\" and hence\n\t\t * \"niru\" remains \"niru\". To still be able to link these two forms to each other,\n\t\t * we compare the two parts of the word after stripping the variable first or first and second letter.\n\t\t *\n\t\t */\n\t\tconst firstPartBeginningTrimmed = firstPart.substr( 1 );\n\t\tconst secondPartBeginningTrimmed = ( secondPart.startsWith( \"ng\" ) || secondPart.startsWith( \"ny\" ) )\n\t\t\t? secondPart.substr( 2 )\n\t\t\t: secondPart.substr( 1 );\n\n\t\tif ( firstPartBeginningTrimmed === secondPartBeginningTrimmed ) {\n\t\t\tconst nonPlurals = morphologyData.stemming.nonPluralReduplications;\n\n\t\t\t// Check non-plural reduplication.\n\t\t\tif ( nonPlurals.includes( firstPart ) && nonPlurals.includes( secondPart ) ) {\n\t\t\t\t/*\n\t\t\t\t * In words such as \"mengira-ngira\" prefix \"me\" causes a modification on both words (k->ng). This will\n\t\t\t\t * be correctly stemmed for the first word, but not the second. Therefore, the correct base form\n\t\t\t\t * \"kira-kira\" is created based on a reduplication of the correctly stemmed first part, \"kira\".\n\t\t\t\t */\n\t\t\t\treturn firstPart + \"-\" + firstPart;\n\t\t\t}\n\n\t\t\t// Return the stemmed singular form of a reduplicated plural.\n\t\t\treturn firstPart;\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Stems Indonesian words\n *\n * @param {string} word           The word to stem.\n * @param {Object} morphologyData The object that contains regex-based rules and exception lists for Indonesian stemming.\n *\n * @returns {string} The stem of an Indonesian word.\n */\nexport default function stem( word, morphologyData ) {\n\t// Check words that shouldn't receive any stemming.\n\tif ( morphologyData.stemming.shouldNotBeStemmed.includes( word ) ) {\n\t\treturn word;\n\t}\n\n\tconst stemmedPlural = stemPlural( word, morphologyData );\n\n\tif ( stemmedPlural ) {\n\t\treturn stemmedPlural;\n\t}\n\n\tword = stemSingular( word, morphologyData );\n\n\treturn word;\n}\n"]}