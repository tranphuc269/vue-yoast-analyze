{"version":3,"sources":["../../../../src/morphology/indonesian/helpers.js"],"names":["calculateTotalNumberOfSyllables","removeEnding","checkBeginningsList","vowelCharacters","isVowel","character","includes","word","result","i","length","regexRules","exceptions","morphologyData","wordsWithKEnding","stemming","doNotStemWords","doNotStemK","endsWith","wordWithoutSuffixAn","substring","removePartRegex","withRemovedPart","prefixLength","beginnings","wordWithoutPrefix","slice","some","beginning","startsWith"],"mappings":";;;;;QAuBgBA,+B,GAAAA,+B;QAsBAC,Y,GAAAA,Y;QA6BAC,mB,GAAAA,mB;;AA1EhB;;AACA;;;;;;AAEA,MAAMC,kBAAkB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,CAAxB;;AAEA;;;;;;;AAOA,SAASC,OAAT,CAAkBC,SAAlB,EAA8B;AAC7B,SAAOF,gBAAgBG,QAAhB,CAA0BD,SAA1B,CAAP;AACA;;AAED;;;;;;;AAOO,SAASL,+BAAT,CAA0CO,IAA1C,EAAiD;AACvD,MAAIC,SAAS,CAAb;;AAEA,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIF,KAAKG,MAA1B,EAAkCD,GAAlC,EAAwC;AACvC,QAAKL,QAASG,KAAME,CAAN,CAAT,CAAL,EAA4B;AAC3BD;AACA;AACD;;AAED,SAAOA,MAAP;AACA;;AAED;;;;;;;;;;AAUO,SAASP,YAAT,CAAuBM,IAAvB,EAA6BI,UAA7B,EAAyCC,UAAzC,EAAqDC,cAArD,EAAsE;AAC5E,MAAKD,WAAWN,QAAX,CAAqBC,IAArB,CAAL,EAAmC;AAClC,WAAOA,IAAP;AACA;;AAED;AACA,QAAMO,mBAAmBD,eAAeE,QAAf,CAAwBC,cAAxB,CAAuCC,UAAhE;AACA,MAAKV,KAAKW,QAAL,CAAe,KAAf,CAAL,EAA8B;AAC7B,UAAMC,sBAAsBZ,KAAKa,SAAL,CAAgB,CAAhB,EAAmBb,KAAKG,MAAL,GAAc,CAAjC,CAA5B;AACA;AACA,QAAKI,iBAAiBR,QAAjB,CAA2Ba,mBAA3B,CAAL,EAAwD;AACvDZ,aAAOY,mBAAP;AACA;AACD;;AAED,QAAME,kBAAkB,6CAA+BV,UAA/B,CAAxB;AACA,QAAMW,kBAAkB,0CAAuBf,IAAvB,EAA6Bc,eAA7B,CAAxB;AACA,SAAOC,mBAAmBf,IAA1B;AACA;;AAED;;;;;;;;;AASO,SAASL,mBAAT,CAA8BK,IAA9B,EAAoCgB,YAApC,EAAkDC,UAAlD,EAA+D;AACrE,QAAMC,oBAAoBlB,KAAKmB,KAAL,CAAYH,YAAZ,CAA1B;AACA,SAAOC,WAAWG,IAAX,CAAiBC,aAAaH,kBAAkBI,UAAlB,CAA8BD,SAA9B,CAA9B,CAAP;AACA","file":"helpers.js","sourcesContent":["import { buildOneFormFromRegex } from \"../morphoHelpers/buildFormRule\";\nimport createRulesFromMorphologyData from \"../morphoHelpers/createRulesFromMorphologyData\";\n\nconst vowelCharacters = [ \"a\", \"e\", \"i\", \"o\", \"u\" ];\n\n/**\n * Determines if an input character is a vowel.\n *\n * @param {string} character The character to check.\n *\n * @returns {boolean} Whether the input character is an Indonesian vowel.\n */\nfunction isVowel( character ) {\n\treturn vowelCharacters.includes( character );\n}\n\n/**\n * Calculates the total number of syllables in the input word.\n *\n * @param {string} word The word to calculate the number of syllables in.\n *\n * @returns {int} The total number of syllables in the word.\n */\nexport function calculateTotalNumberOfSyllables( word ) {\n\tlet result = 0;\n\n\tfor ( let i = 0; i < word.length; i++ ) {\n\t\tif ( isVowel( word[ i ] ) ) {\n\t\t\tresult++;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Stems the ending of a word based on some regexRules after checking if the word is in the exception list.\n *\n * @param {string} word         The word to stem.\n * @param {Array} regexRules    The list of regex-based rules to apply to the word in order to stem it.\n * @param {string[]} exceptions The list of words that should not get the ending removed.\n * @param {Object} morphologyData The Indonesian morphology data file\n *\n * @returns {string} The stemmed word.\n */\nexport function removeEnding( word, regexRules, exceptions, morphologyData ) {\n\tif ( exceptions.includes( word ) ) {\n\t\treturn word;\n\t}\n\n\t// Check words ending in -kan whether they are words whose stem ending in -k that get suffix -an or not.\n\tconst wordsWithKEnding = morphologyData.stemming.doNotStemWords.doNotStemK;\n\tif ( word.endsWith( \"kan\" ) ) {\n\t\tconst wordWithoutSuffixAn = word.substring( 0, word.length - 2 );\n\t\t// If a word has stem ending -k and gets suffix -an, then only stem -an here.\n\t\tif ( wordsWithKEnding.includes( wordWithoutSuffixAn ) ) {\n\t\t\tword = wordWithoutSuffixAn;\n\t\t}\n\t}\n\n\tconst removePartRegex = createRulesFromMorphologyData( regexRules );\n\tconst withRemovedPart = buildOneFormFromRegex( word, removePartRegex );\n\treturn withRemovedPart || word;\n}\n\n/**\n * Checks if the beginning of the word is present in an exception list.\n *\n * @param {string}   word         The word to stem.\n * @param {int}      prefixLength The length of the prefix to be trimmed before checking in the list.\n * @param {string[]} beginnings   The list of word beginnings that should be checked.\n *\n * @returns {boolean} Whether the word is found in the list with beginnings.\n */\nexport function checkBeginningsList( word, prefixLength, beginnings ) {\n\tconst wordWithoutPrefix = word.slice( prefixLength );\n\treturn beginnings.some( beginning => wordWithoutPrefix.startsWith( beginning ) );\n}\n"]}