{"version":3,"sources":["../../../../src/morphology/english/getAdjectiveStem.js"],"names":["word","regexAdjective","stopAdjectives","canBeComparative","constructCanBeFunction","erExceptions","comparativeToBaseRegex","comparativeToBase","base","guessedForm","canBeSuperlative","estExceptions","superlativeToBaseRegex","superlativeToBase","canBeLyAdverb","lyExceptions","adverbToBaseRegex","adverbToBase","endsWith","minimumWordLength","exceptions","wordLength","length","doesEndWith","substring","includes"],"mappings":";;;;;;kBAwCe,UAAUA,IAAV,EAAgBC,cAAhB,EAAgCC,cAAhC,EAAiD;AAC/D;;;;AAIA,OAAMC,mBAAmBC,uBAAwB,IAAxB,EAA8B,CAA9B,EAAiCF,eAAeG,YAAhD,CAAzB;AACA,KAAKF,iBAAkBH,IAAlB,CAAL,EAAgC;AAC/B,QAAMM,yBAAyB,6CAA+BL,eAAeM,iBAA9C,CAA/B;AACA,SAAO;AACNC,SAAM,0CAAuBR,IAAvB,EAA6BM,sBAA7B,KAAyDN,IADzD;AAENS,gBAAa;AAFP,GAAP;AAIA;;AAED;;;;AAIA,OAAMC,mBAAmBN,uBAAwB,KAAxB,EAA+B,CAA/B,EAAkCF,eAAeS,aAAjD,CAAzB;AACA,KAAKD,iBAAkBV,IAAlB,CAAL,EAAgC;AAC/B,QAAMY,yBAAyB,6CAA+BX,eAAeY,iBAA9C,CAA/B;AACA,SAAO;AACNL,SAAM,0CAAuBR,IAAvB,EAA6BY,sBAA7B,KAAyDZ,IADzD;AAENS,gBAAa;AAFP,GAAP;AAIA;;AAED;;;;AAIA,OAAMK,gBAAgBV,uBAAwB,IAAxB,EAA8B,CAA9B,EAAiCF,eAAea,YAAhD,CAAtB;AACA,KAAKD,cAAed,IAAf,CAAL,EAA6B;AAC5B,QAAMgB,oBAAoB,6CAA+Bf,eAAegB,YAA9C,CAA1B;AACA,SAAO;AACNT,SAAM,0CAAuBR,IAAvB,EAA6BgB,iBAA7B,CADA;AAENP,gBAAa;AAFP,GAAP;AAIA;;AAED,QAAO;AACND,QAAMR,IADA;AAENS,eAAa;AAFP,EAAP;AAIA,C;;AAnFD;;AACA;;;;;;AAEA;;;;;;;;;AAJA;AAaA,MAAML,yBAAyB,SAAzBA,sBAAyB,CAAUc,QAAV,EAAoBC,iBAApB,EAAuCC,UAAvC,EAAoD;AAClF,QAAOpB,QAAQ;AACd,QAAMqB,aAAarB,KAAKsB,MAAxB;AACA,MAAKD,aAAaF,iBAAlB,EAAsC;AACrC,UAAO,KAAP;AACA;;AAED,QAAMI,cAAcvB,KAAKwB,SAAL,CAAgBH,aAAaH,SAASI,MAAtC,EAA8CD,UAA9C,MAA+DH,QAAnF;AACA,SAAOK,eAAe,CAAEH,WAAWK,QAAX,CAAqBzB,IAArB,CAAxB;AACA,EARD;AASA,CAVD;;AAYA","file":"getAdjectiveStem.js","sourcesContent":["// \"use strict\";\nimport { buildOneFormFromRegex } from \"../morphoHelpers/buildFormRule\";\nimport createRulesFromMorphologyData from \"../morphoHelpers/createRulesFromMorphologyData\";\n\n/**\n * Constructs a function that checks if the input word can be a specific adjectival form.\n *\n * @param {string}      endsWith            How the form ends.\n * @param {int}         minimumWordLength   How long the word should be to classify for this form.\n * @param {string[]}    exceptions          The list of words with that ending (endsWith) which are not this form.\n *\n * @returns {Function} A function that checks if the input word can be a specific adjectival form.\n */\nconst constructCanBeFunction = function( endsWith, minimumWordLength, exceptions ) {\n\treturn word => {\n\t\tconst wordLength = word.length;\n\t\tif ( wordLength < minimumWordLength ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst doesEndWith = word.substring( wordLength - endsWith.length, wordLength ) === endsWith;\n\t\treturn doesEndWith && ! exceptions.includes( word );\n\t};\n};\n\n/**\n * Forms the base form from an input word.\n *\n * @param {string}   word                                  The word to build the base form for.\n * @param {Object}   regexAdjective                        The lists of regexes to apply to stem adjectives.\n * @param {Array}    regexAdjective.comparativeToBaseRegex The Array of regex-based rules to bring comparatives to base.\n * @param {Array}    regexAdjective.superlativeToBaseRegex The Array of regex-based rules to bring superlatives to base.\n * @param {Array}    regexAdjective.adverbToBaseRegex      The Array of regex-based rules to bring adverbs to base.\n * @param {Object}   stopAdjectives                        The lists of words that are not adverbs.\n * @param {string[]} stopAdjectives.erExceptions           The list of words that end with -er and are not comparatives.\n * @param {string[]} stopAdjectives.estExceptions          The list of words that end with -est and are not superlatives.\n * @param {string[]} stopAdjectives.lyExceptions           The list of words that end with -ly and are not adverbs.\n *\n * @returns {string} The base form of the input word.\n */\nexport default function( word, regexAdjective, stopAdjectives ) {\n\t/*\n\t * Check comparatives: Consider only words of four letters or more (otherwise, words like \"per\" are being treated\n\t * as comparatives).\n\t */\n\tconst canBeComparative = constructCanBeFunction( \"er\", 4, stopAdjectives.erExceptions );\n\tif ( canBeComparative( word ) ) {\n\t\tconst comparativeToBaseRegex = createRulesFromMorphologyData( regexAdjective.comparativeToBase );\n\t\treturn {\n\t\t\tbase: buildOneFormFromRegex( word, comparativeToBaseRegex ) || word,\n\t\t\tguessedForm: \"er\",\n\t\t};\n\t}\n\n\t/*\n\t * Check superlatives: Consider only words of five letters or more (otherwise, words like \"test\" are being treated\n\t * as superlatives).\n\t */\n\tconst canBeSuperlative = constructCanBeFunction( \"est\", 5, stopAdjectives.estExceptions );\n\tif ( canBeSuperlative( word ) ) {\n\t\tconst superlativeToBaseRegex = createRulesFromMorphologyData( regexAdjective.superlativeToBase );\n\t\treturn {\n\t\t\tbase: buildOneFormFromRegex( word, superlativeToBaseRegex ) || word,\n\t\t\tguessedForm: \"est\",\n\t\t};\n\t}\n\n\t/*\n\t * Check ly-adverbs: Consider only words of five letters or more (otherwise, words like \"lily\" are being treated\n\t * as ly-adverbs).\n\t */\n\tconst canBeLyAdverb = constructCanBeFunction( \"ly\", 5, stopAdjectives.lyExceptions );\n\tif ( canBeLyAdverb( word ) ) {\n\t\tconst adverbToBaseRegex = createRulesFromMorphologyData( regexAdjective.adverbToBase );\n\t\treturn {\n\t\t\tbase: buildOneFormFromRegex( word, adverbToBaseRegex ),\n\t\t\tguessedForm: \"ly\",\n\t\t};\n\t}\n\n\treturn {\n\t\tbase: word,\n\t\tguessedForm: \"base\",\n\t};\n}\n"]}