{"version":3,"sources":["../../../../src/morphology/norwegian/stem.js"],"names":["stem","determineR1","word","r1Index","search","removeSuffixesStep1","morphologyData","suffixes1aIndex","RegExp","externalStemmer","regexSuffixes1a","wordAfterStemming","substring","test","slice","suffixSIndex","suffixes1bIndex","regexSuffixes1b","removeSuffixesStep2","suffixes2Index","regexSuffixes2","removeSuffixesStep3","suffixes3Index","regexSuffixes3","step"],"mappings":";;;;;kBA4HwBA,I;AA5HxB;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;AAQA,MAAMC,cAAc,SAAdA,WAAc,CAAUC,IAAV,EAAiB;AACpC;AACA,MAAIC,UAAUD,KAAKE,MAAL,CAAa,yBAAb,CAAd;AACA;AACA,MAAKD,YAAY,CAAC,CAAlB,EAAsB;AACrBA,eAAW,CAAX;AACA;;AAED;AACA,MAAKA,YAAY,CAAC,CAAb,IAAkBA,UAAU,CAAjC,EAAqC;AACpCA,cAAU,CAAV;AACA;;AAED,SAAOA,OAAP;AACA,CAdD;;AAgBA;;;;;;;;;;;;;AAaA,MAAME,sBAAsB,SAAtBA,mBAAsB,CAAUH,IAAV,EAAgBC,OAAhB,EAAyBG,cAAzB,EAA0C;AACrE,QAAMC,kBAAkBL,KAAKE,MAAL,CAAa,IAAII,MAAJ,CAAYF,eAAeG,eAAf,CAA+BC,eAA3C,CAAb,CAAxB;AACA,MAAKH,mBAAmBJ,OAAnB,IAA8BA,YAAY,CAAC,CAAhD,EAAoD;AACnD,QAAIQ,oBAAoBT,KAAKU,SAAL,CAAgB,CAAhB,EAAmBL,eAAnB,CAAxB;AACA,QAAK,QAAQM,IAAR,CAAcF,iBAAd,CAAL,EAAyC;AACxCA,0BAAoBA,kBAAkBG,KAAlB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAApB;AACA;AACD,WAAOH,iBAAP;AACA;;AAED,QAAMI,eAAeb,KAAKE,MAAL,CAAa,IAAb,CAArB;AACA,QAAMY,kBAAkBd,KAAKE,MAAL,CAAa,IAAII,MAAJ,CAAYF,eAAeG,eAAf,CAA+BQ,eAA3C,CAAb,CAAxB;AACA,MAAKF,gBAAgBZ,OAAhB,IAA2Ba,oBAAoB,CAAC,CAAhD,IAAqDb,YAAY,CAAC,CAAvE,EAA2E;AAC1E,WAAOD,KAAKY,KAAL,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP;AACA;;AAGD,SAAOZ,IAAP;AACA,CAlBD;;AAoBA;;;;;;;;;AASA,MAAMgB,sBAAsB,SAAtBA,mBAAsB,CAAUhB,IAAV,EAAgBC,OAAhB,EAAyBG,cAAzB,EAA0C;AACrE,QAAMa,iBAAiBjB,KAAKE,MAAL,CAAa,IAAII,MAAJ,CAAYF,eAAeG,eAAf,CAA+BW,cAA3C,CAAb,CAAvB;AACA,MAAKD,kBAAkBhB,OAAlB,IAA6BA,YAAY,CAAC,CAA/C,EAAmD;AAClDD,WAAOA,KAAKY,KAAL,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP;AACA;AACD,SAAOZ,IAAP;AACA,CAND;;AAQA;;;;;;;;;AASA,MAAMmB,sBAAsB,SAAtBA,mBAAsB,CAAUnB,IAAV,EAAgBC,OAAhB,EAAyBG,cAAzB,EAA0C;AACrE,QAAMgB,iBAAiBpB,KAAKE,MAAL,CAAa,IAAII,MAAJ,CAAYF,eAAeG,eAAf,CAA+Bc,cAA3C,CAAb,CAAvB;AACA,MAAKD,kBAAkBnB,OAAlB,IAA6BA,YAAY,CAAC,CAA/C,EAAmD;AAClDD,WAAOA,KAAKU,SAAL,CAAgB,CAAhB,EAAmBU,cAAnB,CAAP;AACA;AACD,SAAOpB,IAAP;AACA,CAND;;AAQA;;;;;;;;AAQe,SAASF,IAAT,CAAeE,IAAf,EAAqBI,cAArB,EAAsC;AACpD,MAAIH,UAAU,CAAC,CAAf;AACA,OAAM,MAAMqB,IAAZ,IAAoB,CAAEnB,mBAAF,EAAuBa,mBAAvB,EAA4CG,mBAA5C,CAApB,EAAwF;AACvFlB,cAAUF,YAAaC,IAAb,CAAV;AACAA,WAAOsB,KAAMtB,IAAN,EAAYC,OAAZ,EAAqBG,cAArB,CAAP;AACA;;AAED,SAAOJ,IAAP;AACA","file":"stem.js","sourcesContent":["/*\n * Copyright (c) 2001, Dr Martin Porter\n * Copyright (c) 2002, Richard Boulton.\n * All rights reserved.\n *\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that\n * the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and\n * the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and\n * the following disclaimer in the documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse\n * or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Determines the start index of the R1 region.\n * R1 is the region after the first non-vowel following a vowel. It should include at least 3 letters.\n *\n * @param {string} word The word for which to determine the R1 region.\n *\n * @returns {number} The start index of the R1 region.\n */\nconst determineR1 = function( word ) {\n\t// Start with matching first vowel and non-vowel.\n\tlet r1Index = word.search( /[aeiouyøåæ][^aeiouyøåæ]/ );\n\t// Then add 2 since the R1 index is the index after the first vowel & non-vowel matched with the regex.\n\tif ( r1Index !== -1 ) {\n\t\tr1Index += 2;\n\t}\n\n\t// Adjust R1 so that the region preceding it includes at least 3 letters.\n\tif ( r1Index !== -1 && r1Index < 3 ) {\n\t\tr1Index = 3;\n\t}\n\n\treturn r1Index;\n};\n\n/**\n *  Searches and stems these suffixes if in R1: hetene, hetens, hetens, heten, heter, endes, ande, ende, edes, enes, ede,\n *  ane, ene, ens, ers, ets, het, ast, en, ar, er, as, es, et, a, e. After stemming the suffix, it checks if the word\n *  ends in -ert, if it is stem -t.\n *  Searches and stems suffix -s if in R1 and if preceded by a valid precedence: b, c, d, f, g, h, j, l, m, n, o, p, r, t, v, y, z,\n *  or k not preceded by a vowel.\n *\n * @param {string} word             The word to check.\n * @param {number} r1Index          The start index of the R1.\n * @param {Object} morphologyData   The morphology data file.\n *\n * @returns {string}    The stemmed word.\n */\nconst removeSuffixesStep1 = function( word, r1Index, morphologyData ) {\n\tconst suffixes1aIndex = word.search( new RegExp( morphologyData.externalStemmer.regexSuffixes1a ) );\n\tif ( suffixes1aIndex >= r1Index && r1Index !== -1 ) {\n\t\tlet wordAfterStemming = word.substring( 0, suffixes1aIndex );\n\t\tif ( /ert$/i.test( wordAfterStemming ) ) {\n\t\t\twordAfterStemming = wordAfterStemming.slice( 0, -1 );\n\t\t}\n\t\treturn wordAfterStemming;\n\t}\n\n\tconst suffixSIndex = word.search( /s$/ );\n\tconst suffixes1bIndex = word.search( new RegExp( morphologyData.externalStemmer.regexSuffixes1b ) );\n\tif ( suffixSIndex >= r1Index && suffixes1bIndex !== -1 && r1Index !== -1 ) {\n\t\treturn word.slice( 0, -1 );\n\t}\n\n\n\treturn word;\n};\n\n/**\n * Searches for suffixes -ert/-dt/-vt and stems -t if the suffix is in R1.\n *\n * @param {string} word             The word to check.\n * @param {number} r1Index          The start index of the R1.\n * @param {Object} morphologyData   The morphology data file.\n *\n * @returns {string}    The stemmed word.\n */\nconst removeSuffixesStep2 = function( word, r1Index, morphologyData ) {\n\tconst suffixes2Index = word.search( new RegExp( morphologyData.externalStemmer.regexSuffixes2 ) );\n\tif ( suffixes2Index >= r1Index && r1Index !== -1 ) {\n\t\tword = word.slice( 0, -1 );\n\t}\n\treturn word;\n};\n\n/**\n * Searches and stems these suffixes if in R1: hetslov, eleg, elig, elov, slov, leg, eig, lig, els, lov, ig.\n *\n * @param {string} word             The word to check.\n * @param {number} r1Index          The start index of the R1.\n * @param {Object} morphologyData   The morphology data file.\n *\n * @returns {string}    The stemmed word.\n */\nconst removeSuffixesStep3 = function( word, r1Index, morphologyData ) {\n\tconst suffixes3Index = word.search( new RegExp( morphologyData.externalStemmer.regexSuffixes3 ) );\n\tif ( suffixes3Index >= r1Index && r1Index !== -1 ) {\n\t\tword = word.substring( 0, suffixes3Index );\n\t}\n\treturn word;\n};\n\n/**\n * Stems Norwegian words.\n *\n * @param {string} word             The word to check.\n * @param {Object} morphologyData   The morphology data file.\n *\n * @returns {string}    The stemmed word.\n */\nexport default function stem( word, morphologyData ) {\n\tlet r1Index = -1;\n\tfor ( const step of [ removeSuffixesStep1, removeSuffixesStep2, removeSuffixesStep3 ] ) {\n\t\tr1Index = determineR1( word );\n\t\tword = step( word, r1Index, morphologyData );\n\t}\n\n\treturn word;\n}\n"]}