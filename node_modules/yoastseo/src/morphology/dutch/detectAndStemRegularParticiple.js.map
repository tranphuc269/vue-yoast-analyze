{"version":3,"sources":["../../../../src/morphology/dutch/detectAndStemRegularParticiple.js"],"names":["detectAndStemRegularParticiple","checkAndStemIfExceptionWithoutGePrefix","dataExceptionListToCheck","word","includes","slice","shouldSuffixBeStemmed","wordWithoutPrefix","morphologyDataNL","endsWith","exceptionsTShouldBeStemmed","ambiguousTAndDEndings","wordsTShouldBeStemmed","tOrDArePartOfStem","tEnding","exceptionsTShouldNotBeStemmed","stemExceptions","wordsNotToBeStemmedExceptions","verbs","exceptionsDShouldNotBeStemmed","pastParticipleStemmer","doNotStemD","detectAndStemParticiplesWithoutPrefixes","geStemTParticipleRegex","RegExp","participleStemmingClasses","regex","test","exception","doNotStemGe","startsWith","detectAndStemParticiplePerPrefixClass","separable","prefixes","regexPart","currentPrefix","participleRegex","length","detectAndStemParticiplesWithPrefixes","participleClass","compoundVerbsPrefixes","inseparable","stem","checkIfParticipleIsSameAsStem","dataParticiplesSameAsStem","checkAndStemIfInseparablePrefixWithEndEnding","inseparablePrefixes","finalChangesRules","startsWithInseparablePrefix","map","prefix","some","value","inseparableCompoundVerbsNotToBeStemmed","inseparableCompoundVerbs","pastParticiplesEndingOnEnd","regularStemmer","stemModifications","finalChanges"],"mappings":"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","file":"detectAndStemRegularParticiple.js","sourcesContent":["import nonParticiples from \"../../researches/dutch/passiveVoice/nonParticiples.js\";\nimport { doesWordMatchRegex } from \"../morphoHelpers/regexHelpers\";\nimport { modifyStem } from \"./stemModificationHelpers\";\n\n/**\n * Checks whether the word is on an exception list of participles that do not have a ge- prefix. If it is found on the list,\n * remove only the last letter (the suffix).\n *\n * @param {array} dataExceptionListToCheck The list of the exception words.\n * @param {string} word \tThe (unstemmed) word to check.\n *\n * @returns {null|string} The stemmed word or null if the word was not found on the exception list.\n */\nconst checkAndStemIfExceptionWithoutGePrefix = function( dataExceptionListToCheck, word ) {\n\tif ( dataExceptionListToCheck.includes( word ) ) {\n\t\treturn word.slice( 0, -1 );\n\t}\n\treturn null;\n};\n\n/**\n * Checks whether a word that was detected as a participle should not have the suffix (-t or -d) removed because it is part\n * of the stem. For example, in the participle 'geantwoord', the -d belongs to the stem so it should not be removed.\n * The checks are conducted on the word without the prefix, so 'antwoord' in the case of 'geantwoord'.\n *\n * For words ending in -t, there are three checks:\n * 1) An exception list (exceptions to a rule) containing words where -t SHOULD be stemmed,\n * 2) The rule, defined using a regex with word endings where -t is part of the stem,\n * 3) A list of verbs with stem ending in -t, to cover cases that were not possible to find using a regex.\n *\n * For words ending in -d, we check a list of verbs with stem ending in -d.\n *\n * @param {string}\twordWithoutPrefix\tThe word without prefix(es).\n * @param {Object}\tmorphologyDataNL\tThe Dutch morphology data.\n * @returns {boolean}\t\t\t\t\tWhether the suffix should be stemmed.\n */\nconst shouldSuffixBeStemmed = function( wordWithoutPrefix, morphologyDataNL ) {\n\tif ( wordWithoutPrefix.endsWith( \"t\" ) ) {\n\t\t// Return true (suffix should be stemmed) if word was found on the exception list of verbs which should have the final -t stemmed.\n\t\tconst exceptionsTShouldBeStemmed = morphologyDataNL.ambiguousTAndDEndings.wordsTShouldBeStemmed;\n\t\tif ( exceptionsTShouldBeStemmed.includes( wordWithoutPrefix ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t// Return false (suffix should not be stemmed) if word matches the regex for stems ending in -t.\n\t\tif ( doesWordMatchRegex( wordWithoutPrefix, morphologyDataNL.ambiguousTAndDEndings.tOrDArePartOfStem.tEnding ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t/*\n\t\t * Return false (suffix should not be stemmed) if the word was found on the list of verbs with stem ending in -t (e.g. haast)\n\t\t * Otherwise, return true (if no checks are matched, the default condition is for -t to be stemmed).\n\t\t */\n\t\tconst exceptionsTShouldNotBeStemmed = morphologyDataNL.stemExceptions.wordsNotToBeStemmedExceptions.verbs;\n\t\treturn ! exceptionsTShouldNotBeStemmed.includes( wordWithoutPrefix );\n\t}\n\tif ( wordWithoutPrefix.endsWith( \"d\" ) ) {\n\t\tconst exceptionsDShouldNotBeStemmed = morphologyDataNL.pastParticipleStemmer.doNotStemD;\n\t\treturn ! exceptionsDShouldNotBeStemmed.includes( wordWithoutPrefix );\n\t}\n};\n\n/**\n * Detects whether a word is a participle of a regular verb without prefixes other than ge-. If it is, checks whether\n * the word is an exception that should not have the prefix or the suffix stemmed. Then stems the word accordingly\n * (remove prefix, suffix, or both).\n *\n * @param {Object}  morphologyDataNL\tThe Dutch morphology data.\n * @param {string}  word                The word (not stemmed) to check.\n *\n * @returns {string|null} The stem or null if no participle was matched.\n */\nconst detectAndStemParticiplesWithoutPrefixes = function( morphologyDataNL, word ) {\n\tconst geStemTParticipleRegex = new RegExp( \"^\" + morphologyDataNL.pastParticipleStemmer.participleStemmingClasses[ 0 ].regex );\n\n\t// Check if it's a ge + stem + t/d participle.\n\tif ( geStemTParticipleRegex.test( word ) ) {\n\t\t// Check if the ge- is actually part of the stem. If yes, stem only the suffix.\n\t\tconst exception = ( checkAndStemIfExceptionWithoutGePrefix( morphologyDataNL.pastParticipleStemmer.doNotStemGe, word ) );\n\t\tif ( exception ) {\n\t\t\treturn exception;\n\t\t}\n\n\t\t// Remove the prefix.\n\t\tlet wordWithoutPrefix = word.slice( 2 );\n\n\t\t// Check if stem starts with ë. If yes, replace ë with e.\n\t\tif ( wordWithoutPrefix.startsWith( \"ë\" ) ) {\n\t\t\twordWithoutPrefix = \"e\" + wordWithoutPrefix.slice( 1 );\n\t\t}\n\t\t// Check whether the suffix should be stemmed. If yes, remove it and return the stem.\n\t\tif ( shouldSuffixBeStemmed( wordWithoutPrefix, morphologyDataNL ) ) {\n\t\t\treturn ( wordWithoutPrefix.slice( 0, -1 ) );\n\t\t}\n\n\t\treturn wordWithoutPrefix;\n\t}\n\n\treturn null;\n};\n\n/**\n * Determines whether a given participle pattern combined with prefixes from a given class (separable or inseparable)\n * applies to a given word and if so, returns the stem.\n *\n * @param {Object}      morphologyDataNL \tThe Dutch morphology data.\n * @param {string}      word        \t\tThe word (not stemmed) to check.\n * @param {boolean}     separable  \t\t\tWhether the prefix is separable or not.\n * @param {string[]}    prefixes    \t\tThe prefixes of a certain prefix class.\n * @param {string}      regexPart   \t\tThe regex part for a given class (completed to a full regex within the function).\n *\n * @returns {string|null} The stem or null if no prefixed participle was matched.\n */\nconst detectAndStemParticiplePerPrefixClass = function( morphologyDataNL, word, separable, prefixes, regexPart ) {\n\tfor ( const currentPrefix of prefixes ) {\n\t\tconst participleRegex = new RegExp( \"^\" + currentPrefix + regexPart );\n\n\t\tif ( participleRegex.test( word ) ) {\n\t\t\tlet wordWithoutPrefix = word.slice( currentPrefix.length - word.length );\n\t\t\t/*\n\t\t\t * After removing a separable prefix, check whether the ge- belongs to the stem (e.g. the -ge- in opgebruikt).\n\t\t\t * If it does, stem only the suffix.\n\t\t\t */\n\t\t\tif ( separable ) {\n\t\t\t\tconst exception = ( checkAndStemIfExceptionWithoutGePrefix( morphologyDataNL.pastParticipleStemmer.doNotStemGe, wordWithoutPrefix ) );\n\t\t\t\tif ( exception ) {\n\t\t\t\t\treturn  ( currentPrefix + exception );\n\t\t\t\t}\n\t\t\t\twordWithoutPrefix = wordWithoutPrefix.slice( 2 );\n\t\t\t}\n\t\t\t// Check whether stem starts with ë. If yes, replace ë with e.\n\t\t\tif ( wordWithoutPrefix.startsWith( \"ë\" ) ) {\n\t\t\t\twordWithoutPrefix = \"e\" + wordWithoutPrefix.slice( 1 );\n\t\t\t}\n\n\t\t\tif ( shouldSuffixBeStemmed( wordWithoutPrefix, morphologyDataNL ) ) {\n\t\t\t\treturn ( currentPrefix + ( wordWithoutPrefix.slice( 0, -1 ) ) );\n\t\t\t}\n\t\t\treturn ( currentPrefix + wordWithoutPrefix );\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Detects whether a word is a regular participle of a compound verb. A compound verb has a prefix in addition to, or instead of, ge-.\n * For example, afgemaakt has the separable prefix af-, and beantwoord has the inseparable prefix be-. If a participle\n * of a compound verb is detected, it is stemmed by removing the ge- (in case of a verb with a separable prefix) and the suffix -t or -d.\n *\n * @param {Object}  morphologyDataNL \tThe Dutch morphology data.\n * @param {string}  word                The word (not stemmed) to check.\n *\n * @returns {string|null} The stem or null if no participle with prefix was matched.\n */\nconst detectAndStemParticiplesWithPrefixes = function( morphologyDataNL, word ) {\n\t/*\n\t * It's important to preserve order here, since the ge + stem ending in -t regex is more specific than\n\t * the stem + t regex, and therefore must be checked first.\n\t */\n\tfor ( const participleClass of morphologyDataNL.pastParticipleStemmer.participleStemmingClasses ) {\n\t\tconst regex = participleClass.regex;\n\t\tconst separable = participleClass.separable;\n\n\t\tconst prefixes = separable\n\t\t\t? morphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes.separable\n\t\t\t: morphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes.inseparable;\n\n\t\tconst stem = detectAndStemParticiplePerPrefixClass( morphologyDataNL, word, separable, prefixes, regex );\n\n\t\tif ( stem ) {\n\t\t\treturn stem;\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n *  Checks whether the word is on the list of participles that do not need to be stemmed, because the participle form\n *  is the same as the stem.\n *\n * @param {string[]} dataParticiplesSameAsStem\tThe list of exceptions whose stem is the same as the participle.\n * @param {string} \t word\t\t\t\t\t\tThe word to check.\n * @returns {boolean} Whether the word is found on the exception list.\n */\nconst checkIfParticipleIsSameAsStem = function( dataParticiplesSameAsStem, word ) {\n\treturn dataParticiplesSameAsStem.includes( word );\n};\n\n/**\n * Check whether the word is on an exception list of past participles with inseparable prefixes and ending in -end.\n * If not, stem the word that starts with an inseparable verb prefix and ends in -end as a present participle.\n *\n * @param {array}  inseparablePrefixes      The list of inseparable prefixes.\n * @param {array}  dataExceptionListToCheck The list of the exception words.\n * @param {array}  finalChangesRules        The array of regex-based rules to be applied to the stem.\n * @param {string} word \t                The (unstemmed) word to check.\n *\n * @returns {null|string} The stemmed word or null if the word was found on the exception list.\n */\nconst checkAndStemIfInseparablePrefixWithEndEnding = function( inseparablePrefixes, dataExceptionListToCheck, finalChangesRules, word ) {\n\tconst startsWithInseparablePrefix = inseparablePrefixes.map( prefix => word.startsWith( prefix ) ).some( value => value === true );\n\n\tif ( startsWithInseparablePrefix && word.endsWith( \"end\" ) && ! dataExceptionListToCheck.includes( word ) ) {\n\t\treturn modifyStem( word.slice( 0, -3 ), finalChangesRules );\n\t}\n\treturn null;\n};\n\n/**\n * Detects whether a word is a regular participle and if so, returns the stem.\n *\n * @param {Object}  morphologyDataNL \tThe Dutch morphology data.\n * @param {string}  word                The word (not stemmed) to check.\n *\n * @returns {string|null} The participle stem or null if no regular participle was matched.\n */\nexport function detectAndStemRegularParticiple( morphologyDataNL, word ) {\n\t// Check whether the word is not a participle. If it is not, return empty string.\n\tif ( word.endsWith( \"heid\" ) || word.endsWith( \"teit\" ) || word.endsWith( \"tijd\" ) || nonParticiples().includes( word ) ) {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Check whether the word is on an exception list of verbs whose participle is the same as the stem. If the word is found\n\t * on the list, return the stem.\n\t */\n\tif ( checkIfParticipleIsSameAsStem( morphologyDataNL.pastParticipleStemmer.inseparableCompoundVerbsNotToBeStemmed, word ) ) {\n\t\treturn word;\n\t}\n\n\t// Check and stem if the word is a participle without any separable or inseparable prefix\n\tlet stem = detectAndStemParticiplesWithoutPrefixes( morphologyDataNL, word );\n\n\tif ( stem ) {\n\t\treturn stem;\n\t}\n\n\t/**\n\t * Check whether the word is on an exception list of inseparable compound verbs with a prefix that is usually separable.\n\t * If it is, remove just the suffix and return the stem.\n\t */\n\tstem = checkAndStemIfExceptionWithoutGePrefix( morphologyDataNL.pastParticipleStemmer.inseparableCompoundVerbs, word );\n\n\tif ( stem ) {\n\t\treturn stem;\n\t}\n\n\t/**\n\t * Check whether the word is on an exception list of past participles with inseparable prefixes and ending in -end.\n\t * If not, stem the word that starts with an inseparable verb prefix and ends in -end as a present participle.\n\t */\n\tstem = checkAndStemIfInseparablePrefixWithEndEnding(\n\t\tmorphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes.inseparable,\n\t\tmorphologyDataNL.pastParticipleStemmer.pastParticiplesEndingOnEnd,\n\t\tmorphologyDataNL.regularStemmer.stemModifications.finalChanges,\n\t\tword\n\t);\n\n\tif ( stem ) {\n\t\treturn stem;\n\t}\n\n\t// Check and stem if the word is a participle with a separable or inseparable prefix\n\tstem = detectAndStemParticiplesWithPrefixes( morphologyDataNL, word );\n\n\tif ( stem ) {\n\t\treturn stem;\n\t}\n\n\treturn null;\n}\n"]}