{"version":3,"sources":["../../../../src/morphology/dutch/getStemWordsWithTAndDEnding.js"],"names":["generateCorrectStemWithTAndDEnding","stemWordsWithEOrEnSuffix","morphologyDataNL","regexAndReplacement","word","stemmedWord","replace","RegExp","regularStemmer","stemModifications","exceptionsStemModifications","pastParticipleStemmer","compoundVerbsPrefixes","replacement","doubleVowel","checkWhetherTOrDIsPartOfStem","tAndDPartOfStemData","ambiguousTAndDEndings","tOrDArePartOfStem","firstTOrDPartOfStem","verbsDenShouldBeStemmed","includes","slice","wordsStemOnlyEnEnding","endingMatch","verbs","denEnding","dIsPartOfStemRegex","deEnding","tIsPartOfStemRegex","teAndTenEndings","wordsTShouldBeStemmed","tEnding"],"mappings":"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","file":"getStemWordsWithTAndDEnding.js","sourcesContent":["import { checkIfWordEndingIsOnExceptionList, checkIfWordIsOnVerbExceptionList } from \"../morphoHelpers/exceptionListHelpers\";\nimport { doesWordMatchRegex, searchAndReplaceWithRegex } from \"../morphoHelpers/regexHelpers\";\nimport { isVowelDoublingAllowed } from \"./stemModificationHelpers\";\n\n/**\n * Checks whether the word ends in suffixes -e or -en which are preceded by -t or -d, and the -t/-d is part of the stem.\n * If it does, stem the -e/-en. Also checks if after suffix deletion the stemmed word needs modification, and applies it if\n * needed. e.g. doden -> dod -> dood\n *\n * @param {Object} \t\tmorphologyDataNL\t\t\t \tThe Dutch morphology data file.\n * @param {string[]} \tregexAndReplacement\t\t\t\tThe regex to check and the string replacement that should be made.\n * @param {string} \t\tword\t\t\t\t\t\t\tThe word to be checked.\n *\n * @returns {?string}\t\t\t\t\t\t\tThe stem created or null.\n */\nconst stemWordsWithEOrEnSuffix = function( morphologyDataNL, regexAndReplacement, word ) {\n\tif ( doesWordMatchRegex( word, regexAndReplacement[ 0 ] ) ) {\n\t\tconst stemmedWord = word.replace( new RegExp( regexAndReplacement[ 0 ] ), regexAndReplacement[ 1 ] );\n\t\tif ( isVowelDoublingAllowed( stemmedWord,\n\t\t\tmorphologyDataNL.regularStemmer.stemModifications.exceptionsStemModifications,\n\t\t\tmorphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ) {\n\t\t\tconst replacement = searchAndReplaceWithRegex( stemmedWord, morphologyDataNL.regularStemmer.stemModifications.doubleVowel );\n\t\t\treturn replacement ? replacement : stemmedWord;\n\t\t}\n\t\treturn stemmedWord;\n\t}\n\n\treturn null;\n};\n\n/**\n * Stems words for which we know that -t/-d is the ending of the stem (so the -t/-d is not stemmed). This is done through\n * checking lists of words and matching the word with regexes.\n *\n * @param {string}\tword\t\t\t\t\t\t\t\tThe word to check.\n * @param {Object} \tmorphologyDataNL \t\t\t\t\tThe Dutch morphology data.\n *\n * @returns {?string} \t\t\t\t\t\t\tThe stemmed word, if matched in one of the checks, or null if not matched.\n */\nconst checkWhetherTOrDIsPartOfStem = function( word, morphologyDataNL ) {\n\tconst tAndDPartOfStemData = morphologyDataNL.ambiguousTAndDEndings.tOrDArePartOfStem;\n\t/*\n\t * Step 1:\n\t * - If the stem ends in -tte, -tten, -dde or -dden leave the first -t/-d and stem the remaining ending.\n\t * - Example: \"katten\" (-ten should be stemmed, leaving \"kat\").\n\t */\n\tlet stemmedWord = searchAndReplaceWithRegex( word, tAndDPartOfStemData.firstTOrDPartOfStem );\n\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t/*\n\t * Step 2:\n\t * 2a)\n\t * - Checks whether the word is in the exception list of verbal forms ending in long vowel + -fden/sden. If so, stems -den off.\n\t * - Example: \"hoefden\" (-den should be stemmed, leaving \"hoef\").\n\t * 2b)\n\t * - Check whether the word has the suffix -en preceded by -d, where the -d is part of the stem. If it is, stem only -en.\n\t * - Example: \"eenden\" (-en should be stemmed, leaving \"eend\").\n\t */\n\tif ( tAndDPartOfStemData.verbsDenShouldBeStemmed.includes( word ) ) {\n\t\treturn word.slice( 0, -3 );\n\t}\n\n\tif ( checkIfWordEndingIsOnExceptionList( word, tAndDPartOfStemData.wordsStemOnlyEnEnding.endingMatch ) ||\n\t\tcheckIfWordIsOnVerbExceptionList( word,\n\t\t\ttAndDPartOfStemData.wordsStemOnlyEnEnding.verbs, morphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ||\n\t\tdoesWordMatchRegex( word, tAndDPartOfStemData.denEnding ) ) {\n\t\tstemmedWord = word.slice( 0, -2 );\n\t\t//\tCheck if the vowel needs to be doubled after deleting suffix -en.\n\t\tif ( isVowelDoublingAllowed( stemmedWord,\n\t\t\tmorphologyDataNL.regularStemmer.stemModifications.exceptionsStemModifications,\n\t\t\tmorphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ) {\n\t\t\tconst replacement = searchAndReplaceWithRegex( stemmedWord, morphologyDataNL.regularStemmer.stemModifications.doubleVowel );\n\t\t\treturn replacement ? replacement : stemmedWord;\n\t\t}\n\t\treturn stemmedWord;\n\t}\n\n\t/*\n\t * Step 3:\n\t * - Checks whether the word matches the regex for words ending in -de with -d being part of the stem. If it is matched,\n\t * only stem the -e.\n\t * - Example: \"beenharde\" (-e should be stemmed, leaving \"beenhard\")\n\t */\n\tconst dIsPartOfStemRegex = tAndDPartOfStemData.deEnding;\n\tstemmedWord = stemWordsWithEOrEnSuffix( morphologyDataNL, dIsPartOfStemRegex, word );\n\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t/*\n\t * Step 4:\n\t * - Checks whether the word matches the regex for words ending in -te or -ten with -t being part of the stem. If it is\n\t * matched, only stem the -e/-en.\n\t * - Example: \"castraten\" (-en should be stemmed, leaving \"castraat\")\n\t */\n\tconst tIsPartOfStemRegex = tAndDPartOfStemData.teAndTenEndings;\n\tstemmedWord = stemWordsWithEOrEnSuffix( morphologyDataNL, tIsPartOfStemRegex, word );\n\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\treturn null;\n};\n\n/**\n * Creates the correct stem for words which end in ambiguous endings -t, -te, -ten, -de, or -den.\n *\n * @param {Object} \t\tmorphologyDataNL \t\t\t\t\tThe Dutch morphology data.\n * @param {string} \t\tword\t\t\t\t\t\t\t\tThe word to be checked.\n *\n * @returns {?string} \tThe stemmed word or null.\n */\nexport function generateCorrectStemWithTAndDEnding( morphologyDataNL, word ) {\n\t/*\n\t * Step 1:\n\t * - Check whether the word is in the exception list of words in which -t ending needs to be stemmed. If it is, stem -t.\n\t * - Example: \"squasht\".\n\t * - This is an exception to one of the rule in step 2.\n\t */\n\tif ( checkIfWordEndingIsOnExceptionList( word, morphologyDataNL.ambiguousTAndDEndings.wordsTShouldBeStemmed ) ) {\n\t\treturn word.slice( 0, -1 );\n\t}\n\n\t/*\n\t * Step 2:\n\t * - Check if word is matched by a regex for a t that shouldn't be stemmed.\n\t * - Example: \"boot\".\n\t */\n\tif ( doesWordMatchRegex( word, morphologyDataNL.ambiguousTAndDEndings.tOrDArePartOfStem.tEnding ) ) {\n\t\treturn word;\n\t}\n\n\t/*\n\t * Step 3:\n\t * - Check whether the word has another suffix that should be stemmed (e.g. -en) preceded by -t or -d which is part of the stem.\n\t *  If yes, stem the suffix that should be stemmed and return the stem which ends in -t/-d.\n\t * - Example: \"tijden\" (only -en should be removed, not -den).\n\t */\n\n\tconst stemmedWord = checkWhetherTOrDIsPartOfStem( word, morphologyDataNL );\n\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\treturn null;\n}\n"]}