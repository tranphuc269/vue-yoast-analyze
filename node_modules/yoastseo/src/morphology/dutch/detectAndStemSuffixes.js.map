{"version":3,"sources":["../../../../src/morphology/dutch/detectAndStemSuffixes.js"],"names":["detectAndStemSuffixes","determineR1","word","r1Index","search","findSuffix","suffixStep","suffixClass","hasOwnProperty","suffixes","matchedRegex","find","suffixRegex","RegExp","exec","matched","suffix","length","suffixIndex","lastIndexOf","stemModification","deleteSuffixAndModifyStem","morphologyDataNL","regularStemmer","stemModifications","hedenToHeid","substring","iedToId","endsWith","inkToIng","exceptionsStemModifications","pastParticipleStemmer","compoundVerbsPrefixes","doubleVowel","findAndDeleteSuffix","foundSuffix","findAndDeleteSuffixes","suffixSteps","IAndYToUppercase","finalChanges"],"mappings":"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","file":"detectAndStemSuffixes.js","sourcesContent":["/**\n * @file Dutch stemming algorithm. Adapted from:\n * @author:\n * @copyright\n * All rights reserved.\n * Implementation of the stemming algorithm from http://snowball.tartarus.org/algorithms/dutch/stemmer.html\n * Copyright of the algorithm is: Copyright (c) 2001, Dr Martin Porter and can be found at http://snowball.tartarus.org/license.php\n *\n * Redistribution and use in source and binary forms, with or without modification, is covered by the standard BSD license.\n */\n\nimport { isVowelDoublingAllowed, modifyStem } from \"./stemModificationHelpers\";\n\n/**\n * Determines the start index of the R1 region.\n * R1 is the region after the first non-vowel following a vowel. It should include at least 3 letters.\n *\n * @param {string} word The word for which to determine the R1 region.\n * @returns {number} The start index of the R1 region.\n */\nconst determineR1 = function( word ) {\n\t// Start with matching the first cluster that consists of a vowel and a non-vowel.\n\tlet r1Index = word.search( /[aeiouyèäüëïöáéíóú][^aeiouyèäüëïöáéíóú]/ );\n\t// Then add 2 since the R1 index is the index after the first vowel & non-vowel matched with the regex.\n\tif ( r1Index !== -1 ) {\n\t\tr1Index += 2;\n\t}\n\n\t// Adjust R1 so that the region preceding it includes at least 3 letters.\n\tif ( r1Index !== -1 && r1Index < 3 ) {\n\t\tr1Index = 3;\n\t}\n\n\treturn r1Index;\n};\n\n/**\n * Searches for suffixes in a word.\n *\n * @param {string} word \tThe word in which to look for suffixes.\n * @param {Object} suffixStep\t One of the three steps of findings suffixes.\n * @param {number} r1Index\t The index of the R1 region.\n * @returns {Object} The index of the suffix and extra information about whether, and how, the stem will need to be modified.\n */\nconst findSuffix = function( word, suffixStep, r1Index ) {\n\tfor ( const suffixClass in suffixStep ) {\n\t\tif ( suffixStep.hasOwnProperty( suffixClass ) ) {\n\t\t\tconst suffixes = suffixStep[ suffixClass ].suffixes;\n\n\t\t\tconst matchedRegex = suffixes.find( suffixRegex => new RegExp( suffixRegex ).exec( word ) );\n\n\t\t\tif ( matchedRegex ) {\n\t\t\t\tconst matched = new RegExp( matchedRegex ).exec( word );\n\t\t\t\tconst suffix = matched[ matched.length - 1 ];\n\t\t\t\tconst suffixIndex = word.lastIndexOf( suffix );\n\n\t\t\t\tif ( r1Index !== -1 && suffixIndex >= r1Index ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsuffixIndex: suffixIndex,\n\t\t\t\t\t\tstemModification: suffixStep[ suffixClass ].stemModification,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Deletes the suffix and modifies the stem according to the required modifications.\n *\n * @param {string} word\t The word from which to delete the suffix.\n * @param {Object} suffixStep \tOne of the three steps of deleting a suffix.\n * @param {number} suffixIndex\t The index of the found suffix.\n * @param {string} stemModification \tThe type of stem modification that needs to be done.\n * @param {Object} morphologyDataNL\t The Dutch morphology data file.\n * @returns {string} The stemmed and modified word.\n */\nconst deleteSuffixAndModifyStem = function( word, suffixStep, suffixIndex, stemModification, morphologyDataNL ) {\n\tif ( stemModification === \"hedenToHeid\" ) {\n\t\treturn modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.hedenToHeid );\n\t}\n\tword = word.substring( 0, suffixIndex );\n\tif ( stemModification === \"changeIedtoId\" ) {\n\t\treturn modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.iedToId );\n\t} else if ( stemModification === \"changeInktoIng\" && word.endsWith( \"ink\" ) ) {\n\t\treturn modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.inkToIng );\n\t} else if (\n\t\tstemModification === \"vowelDoubling\" &&\n\t\tisVowelDoublingAllowed(\n\t\t\tword,\n\t\t\tmorphologyDataNL.regularStemmer.stemModifications.exceptionsStemModifications,\n\t\t\tmorphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes\n\t\t)\n\t) {\n\t\treturn modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.doubleVowel );\n\t}\n\treturn word;\n};\n\n/**\n * Finds and deletes the suffix found in a particular step, and modifies the stem.\n *\n * @param {string} word \tThe word for which to find and delete a suffix.\n * @param {Object} suffixStep\t One of the three suffix steps.\n * @param {number} r1Index\t The index of the R1 region.\n * @param {Object} morphologyDataNL\t The Dutch morphology data file.\n * @returns {string} The word with the deleted suffix.\n */\nconst findAndDeleteSuffix = function( word, suffixStep, r1Index, morphologyDataNL ) {\n\tconst foundSuffix = findSuffix( word, suffixStep, r1Index );\n\tif ( typeof foundSuffix !== \"undefined\" ) {\n\t\tword = deleteSuffixAndModifyStem( word, suffixStep, foundSuffix.suffixIndex, foundSuffix.stemModification, morphologyDataNL );\n\t}\n\n\treturn word;\n};\n\n/**\n * Runs through three stemming steps that process different kinds of suffixes, determines if there is a valid suffix\n * within the R1 region that can be deleted for stemming and deletes it, as well as applies suffix-specific stem\n * modifications if needed.\n *\n * @param {string} word \tThe word for which to find and delete suffixes.\n * @param {Object} suffixSteps\t All of the suffix steps.\n * @param {number} r1Index\t The index of the R1 region\n * @param {Object} morphologyDataNL \tThe Dutch morphology data file.\n * @returns {string} The word with the delete suffix.\n */\nconst findAndDeleteSuffixes = function( word, suffixSteps, r1Index, morphologyDataNL ) {\n\tfor ( const suffixStep in suffixSteps ) {\n\t\tif ( suffixSteps.hasOwnProperty( suffixStep ) ) {\n\t\t\tword = findAndDeleteSuffix( word, suffixSteps[ suffixStep ], r1Index, morphologyDataNL );\n\t\t}\n\t}\n\n\treturn word;\n};\n\n/**\n * Search for suffixes in a word, remove them if found, and modify the stem if needed.\n *\n * @param {string} word  The word to stem.\n * @param {Object} morphologyDataNL The Dutch morphology data file.\n *\n * @returns {string} The stemmed word.\n */\nexport default function detectAndStemSuffixes( word, morphologyDataNL ) {\n\t/*\n\t * Put i and y in between vowels, initial y, and y after a vowel into upper case. This is because they should\n\t * be treated as consonants so we want to differentiate them from other i's and y's when matching regexes.\n\t */\n\tword = modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.IAndYToUppercase );\n\n\t// Find the start index of the R1 region.\n\tconst r1Index = determineR1( word );\n\n\t// Import the suffixes from all three steps.\n\tconst suffixSteps = morphologyDataNL.regularStemmer.suffixes;\n\n\t// Run through the three steps of possible de-suffixation.\n\tword = findAndDeleteSuffixes( word, suffixSteps, r1Index, morphologyDataNL );\n\n\t// Do final modifications to the stem.\n\treturn modifyStem( word, morphologyDataNL.regularStemmer.stemModifications.finalChanges );\n}\n"]}