{"version":3,"sources":["../../../../src/morphology/dutch/stem.js"],"names":["stem","removeSuffixFromFullForms","morphologyDataNL","word","exceptionClass","stemExceptions","removeSuffixesFromFullForms","stemmedWord","forms","suffixes","suffix","checkOtherStemmingExceptions","stemFromFullForm","regularStemmer","stemModifications","exceptionsStemModifications","pastParticipleStemmer","compoundVerbsPrefixes","doubleVowel","finalChanges","wordsNotToBeStemmed","wordsNotToBeStemmedExceptions","verbs","endingMatch","exactMatch","includes","tAndDEndings","ambiguousTAndDEndings","otherTAndDEndings","ending","endsWith"],"mappings":"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","file":"stem.js","sourcesContent":["import { checkIfWordEndingIsOnExceptionList, checkIfWordIsOnVerbExceptionList } from \"../morphoHelpers/exceptionListHelpers\";\nimport { removeSuffixFromFullForm, removeSuffixesFromFullForm } from \"../morphoHelpers/stemHelpers\";\nimport detectAndStemSuffixes from \"./detectAndStemSuffixes\";\nimport { generateCorrectStemWithTAndDEnding } from \"./getStemWordsWithTAndDEnding.js\";\nimport checkExceptionsWithFullForms from \"../morphoHelpers/checkExceptionsWithFullForms\";\nimport { detectAndStemRegularParticiple } from \"./detectAndStemRegularParticiple\";\nimport { modifyStem, isVowelDoublingAllowed } from \"./stemModificationHelpers\";\n\n/**\n * Get the stem from noun diminutives and plurals exceptions.\n *\n * @param {Object}    morphologyDataNL The data for stemming exception.\n * @param {string}      word                                The word to check.\n *\n * @returns {string} The stemmed word.\n */\nconst removeSuffixFromFullForms = function( morphologyDataNL,  word ) {\n\t/*\n\t * Checks whether the word is in the exception list of words ending in -er and gets either -e or -s suffix\n\t * If it is, remove the corresponding suffix.\n\t * e.g. lekkere -> lekker, bitters -> bitter\n\t*/\n\tfor ( const exceptionClass of morphologyDataNL.stemExceptions.removeSuffixesFromFullForms ) {\n\t\tconst stemmedWord = removeSuffixesFromFullForm( exceptionClass.forms, exceptionClass.suffixes, word );\n\t\tif ( stemmedWord ) {\n\t\t\treturn stemmedWord;\n\t\t}\n\t}\n\t/*\n\t * Checks whether the word is in one of the exception lists of nouns\n\t * for which a specific suffix needs to be stemmed (e.g. -s, -es, -eren, -er etc.)\n\t * e.g. kuddes -> kud, modes -> mod, revenuen -> revenu\n\t */\n\tfor ( const exceptionClass of morphologyDataNL.stemExceptions.removeSuffixFromFullForms ) {\n\t\tconst stemmedWord = removeSuffixFromFullForm( exceptionClass.forms, exceptionClass.suffix, word );\n\t\tif ( stemmedWord ) {\n\t\t\treturn stemmedWord;\n\t\t}\n\t}\n};\n\n/**\n * Checks if the word is on a stemming exception list.\n *\n * @param {string} word The word to check.\n * @param {Object} morphologyDataNL The Dutch morphology data file.\n * @returns {string|null} The stem or null if the word was not matched by any of the exception checks.\n */\nconst checkOtherStemmingExceptions = function( word, morphologyDataNL ) {\n\t/*\n\t * Checks whether the word is in the exception list of nouns or adjectives with specific suffixes that needs to be stemmed.\n\t * If it is return the stem here and run possible stem modification if it is required. e.g. modes -> mod -> mood\n\t */\n\tlet stemFromFullForm = removeSuffixFromFullForms( morphologyDataNL, word );\n\tif ( stemFromFullForm ) {\n\t\tif ( isVowelDoublingAllowed( stemFromFullForm, morphologyDataNL.regularStemmer.stemModifications.exceptionsStemModifications,\n\t\t\tmorphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ) {\n\t\t\tstemFromFullForm = modifyStem( stemFromFullForm, morphologyDataNL.regularStemmer.stemModifications.doubleVowel );\n\t\t\treturn modifyStem( stemFromFullForm, morphologyDataNL.regularStemmer.stemModifications.finalChanges );\n\t\t}\n\t\treturn modifyStem( stemFromFullForm, morphologyDataNL.regularStemmer.stemModifications.finalChanges );\n\t}\n\treturn null;\n};\n\n/**\n * Stems Dutch words.\n *\n * @param {string} word  The word to stem.\n * @param {Object} morphologyDataNL The Dutch morphology data file.\n *\n * @returns {string} The stemmed word.\n */\nexport default function stem( word, morphologyDataNL ) {\n\t// Check whether the word is in the list of words with full forms for which we define the stem. If it is, return the canonical stem.\n\tlet stemmedWord = checkExceptionsWithFullForms( morphologyDataNL, word );\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t// Check whether the word is a participle, and if yes, stem it and return the stem.\n\tstemmedWord = detectAndStemRegularParticiple( morphologyDataNL, word );\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t// Check whether the word is on the list of words that should not be stemmed, and if yes, return the word. Example: gans -> gans\n\tconst wordsNotToBeStemmed = morphologyDataNL.stemExceptions.wordsNotToBeStemmedExceptions;\n\tif ( checkIfWordIsOnVerbExceptionList( word, wordsNotToBeStemmed.verbs, morphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ||\n\t\t checkIfWordEndingIsOnExceptionList( word, wordsNotToBeStemmed.endingMatch ) ||\n\t\t wordsNotToBeStemmed.exactMatch.includes( word ) ) {\n\t\treturn word;\n\t}\n\n\t/*\n\t * Check whether the word ends in -t/-te/-ten/-tend/-de/-den/-dend. If it does, run through a series of checks aimed at\n\t * predicting whether the -t/d is part of the stem or the suffix. If the word was matched in one of the checks, stem it\n\t * accordingly and return the stem. Example: boot -> boot, squasht -> squash\n\t */\n\tconst tAndDEndings = morphologyDataNL.ambiguousTAndDEndings.otherTAndDEndings;\n\tfor ( const ending of tAndDEndings ) {\n\t\tif ( word.endsWith( ending ) ) {\n\t\t\tstemmedWord = generateCorrectStemWithTAndDEnding( morphologyDataNL, word );\n\t\t\tif ( stemmedWord ) {\n\t\t\t\treturn stemmedWord;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check if the word is on any other stemming exception list, and if yes, return the correct stem.\n\tstemmedWord = checkOtherStemmingExceptions( word, morphologyDataNL );\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t// If the word was not stemmed in any of the previous steps, run through the stemming algorithm which detects and stems suffixes.\n\treturn detectAndStemSuffixes( word, morphologyDataNL );\n}\n"]}