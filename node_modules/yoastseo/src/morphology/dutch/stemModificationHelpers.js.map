{"version":3,"sources":["../../../../src/morphology/dutch/stemModificationHelpers.js"],"names":["modifyStem","isVowelDoublingAllowed","checkIfWordIsOnNoVowelDoublingList","word","noVowelDoublingList","compoundVerbPrefixes","endingMatch","verbs","exactMatch","includes","isVowelPrecededByDoubleConsonant","fourthToLastLetter","charAt","length","thirdToLastLetter","doesPrecedingSyllableContainDiphthong","noVowelDoublingRegex","search","RegExp","modificationGroup","neededReplacement","find","replacement","replace","morphologyDataNLStemmingExceptions","morphologyDataNLVerbPrefixes","firstCheck","getVowelDoubling","secondCheck","noVowelDoubling","thirdCheck","fourthCheck","rule"],"mappings":";;;;;QAwDgBA,U,GAAAA,U;QAgBAC,sB,GAAAA,sB;;AAxEhB;;AAEA;;;;;;;;;;AAUA,MAAMC,qCAAqC,SAArCA,kCAAqC,CAAUC,IAAV,EAAgBC,mBAAhB,EAAqCC,oBAArC,EAA4D;AACtG,MAAK,8DAAoCF,IAApC,EAA0CC,oBAAoBE,WAA9D,KACJ,4DAAkCH,IAAlC,EAAwCC,oBAAoBG,KAA5D,EAAmEF,oBAAnE,CADI,IAEJD,oBAAoBI,UAApB,CAA+BC,QAA/B,CAAyCN,IAAzC,CAFD,EAEmD;AAClD,WAAO,IAAP;AACA;AACD,CAND;;AAQA;;;;;;;;;;AAUA,MAAMO,mCAAmC,SAAnCA,gCAAmC,CAAUP,IAAV,EAAiB;AACzD,QAAMQ,qBAAqBR,KAAKS,MAAL,CAAaT,KAAKU,MAAL,GAAc,CAA3B,CAA3B;AACA,QAAMC,oBAAoBX,KAAKS,MAAL,CAAaT,KAAKU,MAAL,GAAc,CAA3B,CAA1B;AACA,SAAOF,uBAAuBG,iBAA9B;AACA,CAJD;;AAMA;;;;;;;;;AASA,MAAMC,wCAAwC,SAAxCA,qCAAwC,CAAUZ,IAAV,EAAgBa,oBAAhB,EAAuC;AACpF,SAASb,KAAKc,MAAL,CAAa,IAAIC,MAAJ,CAAYF,oBAAZ,CAAb,CAAF,KAA0D,CAAC,CAAlE;AACA,CAFD;;AAIA;;;;;;;AAOO,SAAShB,UAAT,CAAqBG,IAArB,EAA2BgB,iBAA3B,EAA+C;AACrD,QAAMC,oBAAoBD,kBAAkBE,IAAlB,CAAwBC,eAAenB,KAAKc,MAAL,CAAa,IAAIC,MAAJ,CAAYI,YAAa,CAAb,CAAZ,CAAb,MAAkD,CAAC,CAA1F,CAA1B;AACA,MAAK,OAAOF,iBAAP,KAA6B,WAAlC,EAAgD;AAC/CjB,WAAOA,KAAKoB,OAAL,CAAc,IAAIL,MAAJ,CAAYE,kBAAmB,CAAnB,CAAZ,CAAd,EAAoDA,kBAAmB,CAAnB,CAApD,CAAP;AACA,GAAC,OAAOjB,IAAP;AACF;;AAED;;;;;;;;;AASO,SAASF,sBAAT,CAAiCE,IAAjC,EAAuCqB,kCAAvC,EAA2EC,4BAA3E,EAA0G;AAChH;AACA,QAAMC,aAAa,4DAAkCvB,IAAlC,EAAwCqB,mCAAmCG,gBAA3E,EAA6FF,4BAA7F,CAAnB;AACA;AACA,QAAMG,cAAc1B,mCAAoCC,IAApC,EAA0CqB,mCAAmCK,eAA7E,EACnBJ,4BADmB,CAApB;AAEA,QAAMK,aAAapB,iCAAkCP,IAAlC,CAAnB;AACA,QAAM4B,cAAchB,sCAAwCZ,IAAxC,EAA8CqB,mCAAmCK,eAAnC,CAAmDG,IAAjG,CAApB;;AAEA,SAAON,cAAgB,CAAEE,WAAF,IAAiBE,UAAjB,IAA+BC,WAAtD;AACA","file":"stemModificationHelpers.js","sourcesContent":["import { checkIfWordEndingIsOnExceptionList, checkIfWordIsOnVerbExceptionList } from \"../morphoHelpers/exceptionListHelpers.js\";\n\n/**\n * Checks whether the word is on any of the sub-lists of the noVowelDoublingList (ending match, exact match,\n * and verbs) and returns true if it is.\n *\n * @param {string}\tword\t\t\t\t\t\t\tThe word to check.\n * @param {Object}\tnoVowelDoublingList\tThe list of stems that should not have the vowel doubled.\n * @param {Object}\tcompoundVerbPrefixes\t\t\tThe list of inseparable and separable verb prefixes.\n *\n * @returns {boolean} Whether the word was found on one of the lists\n */\nconst checkIfWordIsOnNoVowelDoublingList = function( word, noVowelDoublingList, compoundVerbPrefixes ) {\n\tif ( checkIfWordEndingIsOnExceptionList( word, noVowelDoublingList.endingMatch ) ||\n\t\tcheckIfWordIsOnVerbExceptionList( word, noVowelDoublingList.verbs, compoundVerbPrefixes ) ||\n\t\tnoVowelDoublingList.exactMatch.includes( word ) ) {\n\t\treturn true;\n\t}\n};\n\n/**\n * Checks whether the third to last and fourth to last characters of the stem are the same. This, in principle, checks\n * whether the last vowel of the stem is preceded by a double consonant (as only consonants can precede the vowel).\n * If the third and fourth to last characters are the same, it means that vowel doubling is allowed. For example, in the\n * word 'luttel', the third and fourth to last characters are both t's so it should not become 'lutteel'.\n *\n * @param {string} word The stemmed word to check.\n *\n * @returns {boolean} Whether the vowel should be doubled or not.\n */\nconst isVowelPrecededByDoubleConsonant = function( word ) {\n\tconst fourthToLastLetter = word.charAt( word.length - 4 );\n\tconst thirdToLastLetter = word.charAt( word.length - 3 );\n\treturn fourthToLastLetter !== thirdToLastLetter;\n};\n\n/**\n * Checks whether the second to last syllable contains a diphthong. If it does, the vowel in the last syllable should\n * not be doubled.\n *\n * @param {string} word                 The stemmed word to check.\n * @param {string} noVowelDoublingRegex The regex to match a word with.\n *\n * @returns {boolean} Whether the vowel should be doubled or not.\n */\nconst doesPrecedingSyllableContainDiphthong = function( word, noVowelDoublingRegex ) {\n\treturn ( word.search( new RegExp( noVowelDoublingRegex ) ) ) === -1;\n};\n\n/**\n * Modifies the stem of the word according to the specified modification type.\n *\n * @param {string} word The stem that needs to be modified.\n * @param {string[]} modificationGroup The type of modification that needs to be done.\n * @returns {string} The modified stem, or the same stem if no modification was made.\n */\nexport function modifyStem( word, modificationGroup ) {\n\tconst neededReplacement = modificationGroup.find( replacement => word.search( new RegExp( replacement[ 0 ] ) ) !== -1 );\n\tif ( typeof neededReplacement !== \"undefined\" ) {\n\t\tword = word.replace( new RegExp( neededReplacement[ 0 ] ), neededReplacement[ 1 ] );\n\t} return word;\n}\n\n/**\n * Checks whether the final vowel of the stem should be doubled by going through four checks.\n *\n * @param {string}  word                               The stemmed word that the check should be executed on.\n * @param {Object}  morphologyDataNLStemmingExceptions The Dutch morphology data for stemming exceptions.\n * @param {Object}  morphologyDataNLVerbPrefixes\t   The separable and inseparable verb prefixes.\n *\n * @returns {boolean} Whether the vowel should be doubled or not.\n */\nexport function isVowelDoublingAllowed( word, morphologyDataNLStemmingExceptions, morphologyDataNLVerbPrefixes ) {\n\t// Check whether the word is on the list of verbs which should have the vowel doubled (exception to third check)\n\tconst firstCheck = checkIfWordIsOnVerbExceptionList( word, morphologyDataNLStemmingExceptions.getVowelDoubling, morphologyDataNLVerbPrefixes );\n\t// Check whether the word is on the list of words which should NOT have the vowel doubled\n\tconst secondCheck = checkIfWordIsOnNoVowelDoublingList( word, morphologyDataNLStemmingExceptions.noVowelDoubling,\n\t\tmorphologyDataNLVerbPrefixes );\n\tconst thirdCheck = isVowelPrecededByDoubleConsonant( word );\n\tconst fourthCheck = doesPrecedingSyllableContainDiphthong(  word, morphologyDataNLStemmingExceptions.noVowelDoubling.rule );\n\n\treturn firstCheck || ( ! secondCheck && thirdCheck && fourthCheck );\n}\n"]}