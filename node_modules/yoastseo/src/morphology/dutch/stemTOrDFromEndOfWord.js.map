{"version":3,"sources":["../../../../src/morphology/dutch/stemTOrDFromEndOfWord.js"],"names":["stemTOrDFromEndOfWord","checkIfTorDIsUnambiguous","morphologyDataNL","stemmedWord","word","wordsNotToBeStemmed","stemExceptions","wordsNotToBeStemmedExceptions","adjectivesEndingInRd","removeSuffixesFromFullForms","forms","wordsEndingInTOrDExceptionList","ambiguousTAndDEndings","tOrDArePartOfStem","doNotStemTOrD","verbs","pastParticipleStemmer","compoundVerbsPrefixes","endingMatch","exactMatch","includes","endsWith","slice"],"mappings":";;;;;QAgDgBA,qB,GAAAA,qB;;AAhDhB;;AACA;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;AAUA,MAAMC,2BAA2B,SAA3BA,wBAA2B,CAAUC,gBAAV,EAA4BC,WAA5B,EAAyCC,IAAzC,EAAgD;AAChF,QAAMC,sBAAsBH,iBAAiBI,cAAjB,CAAgCC,6BAA5D;AACA,QAAMC,uBAAuBN,iBAAiBI,cAAjB,CAAgCG,2BAAhC,CAA6D,CAA7D,EAAiEC,KAA9F;AACA,QAAMC,iCAAiCT,iBAAiBU,qBAAjB,CAAuCC,iBAAvC,CAAyDC,aAAhG;;AAEA;AACA,MAAK,oEAAgCZ,gBAAhC,EAAkDE,IAAlD,KACH,qEAAoCF,gBAApC,EAAsDE,IAAtD,CADG,IAEH,4DAAkCA,IAAlC,EAAwCC,oBAAoBU,KAA5D,EAAmEb,iBAAiBc,qBAAjB,CAAuCC,qBAA1G,CAFG,IAGH,8DAAoCb,IAApC,EAA0CC,oBAAoBa,WAA9D,CAHG,IAIHb,oBAAoBc,UAApB,CAA+BC,QAA/B,CAAyChB,IAAzC,CAJG,IAKHI,qBAAqBY,QAArB,CAA+BjB,WAA/B,CALG,IAMH,4CAA8BD,gBAA9B,EAAgDE,IAAhD,CANG,IAOHD,YAAYkB,QAAZ,CAAsB,MAAtB,CAPG,IAQH,8DAAoClB,WAApC,EAAiDQ,8BAAjD,CARF,EASE;AACD,WAAO,IAAP;AACA;AACD,CAlBD;;AAoBA;;;;;;;;;;;;;AAaO,SAASX,qBAAT,CAAgCE,gBAAhC,EAAkDC,WAAlD,EAA+DC,IAA/D,EAAsE;AAC5E,MAAKH,yBAA0BC,gBAA1B,EAA4CC,WAA5C,EAAyDC,IAAzD,CAAL,EAAuE;AACtE,WAAO,IAAP;AACA;AACD;AACA,SAAOD,YAAYmB,KAAZ,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAP;AACA","file":"stemTOrDFromEndOfWord.js","sourcesContent":["import { checkIfWordEndingIsOnExceptionList, checkIfWordIsOnVerbExceptionList } from \"../morphoHelpers/exceptionListHelpers\";\nimport { detectAndStemRegularParticiple } from \"./detectAndStemRegularParticiple\";\nimport { generateCorrectStemWithTAndDEnding } from \"./getStemWordsWithTAndDEnding\";\nimport checkExceptionsWithFullForms from \"../morphoHelpers/checkExceptionsWithFullForms\";\n\n/**\n * If the word ending in -t/-d was not matched in any of the checks for whether -t/-d should be stemmed or not, other checks still need\n * to be done in order to be sure whether we need to stem the word further or not.\n * If one of these checks returns true, we do not need to stem the word further.\n *\n * @param {Object}  morphologyDataNL\tThe Dutch morphology data.\n * @param {string}\tstemmedWord\t\t\tThe stemmed word.\n * @param {string}\tword\t\t\t\tThe unstemmed word.\n * @returns {boolean}\tWhether one of the conditions returns true or not.\n */\nconst checkIfTorDIsUnambiguous = function( morphologyDataNL, stemmedWord, word ) {\n\tconst wordsNotToBeStemmed = morphologyDataNL.stemExceptions.wordsNotToBeStemmedExceptions;\n\tconst adjectivesEndingInRd = morphologyDataNL.stemExceptions.removeSuffixesFromFullForms[ 1 ].forms;\n\tconst wordsEndingInTOrDExceptionList = morphologyDataNL.ambiguousTAndDEndings.tOrDArePartOfStem.doNotStemTOrD;\n\n\t// Run the checks below. If one of the conditions returns true, return the stem.\n\tif ( detectAndStemRegularParticiple( morphologyDataNL, word ) ||\n\t\t generateCorrectStemWithTAndDEnding( morphologyDataNL, word ) ||\n\t\t checkIfWordIsOnVerbExceptionList( word, wordsNotToBeStemmed.verbs, morphologyDataNL.pastParticipleStemmer.compoundVerbsPrefixes ) ||\n\t\t checkIfWordEndingIsOnExceptionList( word, wordsNotToBeStemmed.endingMatch ) ||\n\t\t wordsNotToBeStemmed.exactMatch.includes( word ) ||\n\t\t adjectivesEndingInRd.includes( stemmedWord ) ||\n\t\t checkExceptionsWithFullForms( morphologyDataNL, word ) ||\n\t\t stemmedWord.endsWith( \"heid\" ) ||\n\t\t checkIfWordEndingIsOnExceptionList( stemmedWord, wordsEndingInTOrDExceptionList )\n\t) {\n\t\treturn true;\n\t}\n};\n\n/**\n * If the word ending in -t/-d was not matched in any of the checks for whether -t/-d should be stemmed or not, and if it\n * is not a participle (which has its separate check), then it is still ambiguous whether -t/-d is part of the stem or a suffix.\n * Therefore, a second stem should be created with the -t/-d removed in case it was a suffix. For example, in the verb 'poolt',\n * -t is a suffix, but we could not predict in any of the previous checks that -t should be stemmed. To account for such cases,\n * we stem the -t here.\n *\n * @param {Object}  morphologyDataNL\tThe Dutch morphology data.\n * @param {string}\tstemmedWord\t\t\tThe stemmed word.\n * @param {string}\tword\t\t\t\tThe unstemmed word.\n *\n * @returns {?string}\t\t\t\t    The stemmed word or null if the -t/-d should not be stemmed.\n */\nexport function stemTOrDFromEndOfWord( morphologyDataNL, stemmedWord, word ) {\n\tif ( checkIfTorDIsUnambiguous( morphologyDataNL, stemmedWord, word ) ) {\n\t\treturn null;\n\t}\n\t// If none of the conditions above is true, stem the t/d from the word.\n\treturn stemmedWord.slice( 0, -1 );\n}\n"]}