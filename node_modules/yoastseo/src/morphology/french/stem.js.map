{"version":3,"sources":["../../../../src/morphology/french/stem.js"],"names":["stem","determineRs","word","rIntervalsData","rvIndex","search","RegExp","rvRegex1","rvRegex2","substring","rvRegex3","length","r1Regex","r1Index","r1","r2Index","processStandardSuffixes","standardSuffixData","a1Index","standardSuffixes1","a2Index","standardSuffixes2","a3Index","standardSuffixes3","a4Index","standardSuffixes4","a5Index","standardSuffixes5","a6Index","standardSuffixes6","a7Index","standardSuffixes7","a8Index","standardSuffixes8","a9Index","standardSuffixes9","a10Index","standardSuffixes10","a11Index","standardSuffixes11","a12Index","standardSuffixes12","a13Index","standardSuffixes13","a14Index","standardSuffixes14","a15Index","standardSuffixes15","a2Index2","suffixesPrecedingChar1","replace","slice","precedingCharacter2","suffixesPrecedingChar2","a6Index2","suffixesPrecedingChar4","precedingCharacter5","suffixesPrecedingChar5","precedingCharacter6","suffixesPrecedingChar6","precedingCharacter3","suffixesPrecedingChar3","a7Index2","suffixesPrecedingChar7","a7Index3","a11Index2","removeVerbSuffixesStartingWithI","originalWord","verbSuffixesWithIBeginning","step2aDone","toLowerCase","exceptions","b1Regex","suffixes","removeOtherVerbSuffixes","wordAfterStep1","morphologyData","otherVerbSuffixes","regularStemmer","suffixIons","i","regex","endsWith","verbSuffixOns","removeResidualSuffixes","morphologyDataRegularStemmer","residualSuffixes","residualSuffixes1","e1Index","residualSuffix2","residualSuffix3","e2Index","residualSuffixes4","residualSuffix5","residualSuffix6","checkWordInFullFormExceptions","paradigm","includes","canonicalizeStem","stemmedWord","stemsThatBelongToOneWord","adjectives","verbs","checkShortWordsExceptionList","shortWordsAndStems","wordStemPair","cannotTakeExtraSuffixS","canTakeExtraSuffixS","wordAfterShortWordsCheck","ifException","exceptionStemsWithFullForms","pluralsWithXSuffix","sShouldNotBeStemmed","nonVerbsOnEnt","nonVerbsOnOns","preProcessingStepsRegexes","rIntervals","standardSuffixes","verbSuffixesStartingWithIRemoved","yEnding","yAndSoftCEndingAndReplacement","yEndingAndReplacement","softCEnding","softCEndingAndReplacement","finalConsonantUndoubling","unaccentE","unaccentERegex","canonicalStem"],"mappings":"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","file":"stem.js","sourcesContent":["/* eslint-disable max-statements, complexity */\nimport { checkIfWordEndingIsOnExceptionList } from \"../morphoHelpers/exceptionListHelpers\";\nimport { applyAllReplacements } from \"../morphoHelpers/regexHelpers\";\n\n/*\n * MIT License\n *\n * Copyright (c) 2017 Bastien Botella\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/*\n * Author: Kasun Gajasinghe, University of Moratuwa\n * E-Mail: kasunbg AT gmail DOT com\n * Date: 09.08.2010\n *\n * LICENSE:\n *\n * Copyright (c) 2010, Kasun Gajasinghe. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice,\n *       this list of conditions and the following disclaimer in the documentation\n *       and/or other materials provided with the distribution.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY KASUN GAJASINGHE \"\"AS IS\"\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KASUN GAJASINGHE BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n/**\n * Determines R1, R2 and RV.\n *\n * @param {string} word The word for which to determine the R regions.\n * @param {Object} rIntervalsData The regexes that cover French RV and R1 intervals.\n *\n * @returns {[number]} The R1, R2 and RV.\n */\nconst determineRs = function( word, rIntervalsData ) {\n\tlet rvIndex = -1;\n\n\tif ( word.search( new RegExp( rIntervalsData.rvRegex1 ) ) !== -1 || word.search( new RegExp( rIntervalsData.rvRegex2 ) ) !== -1 ) {\n\t\trvIndex = 3;\n\t} else {\n\t\trvIndex = word.substring( 1 ).search( new RegExp( rIntervalsData.rvRegex3 ) );\n\n\t\tif ( rvIndex === -1 ) {\n\t\t\trvIndex = word.length;\n\t\t} else {\n\t\t\t// +2 is to supplement the substring(1) used to find rvIndex\n\t\t\trvIndex += 2;\n\t\t}\n\t}\n\n\t/*\n\t * R1 is the region after the first non-vowel following a vowel, or the end of the word if there is no such non-vowel.\n\t * R2 is the region after the first non-vowel following a vowel in R1, or the end of the word if there is no such non-vowel.\n\t */\n\tconst r1Regex = new RegExp( rIntervalsData.r1Regex );\n\tlet r1Index = word.search( r1Regex );\n\tlet r1 = \"\";\n\tif ( r1Index === -1 ) {\n\t\tr1Index = word.length;\n\t} else {\n\t\tr1Index += 2;\n\t\tr1 = word.substring( r1Index );\n\t}\n\n\tlet r2Index = -1;\n\tif ( r1Index !== -1 ) {\n\t\tr2Index = r1.search( r1Regex );\n\t\tif ( r2Index === -1 ) {\n\t\t\tr2Index = word.length;\n\t\t} else {\n\t\t\tr2Index += 2;\n\t\t\tr2Index += r1Index;\n\t\t}\n\t}\n\tif ( r1Index !== -1 && r1Index < 3 ) {\n\t\tr1Index = 3;\n\t}\n\n\treturn [\n\t\tr1Index,\n\t\tr2Index,\n\t\trvIndex,\n\t];\n};\n\n/**\n * Removes or normalizes standard suffixes.\n *\n * @param {string} word               The word for which to remove suffixes.\n * @param {Object} standardSuffixData The French morphology data covering standard suffixes.\n * @param {number} r1Index            The start index of R1.\n * @param {number} r2Index            The start index of R2.\n * @param {number} rvIndex            The start index of RV.\n *\n * @returns {string} The word with standard suffixes removed or normalized.\n */\nconst processStandardSuffixes = function( word, standardSuffixData, r1Index, r2Index, rvIndex ) {\n\tconst a1Index = word.search( new RegExp( standardSuffixData.standardSuffixes1 ) ),\n\t\ta2Index = word.search( new RegExp( standardSuffixData.standardSuffixes2 ) ),\n\t\ta3Index = word.search( new RegExp( standardSuffixData.standardSuffixes3[ 0 ] ) ),\n\t\ta4Index = word.search( new RegExp( standardSuffixData.standardSuffixes4[ 0 ] ) ),\n\t\ta5Index = word.search( new RegExp( standardSuffixData.standardSuffixes5[ 0 ] ) ),\n\t\ta6Index = word.search( new RegExp( standardSuffixData.standardSuffixes6 ) ),\n\t\ta7Index = word.search( new RegExp( standardSuffixData.standardSuffixes7 ) ),\n\t\ta8Index = word.search( new RegExp( standardSuffixData.standardSuffixes8 ) ),\n\t\ta9Index = word.search( new RegExp( standardSuffixData.standardSuffixes9[ 0 ] ) ),\n\t\ta10Index = word.search( new RegExp( standardSuffixData.standardSuffixes10[ 0 ] ) ),\n\t\ta11Index = word.search( new RegExp( standardSuffixData.standardSuffixes11[ 0 ] ) ),\n\t\ta12Index = word.search( new RegExp( standardSuffixData.standardSuffixes12 ) ),\n\t\ta13Index = word.search( new RegExp( standardSuffixData.standardSuffixes13[ 0 ] ) ),\n\t\ta14Index = word.search( new RegExp( standardSuffixData.standardSuffixes14[ 0 ] ) ),\n\t\ta15Index = word.search( new RegExp( standardSuffixData.standardSuffixes15 ) );\n\n\tif ( a1Index !== -1 && a1Index >= r2Index ) {\n\t\tword = word.substring( 0, a1Index );\n\t} else if ( a2Index !== -1 && a2Index >= r2Index ) {\n\t\tword = word.substring( 0, a2Index );\n\t\tconst a2Index2 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ) );\n\n\t\tif ( a2Index2 !== -1 && a2Index2 >= r2Index ) {\n\t\t\t// If preceded by ic, delete if in R2\n\t\t\tword = word.substring( 0, a2Index2 );\n\t\t} else {\n\t\t\t// Else replace by iqU\n\t\t\tword = word.replace( new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ), standardSuffixData.suffixesPrecedingChar1[ 1 ] );\n\t\t}\n\t} else if ( a3Index !== -1 && a3Index >= r2Index ) {\n\t\t// Replace with log if in R2\n\t\tword = word.slice( 0, a3Index ) + standardSuffixData.standardSuffixes3[ 1 ];\n\t} else if ( a4Index !== -1 && a4Index >= r2Index ) {\n\t\t// Replace with u if in R2\n\t\tword = word.slice( 0, a4Index ) + standardSuffixData.standardSuffixes4[ 1 ];\n\t} else if ( a5Index !== -1 && a5Index >= r2Index ) {\n\t\t// Replace with ent if in R2\n\t\tword = word.slice( 0, a5Index ) + standardSuffixData.standardSuffixes5[ 1 ];\n\t} else if ( a12Index !== -1 && a12Index >= r1Index ) {\n\t\t// +1- amendment to non-vowel\n\t\tword = word.substring( 0, a12Index + 1 );\n\t} else if ( a6Index !== -1 && a6Index >= rvIndex ) {\n\t\tword = word.substring( 0, a6Index );\n\n\t\tconst precedingCharacter2 =  word.search( new RegExp( standardSuffixData.suffixesPrecedingChar2[ 0 ] ) );\n\t\tconst a6Index2 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar4[ 0 ] ) );\n\t\tconst precedingCharacter5 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar5[ 0 ] ) );\n\t\tconst precedingCharacter6 = word.search(  new RegExp( standardSuffixData.suffixesPrecedingChar6[ 0 ] ) );\n\t\tif ( precedingCharacter2 >= r2Index ) {\n\t\t\tword = word.slice( 0, precedingCharacter2 ) + standardSuffixData.suffixesPrecedingChar2[ 1 ];\n\n\t\t\tconst precedingCharacter3 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar3[ 0 ] ) );\n\t\t\tif ( precedingCharacter3 >= r2Index ) {\n\t\t\t\tword = word.slice( 0, precedingCharacter3 ) + standardSuffixData.suffixesPrecedingChar3[ 1 ];\n\t\t\t}\n\t\t} else if ( word.search( new RegExp( standardSuffixData.suffixesPrecedingChar4[ 0 ] ) ) !== -1 ) {\n\t\t\tif ( a6Index2 >= r2Index ) {\n\t\t\t\tword = word.substring( 0, a6Index2 );\n\t\t\t} else if ( a6Index2 >= r1Index ) {\n\t\t\t\tword = word.substring( 0, a6Index2 ) + standardSuffixData.suffixesPrecedingChar4[ 1 ];\n\t\t\t}\n\t\t} else if ( precedingCharacter5 >= r2Index ) {\n\t\t\t// If preceded by abl or iqU, delete if in R2\n\t\t\tword = word.slice( 0, precedingCharacter5 ) + standardSuffixData.suffixesPrecedingChar5[ 1 ];\n\t\t} else if ( precedingCharacter6 >= rvIndex ) {\n\t\t\t// If preceded by abl or iqU, delete if in R2\n\t\t\tword = word.slice( 0, precedingCharacter6 ) + standardSuffixData.suffixesPrecedingChar6[ 1 ];\n\t\t}\n\t} else if ( a7Index !== -1 && a7Index >= r2Index ) {\n\t\t// Delete if in R2\n\t\tword = word.substring( 0, a7Index );\n\n\t\tconst a7Index2 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar7[ 0 ] ) );\n\t\tconst a7Index3 = word.search( new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ) );\n\t\tif ( a7Index2 !== -1 ) {\n\t\t\t// If preceded by abil, delete if in R2, else replace by abl, otherwise\n\t\t\tif ( a7Index2 >= r2Index ) {\n\t\t\t\tword = word.substring( 0, a7Index2 );\n\t\t\t} else {\n\t\t\t\tword = word.substring( 0, a7Index2 ) + standardSuffixData.suffixesPrecedingChar7[ 1 ];\n\t\t\t}\n\t\t} else if ( a7Index3 !== -1 ) {\n\t\t\tif ( a7Index3 !== -1 && a7Index3 >= r2Index ) {\n\t\t\t\t// If preceded by ic, delete if in R2\n\t\t\t\tword = word.substring( 0, a7Index3 );\n\t\t\t} else {\n\t\t\t\t// Else replace by iqU\n\t\t\t\tword = word.substring( 0, a7Index3 ) + standardSuffixData.suffixesPrecedingChar1[ 1 ];\n\t\t\t}\n\t\t} else if ( word.search( new RegExp( standardSuffixData.suffixesPrecedingChar2[ 0 ] ) ) !== r2Index ) {\n\t\t\tword = word.replace( new RegExp( standardSuffixData.suffixesPrecedingChar2[ 0 ] ), standardSuffixData.suffixesPrecedingChar2[ 1 ] );\n\t\t}\n\t} else if ( a8Index !== -1 && a8Index >= r2Index ) {\n\t\tword = word.substring( 0, a8Index );\n\n\t\tif ( word.search( new RegExp( standardSuffixData.suffixesPrecedingChar3[ 0 ] ) ) >= r2Index ) {\n\t\t\tword = word.replace( new RegExp( standardSuffixData.suffixesPrecedingChar3[ 0 ] ), standardSuffixData.suffixesPrecedingChar3[ 1 ] );\n\n\t\t\tif ( word.search(  new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ) ) >= r2Index ) {\n\t\t\t\tword = word.replace(  new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ), \"\" );\n\t\t\t} else {\n\t\t\t\tword = word.replace(  new RegExp( standardSuffixData.suffixesPrecedingChar1[ 0 ] ), standardSuffixData.suffixesPrecedingChar1[ 1 ] );\n\t\t\t}\n\t\t}\n\t} else if ( a9Index !== -1 ) {\n\t\tword = word.replace( new RegExp( standardSuffixData.standardSuffixes9[ 0 ] ), standardSuffixData.standardSuffixes9[ 1 ] );\n\t} else if ( a10Index >= r1Index ) {\n\t\tword = word.replace( new RegExp( standardSuffixData.standardSuffixes10[ 0 ] ), standardSuffixData.standardSuffixes10[ 1 ] );\n\t} else if ( a11Index !== -1 ) {\n\t\tconst a11Index2 = word.search( new RegExp( standardSuffixData.standardSuffixes11[ 0 ] ) );\n\n\t\tif ( a11Index2 >= r2Index ) {\n\t\t\tword = word.substring( 0, a11Index2 );\n\t\t} else if ( a11Index2 >= r1Index ) {\n\t\t\tword = word.substring( 0, a11Index2 ) + standardSuffixData.standardSuffixes11[ 1 ];\n\t\t}\n\t} else if ( a13Index !== -1 && a13Index >= rvIndex ) {\n\t\tword = word.replace( new RegExp( standardSuffixData.standardSuffixes13[ 0 ] ), standardSuffixData.standardSuffixes13[ 1 ]  );\n\t} else if ( a14Index !== -1 && a14Index >= rvIndex ) {\n\t\tword = word.replace( new RegExp( standardSuffixData.standardSuffixes14[ 0 ] ), standardSuffixData.standardSuffixes14[ 1 ] );\n\t} else if ( a15Index !== -1 && a15Index >= rvIndex ) {\n\t\tword = word.substring( 0, a15Index + 1 );\n\t}\n\n\treturn word;\n};\n\n/**\n * Removes verb suffixes starting with i.\n *\n * @param {string} word                       The word for which to remove suffixes.\n * @param {string} originalWord               The unprocessed word.\n * @param {number} rvIndex                    The start index of RV.\n * @param {string} verbSuffixesWithIBeginning Data for checking French suffixes starting with I.\n *\n * @returns {{step2aDone: boolean, word: string}} The word and information about whether the conditions for step 2a were met.\n */\nconst removeVerbSuffixesStartingWithI = function( word, originalWord, rvIndex, verbSuffixesWithIBeginning ) {\n\tlet step2aDone = false;\n\tif ( originalWord === word.toLowerCase() || checkIfWordEndingIsOnExceptionList( originalWord, verbSuffixesWithIBeginning.exceptions ) ) {\n\t\tstep2aDone = true;\n\n\t\tconst b1Regex = new RegExp( verbSuffixesWithIBeginning.suffixes[ 0 ] );\n\t\tif ( word.search( b1Regex ) >= rvIndex ) {\n\t\t\tword = word.replace( b1Regex, verbSuffixesWithIBeginning.suffixes[ 1 ] );\n\t\t}\n\t}\n\n\treturn { word, step2aDone };\n};\n\n/**\n * Removes other verb suffixes.\n *\n * @param {string}  word              The word for which to remove suffixes.\n * @param {boolean} step2aDone        Whether step 2a was done.\n * @param {string}  wordAfterStep1    The word after step 1 was done.\n * @param {number}  r2Index           The start index of R2.\n * @param {number}  rvIndex           The start index of RV.\n * @param {Object}  morphologyData    The French morphology data.\n *\n * @returns {string} The word after other verb suffixes were removed.\n */\nconst removeOtherVerbSuffixes = function( word, step2aDone, wordAfterStep1, r2Index, rvIndex, morphologyData ) {\n\tconst otherVerbSuffixes = morphologyData.regularStemmer.otherVerbSuffixes;\n\n\tif ( step2aDone && wordAfterStep1 === word ) {\n\t\tconst suffixIons = new RegExp( otherVerbSuffixes[ 0 ] );\n\t\tif ( word.search( suffixIons ) >= r2Index ) {\n\t\t\treturn word.replace( suffixIons, \"\" );\n\t\t}\n\n\t\tfor ( let i = 1; i < otherVerbSuffixes.length; i++ ) {\n\t\t\tconst regex = new RegExp( otherVerbSuffixes[ i ] );\n\t\t\tif ( word.search( regex ) >= rvIndex ) {\n\t\t\t\treturn word.replace( regex, \"\" );\n\t\t\t}\n\t\t}\n\t\t// Check if a word ends in \"ons\" preceded by \"i\", if it is \"ons\" is not stemmed.\n\t\tif ( word.endsWith( \"ions\" ) ) {\n\t\t\treturn word;\n\t\t}\n\n\t\t// Check if a word ends in \"ons\" preceded by other than \"i\" and stem it if it is in RV.\n\t\tconst verbSuffixOns = new RegExp( morphologyData.regularStemmer.verbSuffixOns );\n\t\tif ( word.search( verbSuffixOns ) >= rvIndex ) {\n\t\t\tword = word.replace( verbSuffixOns, \"\" );\n\t\t}\n\t}\n\n\treturn word;\n};\n\n/**\n * Removes residual suffixes.\n *\n * @param {string}  word                            The word for which to remove residual suffixes.\n * @param {number}  rvIndex                         The start index of RV.\n * @param {number}  r2Index                         The start index of R2.\n * @param {Object}  morphologyDataRegularStemmer    The French morphology data.\n *\n * @returns {string}                                The word after residual suffixes were removed.\n */\nconst removeResidualSuffixes = function( word, rvIndex, r2Index, morphologyDataRegularStemmer ) {\n\tconst residualSuffixes = morphologyDataRegularStemmer.residualSuffixes;\n\tif ( word.search( new RegExp( residualSuffixes.residualSuffixes1[ 0 ] ) ) >= rvIndex ) {\n\t\tword = word.replace( new RegExp( residualSuffixes.residualSuffixes1[ 0 ] ), residualSuffixes.residualSuffixes1[ 1 ] );\n\t}\n\n\tconst e1Index = word.search( new RegExp( residualSuffixes.residualSuffix2 ) );\n\n\tif ( e1Index >= r2Index && word.search( new RegExp( residualSuffixes.residualSuffix3 ) ) >= rvIndex ) {\n\t\tword = word.substring( 0, e1Index );\n\t} else {\n\t\tlet e2Index = word.search( new RegExp( residualSuffixes.residualSuffixes4[ 0 ] ) );\n\n\t\tif ( e2Index >= rvIndex ) {\n\t\t\tword = word.substring( 0, e2Index ) + residualSuffixes.residualSuffixes4[ 1 ];\n\t\t} else {\n\t\t\te2Index = word.search( new RegExp( residualSuffixes.residualSuffix5 ) );\n\t\t\tif ( e2Index >= rvIndex ) {\n\t\t\t\t// Delete last e.\n\t\t\t\tword = word.substring( 0, e2Index );\n\t\t\t} else {\n\t\t\t\te2Index = word.search( new RegExp( residualSuffixes.residualSuffix6[ 0 ] ) );\n\t\t\t\tif ( e2Index >= rvIndex ) {\n\t\t\t\t\tword = word.substring( 0, e2Index ) + residualSuffixes.residualSuffix6[ 1 ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn word;\n};\n\n/**\n * Checks whether a word is in the full-form exception list and if so returns the canonical stem.\n *\n * @param {string} word\t      The word to be checked.\n * @param {Object} exceptions The list of full-form exceptions to be checked in.\n *\n * @returns {null|string} The canonical stem or null if nothing was found.\n */\nconst checkWordInFullFormExceptions = function( word, exceptions ) {\n\tfor ( const paradigm of exceptions ) {\n\t\tif ( paradigm[ 1 ].includes( word ) ) {\n\t\t\treturn paradigm[ 0 ];\n\t\t}\n\t}\n\treturn null;\n};\n\n/**\n * Check whether the stem is on the exception list of stems that belong to one word. If it is, returns the canonical stem.\n *\n * @param {string}\tstemmedWord\t\t\t\t\tThe stemmed word.\n * @param {Object}\tstemsThatBelongToOneWord\tThe list of stems that belong to one word.\n *\n * @returns {null|string}\tThe canonical stem if word was found on the list.\n */\nconst canonicalizeStem = function( stemmedWord, stemsThatBelongToOneWord ) {\n\t// Check the adjectives list.\n\tfor ( const paradigm of stemsThatBelongToOneWord.adjectives ) {\n\t\tif ( paradigm.includes( stemmedWord ) ) {\n\t\t\treturn paradigm[ 0 ];\n\t\t}\n\t}\n\t// Check the verbs list. The infinitive stem is always the canonical stem for verbs.\n\tfor ( const paradigm of stemsThatBelongToOneWord.verbs ) {\n\t\tif ( paradigm.includes( stemmedWord ) ) {\n\t\t\treturn paradigm[ 0 ];\n\t\t}\n\t}\n};\n\n/**\n * Checks whether the word is on the list of words which should be stemmed, even though the suffix would not be found in the\n * required region. If the word is found on the list, the stem specified in that list is returned.\n *\n * @param {string}\tword\t\t\t\tThe word to check.\n * @param {Object}\tshortWordsAndStems\tThe list to check.\n *\n * @returns {null|string} The stem or null if the word was not found on the list.\n */\nconst checkShortWordsExceptionList = function( word, shortWordsAndStems ) {\n\t// First check whether the word is on the sub-list of words that cannot take an extra -s suffix.\n\tfor ( const wordStemPair of shortWordsAndStems.cannotTakeExtraSuffixS ) {\n\t\tif ( wordStemPair[ 0 ] === word ) {\n\t\t\treturn wordStemPair[ 1 ];\n\t\t}\n\t}\n\t// If the word was not found on the first sub-list, check the second sub-list of words that can take an extra -s suffix.\n\tif ( word.endsWith( \"s\" ) ) {\n\t\tword = word.slice( 0, -1 );\n\t}\n\tfor ( const wordStemPair of shortWordsAndStems.canTakeExtraSuffixS ) {\n\t\tif ( wordStemPair[ 0 ] === word ) {\n\t\t\treturn wordStemPair[ 1 ];\n\t\t}\n\t}\n};\n\n/**\n * Stems French words.\n *\n * @param {string} word             The word to stem.\n * @param {Object} morphologyData   The French morphology data.\n *\n * @returns {string} The stemmed word.\n */\nexport default function stem( word, morphologyData ) {\n\tword = word.toLowerCase();\n\tconst originalWord = word;\n\n\t// Check if the word is on an exception list of words that should be stemmed even though the suffix is not in the required region.\n\tconst wordAfterShortWordsCheck = checkShortWordsExceptionList( word, morphologyData.shortWordsAndStems );\n\tif ( wordAfterShortWordsCheck ) {\n\t\treturn wordAfterShortWordsCheck;\n\t}\n\n\t// Check if the word is on an exception list for which all forms of a word and its stem are listed.\n\tconst ifException = checkWordInFullFormExceptions( word, morphologyData.exceptionStemsWithFullForms );\n\tif ( ifException ) {\n\t\treturn ifException;\n\t}\n\n\t// Check the exception list of words with plural suffix -x.\n\tif ( word.endsWith( \"x\" ) ) {\n\t\tconst pluralsWithXSuffix = morphologyData.pluralsWithXSuffix;\n\t\tif ( pluralsWithXSuffix.includes( word ) ) {\n\t\t\treturn word.slice( 0, -1 );\n\t\t}\n\t}\n\n\t// Check if the word is on the exception list of words for which -s should not be stemmed.\n\tif ( word.endsWith( \"s\" ) ) {\n\t\tconst sShouldNotBeStemmed = morphologyData.sShouldNotBeStemmed;\n\t\tif ( sShouldNotBeStemmed.includes( word ) ) {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\t// Check if the word is on the exception list of words for which -ent should not be stemmed.\n\tconst nonVerbsOnEnt = morphologyData.nonVerbsOnEnt;\n\tif ( word.endsWith( \"ent\" ) ) {\n\t\tif ( nonVerbsOnEnt.includes( word ) ) {\n\t\t\treturn word;\n\t\t}\n\t}\n\tif ( word.endsWith( \"ents\" ) ) {\n\t\tif ( nonVerbsOnEnt.includes( word.slice( 0, -1 ) ) ) {\n\t\t\treturn word.slice( 0, -1 );\n\t\t}\n\t}\n\n\t// Check if word is on the exception list of nouns and adjectives for which the verb suffix -ons should not be stemmed.\n\tconst nonVerbsOnOns = morphologyData.nonVerbsOnOns;\n\tif ( word.endsWith( \"ons\" ) ) {\n\t\tif ( nonVerbsOnOns.includes( word ) ) {\n\t\t\treturn word.slice( 0, -1 );\n\t\t}\n\t}\n\n\t// Pre-processing steps\n\tword = applyAllReplacements( word, morphologyData.regularStemmer.preProcessingStepsRegexes );\n\n\t// Determine R1, R2 & RV regions.\n\tconst [\n\t\tr1Index,\n\t\tr2Index,\n\t\trvIndex,\n\t] = determineRs( word, morphologyData.regularStemmer.rIntervals );\n\n\t/*\n\t * Step 1:\n\t * Remove standard suffixes\n\t */\n\tword = processStandardSuffixes( word, morphologyData.regularStemmer.standardSuffixes, r1Index, r2Index, rvIndex );\n\tconst wordAfterStep1 = word;\n\n\t/*\n\t * Step 2a:\n\t * Stem verb suffixes beginning with \"i\"\n\t */\n\tconst verbSuffixesStartingWithIRemoved = removeVerbSuffixesStartingWithI(\n\t\tword,\n\t\toriginalWord,\n\t\trvIndex,\n\t\tmorphologyData.regularStemmer.verbSuffixesWithIBeginning\n\t);\n\tword = verbSuffixesStartingWithIRemoved.word;\n\tconst step2aDone = verbSuffixesStartingWithIRemoved.step2aDone;\n\n\t/*\n\t * Step 2b:\n\t * Stem other verb suffixes\n\t */\n\tif ( ! nonVerbsOnEnt.includes( word ) ) {\n\t\tword = removeOtherVerbSuffixes(\n\t\t\tword,\n\t\t\tstep2aDone,\n\t\t\twordAfterStep1,\n\t\t\tr2Index,\n\t\t\trvIndex,\n\t\t\tmorphologyData\n\t\t);\n\t}\n\n\tif ( originalWord === word.toLowerCase() ) {\n\t\t/* Step 4:\n\t\t * Stem residual suffixes.\n\t\t */\n\t\tword = removeResidualSuffixes( word, rvIndex, r2Index, morphologyData.regularStemmer );\n\t} else {\n\t\t/*\n\t\t * Step 3 (only needs to be executed if step 4 isn't executed)\n\t\t * Replace final Y with i or final ç with c.\n\t\t */\n\t\tconst yEnding = morphologyData.regularStemmer.yAndSoftCEndingAndReplacement.yEndingAndReplacement;\n\t\tconst softCEnding = morphologyData.regularStemmer.yAndSoftCEndingAndReplacement.softCEndingAndReplacement;\n\t\tif ( word.endsWith( yEnding[ 0 ] ) ) {\n\t\t\tword = word.slice( 0, -1 ) + yEnding[ 1 ];\n\t\t} else if ( word.endsWith( softCEnding[ 0 ] ) ) {\n\t\t\tword = word.slice( 0, -1 ) + softCEnding[ 1 ];\n\t\t}\n\t}\n\n\t/* Step 5:\n\t * Undouble final consonants\n\t */\n\tword = applyAllReplacements( word, morphologyData.regularStemmer.finalConsonantUndoubling );\n\n\t/* Step 6:\n\t * Un-accent\n\t */\n\tconst unaccentE = morphologyData.regularStemmer.unaccentERegex;\n\tword = word.replace( new RegExp( unaccentE[ 0 ] ), unaccentE[ 1 ] );\n\tword = word.toLowerCase();\n\n\tconst canonicalStem = canonicalizeStem( word, morphologyData.stemsThatBelongToOneWord );\n\tif ( canonicalStem ) {\n\t\treturn canonicalStem;\n\t}\n\n\treturn word;\n}\n"]}