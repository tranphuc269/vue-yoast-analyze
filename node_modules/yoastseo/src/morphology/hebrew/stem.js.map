{"version":3,"sources":["../../../../src/morphology/hebrew/stem.js"],"names":["stem","removePrefix","word","prefixes","some","prefix","startsWith","slice","morphologyData","dictionaryStemmer","dictionary","stemmedWord","wordAfterRemovingPrefix","wordAfterRemovingSecondPrefix"],"mappings":";;;;;kBAyBwBA,I;AAzBxB;;;;;;;;;;AAUA,MAAMC,eAAe,SAAfA,YAAe,CAAUC,IAAV,EAAgBC,QAAhB,EAA2B;AAC/C,KAAKA,SAASC,IAAT,CAAeC,UAAUH,KAAKI,UAAL,CAAiBD,MAAjB,CAAzB,CAAL,EAA4D;AAC3D,SAAOH,KAAKK,KAAL,CAAY,CAAZ,CAAP;AACA;AACD,QAAOL,IAAP;AACA,CALD;;AAOA;;;;;;;;AAQe,SAASF,IAAT,CAAeE,IAAf,EAAqBM,cAArB,EAAsC;AACpD,OAAMC,oBAAoBD,eAAeE,UAAzC;;AAEA;AACA,KAAIC,cAAcF,kBAAmBP,IAAnB,CAAlB;AACA,KAAKS,WAAL,EAAmB;AAClB,SAAOA,WAAP;AACA;;AAED;AACA,OAAMC,0BAA0BX,aAAcC,IAAd,EAAoBM,eAAeL,QAAnC,CAAhC;AACA,KAAKS,4BAA4BV,IAAjC,EAAwC;AACvCS,gBAAcF,kBAAmBG,uBAAnB,CAAd;AACA,MAAKD,WAAL,EAAmB;AAClB,UAAOA,WAAP;AACA;AACD;AACA,QAAME,gCAAgCZ,aAAcW,uBAAd,EAAuCJ,eAAeL,QAAtD,CAAtC;AACA,MAAKU,kCAAkCD,uBAAvC,EAAkE;AACjED,iBAAcF,kBAAmBI,6BAAnB,CAAd;AACA,OAAKF,WAAL,EAAmB;AAClB,WAAOA,WAAP;AACA;AACD;AACD;AACD,QAAOT,IAAP;AACA","file":"stem.js","sourcesContent":["/**\n *\n * If the word starts with one of the prefixes \"ב\" \"ה\", \"ו\", \"כ\", \"ל\", \"מ\", \"ש\" it should be stemmed as the dictionary\n * does not contain forms with those prefixes.\n *\n * @param {string} \t\tword\t\tThe word to check for a prefix.\n * @param {string[]} \tprefixes\tThe prefixes that should be stemmed before checking the dictionary.\n *\n * @returns {string} Word without the prefix or the original word if no prefix was found\n */\nconst removePrefix = function( word, prefixes ) {\n\tif ( prefixes.some( prefix => word.startsWith( prefix ) ) ) {\n\t\treturn word.slice( 1 );\n\t}\n\treturn word;\n};\n\n/**\n * Stems Hebrew words (removes possible prefixes and returns lemma if found in the dictionary).\n *\n * @param {string}\tword\t\t\tThe word to stem.\n * @param {Object}\tmorphologyData\tThe Hebrew morphology data.\n *\n * @returns {string} The stemmed word or the original word if no stem was found.\n */\nexport default function stem( word, morphologyData ) {\n\tconst dictionaryStemmer = morphologyData.dictionary;\n\n\t// Check if the word exists in the dictionary stemmer. If yes, return base form of the word specified in the dictionary.\n\tlet stemmedWord = dictionaryStemmer[ word ];\n\tif ( stemmedWord ) {\n\t\treturn stemmedWord;\n\t}\n\n\t// If the word was not found in the dictionary, try to remove a prefix from the word and see whether the deprefixed word is found.\n\tconst wordAfterRemovingPrefix = removePrefix( word, morphologyData.prefixes );\n\tif ( wordAfterRemovingPrefix !== word ) {\n\t\tstemmedWord = dictionaryStemmer[ wordAfterRemovingPrefix ];\n\t\tif ( stemmedWord ) {\n\t\t\treturn stemmedWord;\n\t\t}\n\t\t// If a prefix was removed but the word was still not found, try removing another prefix and search in the dictionary again.\n\t\tconst wordAfterRemovingSecondPrefix = removePrefix( wordAfterRemovingPrefix, morphologyData.prefixes );\n\t\tif ( wordAfterRemovingSecondPrefix !== wordAfterRemovingPrefix  ) {\n\t\t\tstemmedWord = dictionaryStemmer[ wordAfterRemovingSecondPrefix ];\n\t\t\tif ( stemmedWord ) {\n\t\t\t\treturn stemmedWord;\n\t\t\t}\n\t\t}\n\t}\n\treturn word;\n}\n"]}