{"version":3,"sources":["../../../../src/morphology/morphoHelpers/buildFormRule.js"],"names":["buildOneFormFromRegex","word","regexes","i","length","reg","test","replace","repl"],"mappings":";;;;;QASgBA,qB,GAAAA,qB;AAThB;;;;;;;;;AASO,SAASA,qBAAT,CAAgCC,IAAhC,EAAsCC,OAAtC,EAAgD;AACtD,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAID,QAAQE,MAA7B,EAAqCD,GAArC,EAA2C;AAC1C,QAAKD,QAASC,CAAT,EAAaE,GAAb,CAAiBC,IAAjB,CAAuBL,IAAvB,MAAkC,IAAvC,EAA8C;AAC7C,aAAOA,KAAKM,OAAL,CAAcL,QAASC,CAAT,EAAaE,GAA3B,EAAgCH,QAASC,CAAT,EAAaK,IAA7C,CAAP;AACA;AACD;AACD","file":"buildFormRule.js","sourcesContent":["/**\n * Checks if the input word qualifies for the input regex and if so builds a required form.\n * This function is used for other more specific functions.\n *\n * @param {string} word The word to build forms for.\n * @param {Array} regexes The regex-based array of rules to compare the word against.\n *\n * @returns {string} The newly built form of the word.\n */\nexport function buildOneFormFromRegex( word, regexes ) {\n\tfor ( let i = 0; i < regexes.length; i++ ) {\n\t\tif ( regexes[ i ].reg.test( word ) === true ) {\n\t\t\treturn word.replace( regexes[ i ].reg, regexes[ i ].repl );\n\t\t}\n\t}\n}\n"]}