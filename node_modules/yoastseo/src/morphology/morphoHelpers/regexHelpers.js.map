{"version":3,"sources":["../../../../src/morphology/morphoHelpers/regexHelpers.js"],"names":["doesWordMatchRegex","searchAndReplaceWithRegex","applyAllReplacements","word","regex","regexObject","RegExp","test","groupOfRegexAndReplacements","regexAndReplacement","search","replace","listOfRegexAndReplacement","forEach","setOfRegexAndReplacement"],"mappings":";;;;;QAOgBA,kB,GAAAA,kB;QAYAC,yB,GAAAA,yB;QAiBAC,oB,GAAAA,oB;AApChB;;;;;;;AAOO,SAASF,kBAAT,CAA6BG,IAA7B,EAAmCC,KAAnC,EAA2C;AACjD,QAAMC,cAAcC,OAAQF,KAAR,CAApB;AACA,SAAOC,YAAYE,IAAZ,CAAkBJ,IAAlB,CAAP;AACA;;AAED;;;;;;;AAOO,SAASF,yBAAT,CAAoCE,IAApC,EAA0CK,2BAA1C,EAAwE;AAC9E,OAAM,MAAMC,mBAAZ,IAAmCD,2BAAnC,EAAiE;AAChE,QAAKL,KAAKO,MAAL,CAAa,IAAIJ,MAAJ,CAAYG,oBAAqB,CAArB,CAAZ,CAAb,MAA0D,CAAC,CAAhE,EAAoE;AACnEN,aAAOA,KAAKQ,OAAL,CAAc,IAAIL,MAAJ,CAAYG,oBAAqB,CAArB,CAAZ,CAAd,EAAsDA,oBAAqB,CAArB,CAAtD,CAAP;AACA,aAAON,IAAP;AACA;AACD;AACD;;AAED;;;;;;;;AAQO,SAASD,oBAAT,CAA+BC,IAA/B,EAAqCS,yBAArC,EAAiE;AACvEA,4BAA0BC,OAA1B,CAAmC,UAAUC,wBAAV,EAAqC;AACvEX,WAAOA,KAAKQ,OAAL,CAAc,IAAIL,MAAJ,CAAYQ,yBAA0B,CAA1B,CAAZ,CAAd,EAA2DA,yBAA0B,CAA1B,CAA3D,CAAP;AACA,GAFD;AAGA,SAAOX,IAAP;AACA","file":"regexHelpers.js","sourcesContent":["/**\n * Checks whether a word is matched with a regex.\n *\n * @param {string} word\t\tThe word to check.\n * @param {string} regex\tThe regex.\n * @returns {boolean}\t\tWhether or not there was a match.\n */\nexport function doesWordMatchRegex( word, regex ) {\n\tconst regexObject = RegExp( regex );\n\treturn regexObject.test( word );\n}\n\n/**\n * Loops through a nested array with pairs of regexes and replacements, and performs the needed replacement if a match is found.\n *\n * @param {string} word \t\t\t\t\t\t\tThe word that may need to be modified.\n * @param {[][]} groupOfRegexAndReplacements \tThe array with the regexes and the required replacements.\n * @returns {?string} The modified stem or null if no match was found.\n */\nexport function searchAndReplaceWithRegex( word, groupOfRegexAndReplacements ) {\n\tfor ( const regexAndReplacement of groupOfRegexAndReplacements ) {\n\t\tif ( word.search( new RegExp( regexAndReplacement[ 0 ] ) ) !== -1 ) {\n\t\t\tword = word.replace( new RegExp( regexAndReplacement[ 0 ] ), regexAndReplacement[ 1 ] );\n\t\t\treturn word;\n\t\t}\n\t}\n}\n\n/**\n * Loops through a nested array of regexes and replacement pairs, and applies all replacements for which a match is found.\n *\n * @param {string}      word                        The word that may need to be modified.\n * @param {string[]}    listOfRegexAndReplacement   The array with the regexes and the replacements.\n *\n * @returns {string} The modified word.\n */\nexport function applyAllReplacements( word, listOfRegexAndReplacement ) {\n\tlistOfRegexAndReplacement.forEach( function( setOfRegexAndReplacement ) {\n\t\tword = word.replace( new RegExp( setOfRegexAndReplacement[ 0 ] ), setOfRegexAndReplacement[ 1 ] );\n\t} );\n\treturn word;\n}\n"]}