{"version":3,"sources":["../../../../src/morphology/morphoHelpers/flattenSortLength.js"],"names":["flattenSortLength","dataWords","allWords","Object","values","sort","a","b","length","localeCompare"],"mappings":";;;;;QASgBA,iB,GAAAA,iB;;AAThB;;AAEA;;;;;;;AAOO,SAASA,iBAAT,CAA4BC,SAA5B,EAAwC;AAC9C,QAAMC,WAAW,uBAASC,OAAOC,MAAP,CAAeH,SAAf,CAAT,CAAjB;;AAEA,SAAOC,SAASG,IAAT,CAAe,CAAEC,CAAF,EAAKC,CAAL,KAAYA,EAAEC,MAAF,GAAWF,EAAEE,MAAb,IAAuBF,EAAEG,aAAF,CAAiBF,CAAjB,CAAlD,CAAP;AACA","file":"flattenSortLength.js","sourcesContent":["import { flatten } from \"lodash-es\";\n\n/**\n * Returns combined list of strings/words, sorted by length (descending).\n *\n * @param {Object} dataWords The words data that is going to be sorted.\n *\n * @returns {Array<string>} All words, sorted by length (descending).\n */\nexport function flattenSortLength( dataWords ) {\n\tconst allWords = flatten( Object.values( dataWords ) );\n\n\treturn allWords.sort( ( a, b ) => b.length - a.length || a.localeCompare( b ) );\n}\n"]}