{"version":3,"sources":["../../../../src/morphology/morphoHelpers/exceptionListHelpers.js"],"names":["checkIfWordEndingIsOnExceptionList","checkIfWordIsOnVerbExceptionList","checkExceptionListWithTwoStems","word","exceptionList","i","length","endsWith","compoundVerbPrefixes","prefixes","foundPrefix","find","prefix","startsWith","stemmedWordWithoutPrefix","slice","includes","exceptionListWithTwoStems","stemSet","foundStem","stemWord","precedingLexicalMaterial"],"mappings":";;;;;QAUgBA,kC,GAAAA,kC;QAkBAC,gC,GAAAA,gC;QAyBAC,8B,GAAAA,8B;;AArDhB;;AAEA;;;;;;;;AAQO,SAASF,kCAAT,CAA6CG,IAA7C,EAAmDC,aAAnD,EAAmE;AACzE,MAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAID,cAAcE,MAAnC,EAA2CD,GAA3C,EAAiD;AAChD,MAAKF,KAAKI,QAAL,CAAeH,cAAeC,CAAf,CAAf,CAAL,EAA2C;AAC1C,UAAO,IAAP;AACA;AACD;AACD,QAAO,KAAP;AACA;;AAED;;;;;;;;;AASO,SAASJ,gCAAT,CAA2CE,IAA3C,EAAiDC,aAAjD,EAAgEI,oBAAhE,EAAuF;AAC7F,OAAMC,WAAW,0CAAmBD,oBAAnB,CAAjB;;AAEA;AACA,OAAME,cAAcD,SAASE,IAAT,CAAeC,UAAUT,KAAKU,UAAL,CAAiBD,MAAjB,CAAzB,CAApB;AACA,KAAIE,2BAA2B,EAA/B;;AAEA,KAAK,OAAQJ,WAAR,KAA0B,QAA/B,EAA0C;AACzCI,6BAA2BX,KAAKY,KAAL,CAAYL,YAAYJ,MAAxB,CAA3B;AACA;AACA,MAAKQ,yBAAyBR,MAAzB,GAAkC,CAAvC,EAA2C;AAC1CH,UAAOW,wBAAP;AACA;AACD;;AAED,QAAOV,cAAcY,QAAd,CAAwBb,IAAxB,CAAP;AACA;;AAED;;;;;;;AAOO,SAASD,8BAAT,CAAyCe,yBAAzC,EAAoEd,IAApE,EAA2E;AACjF,MAAM,MAAMe,OAAZ,IAAuBD,yBAAvB,EAAmD;AAClD,QAAME,YAAaD,QAAQP,IAAR,CAAcS,YAAYjB,KAAKI,QAAL,CAAea,QAAf,CAA1B,CAAnB;AACA,MAAKD,SAAL,EAAiB;AAChB,SAAME,2BAA2BlB,KAAKY,KAAL,CAAY,CAAZ,EAAeZ,KAAKG,MAAL,GAAca,UAAUb,MAAvC,CAAjC;;AAEA,UAAOe,2BAA2BH,QAAS,CAAT,CAAlC;AACA;AACD;AACD","file":"exceptionListHelpers.js","sourcesContent":["import { flattenSortLength } from \"../morphoHelpers/flattenSortLength\";\n\n/**\n * Checks whether the word ends in one of the words in an exception list that is a simple array.\n *\n * @param {string}\t    word            The word to check.\n * @param {string[]}\texceptionList\tThe list of exceptions.\n *\n * @returns {boolean}\tWhether the checked word ends in one of the words in the exception list.\n */\nexport function checkIfWordEndingIsOnExceptionList( word, exceptionList ) {\n\tfor ( let i = 0; i < exceptionList.length; i++ ) {\n\t\tif ( word.endsWith( exceptionList[ i ] ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Checks whether a word is on a verb exception list. Before checking the list, checks whether the word has a verb prefix\n * and if it does, removes it.\n *\n * @param {string}\t \tword\t\t\t\t\tThe word to check.\n * @param {string[]}\texceptionList\t\t\tThe list of exceptions\n * @param {Object}\t\tcompoundVerbPrefixes\tThe list of separable and inseparable verb prefixes\n * @returns {boolean}\tWhether the word was found on the exception list or not\n */\nexport function checkIfWordIsOnVerbExceptionList( word, exceptionList, compoundVerbPrefixes ) {\n\tconst prefixes = flattenSortLength( compoundVerbPrefixes );\n\n\t// Check whether the inputted word starts with one of the compound prefixes\n\tconst foundPrefix = prefixes.find( prefix => word.startsWith( prefix ) );\n\tlet stemmedWordWithoutPrefix = \"\";\n\n\tif ( typeof( foundPrefix ) === \"string\" ) {\n\t\tstemmedWordWithoutPrefix = word.slice( foundPrefix.length );\n\t\t// At least 3 characters left after prefix deletion so that e.g. \"be\" is not treated as a prefix if found in the word \"berg\".\n\t\tif ( stemmedWordWithoutPrefix.length > 2 ) {\n\t\t\tword = stemmedWordWithoutPrefix;\n\t\t}\n\t}\n\n\treturn exceptionList.includes( word );\n}\n\n/**\n * Checks whether the word ends in one of the words in an exception list with two stems.\n *\n * @param {Array} exceptionListWithTwoStems The exception list with two stems\n * @param {string} word\tThe word to check\n * @returns {string} The stem\n */\nexport function checkExceptionListWithTwoStems( exceptionListWithTwoStems, word ) {\n\tfor ( const stemSet of exceptionListWithTwoStems ) {\n\t\tconst foundStem =  stemSet.find( stemWord => word.endsWith( stemWord ) );\n\t\tif ( foundStem ) {\n\t\t\tconst precedingLexicalMaterial = word.slice( 0, word.length - foundStem.length );\n\n\t\t\treturn precedingLexicalMaterial + stemSet[ 0 ];\n\t\t}\n\t}\n}\n"]}