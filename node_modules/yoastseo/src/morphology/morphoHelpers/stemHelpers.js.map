{"version":3,"sources":["../../../../src/morphology/morphoHelpers/stemHelpers.js"],"names":["removeSuffixesFromFullForm","removeSuffixFromFullForm","exceptions","suffixes","word","i","length","startsWith","suffixRetrieved","substring","j","slice","suffix","endsWith"],"mappings":";;;;;QASgBA,0B,GAAAA,0B;QAsBAC,wB,GAAAA,wB;AA/BhB;;;;;;;;;AASO,SAASD,0BAAT,CAAqCE,UAArC,EAAiDC,QAAjD,EAA2DC,IAA3D,EAAkE;AACxE,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIH,WAAWI,MAAhC,EAAwCD,GAAxC,EAA8C;AAC7C,QAAKD,KAAKG,UAAL,CAAiBL,WAAYG,CAAZ,CAAjB,CAAL,EAA0C;AACzC,YAAMG,kBAAkBJ,KAAKK,SAAL,CAAgBP,WAAYG,CAAZ,EAAgBC,MAAhC,CAAxB;AACA,WAAM,IAAII,IAAI,CAAd,EAAiBA,IAAIP,SAASG,MAA9B,EAAsCI,GAAtC,EAA4C;AAC3C,YAAKP,SAAUO,CAAV,MAAkBF,eAAvB,EAAyC;AACxC,iBAAOJ,KAAKO,KAAL,CAAY,CAAZ,EAAe,CAACH,gBAAgBF,MAAhC,CAAP;AACA;AACD;AACD;AACD;AACD;;AAED;;;;;;;;;AASO,SAASL,wBAAT,CAAmCC,UAAnC,EAA+CU,MAA/C,EAAuDR,IAAvD,EAA8D;AACpE,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIH,WAAWI,MAAhC,EAAwCD,GAAxC,EAA8C;AAC7C,QAAKD,KAAKS,QAAL,CAAeX,WAAYG,CAAZ,CAAf,CAAL,EAAwC;AACvC,aAAOD,KAAKO,KAAL,CAAY,CAAZ,EAAe,CAACC,OAAON,MAAvB,CAAP;AACA;AACD;AACD","file":"stemHelpers.js","sourcesContent":["/**\n * Checks whether the word is started with one of the words in a given list of exceptions\n * and ends in one of the suffixes in a given suffixes list. If so, deletes the suffix.\n *\n * @param {string[]}    exceptions  The exception list.\n * @param {string[]}    suffixes      The suffixes that needs to be deleted.\n * @param {string}      word        The word to check.\n * @returns {string}\tThe stemmed word.\n */\nexport function removeSuffixesFromFullForm( exceptions, suffixes, word ) {\n\tfor ( let i = 0; i < exceptions.length; i++ ) {\n\t\tif ( word.startsWith( exceptions[ i ] ) ) {\n\t\t\tconst suffixRetrieved = word.substring( exceptions[ i ].length );\n\t\t\tfor ( let j = 0; j < suffixes.length; j++ ) {\n\t\t\t\tif ( suffixes[ j ] === suffixRetrieved ) {\n\t\t\t\t\treturn word.slice( 0, -suffixRetrieved.length );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Checks whether the word is in a given list of exceptions and if so, deletes a given suffix.\n *\n * @param {string[]}    exceptions  The exception list.\n * @param {string}      suffix      The suffix that needs to be deleted.\n * @param {string}      word        The word to check.\n *\n * @returns {string} The stemmed word.\n */\nexport function removeSuffixFromFullForm( exceptions, suffix, word ) {\n\tfor ( let i = 0; i < exceptions.length; i++ ) {\n\t\tif ( word.endsWith( exceptions[ i ] ) ) {\n\t\t\treturn word.slice( 0, -suffix.length );\n\t\t}\n\t}\n}\n"]}