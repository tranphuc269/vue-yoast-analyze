{"version":3,"sources":["../../../../src/morphology/swedish/stem.js"],"names":["stem","getRegions","word","morphologyData","match","RegExp","externalStemmer","regexR1region","r1","index","slice","rest","length","removeSuffixes1a","regions","regexSuffixes1a","removeSuffixS1b","regexSuffixes1b","removeSuffixStep2","regexSuffixes2","removeSuffixStep3","regexSuffixes3a","regexSuffixes3b","wordAfterStep1a","wordAfterStep1b"],"mappings":";;;;;kBAsIwBA,I;AAtIxB;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;AAQA,MAAMC,aAAa,SAAbA,UAAa,CAAUC,IAAV,EAAgBC,cAAhB,EAAiC;AACnD,QAAMC,QAAQF,KAAKE,KAAL,CAAY,IAAIC,MAAJ,CAAYF,eAAeG,eAAf,CAA+BC,aAA3C,CAAZ,CAAd;AACA,MAAIC,KAAK,EAAT;AACA,MAAKJ,SAASA,MAAO,CAAP,CAAd,EAA2B;AAC1BI,SAAKJ,MAAO,CAAP,CAAL;AACA,QAAKA,MAAMK,KAAN,GAAc,CAAd,GAAkB,CAAvB,EAA2B;AAC1BD,WAAKN,KAAKQ,KAAL,CAAY,CAAZ,CAAL;AACA;AACD;AACD,SAAO;AACNF,MADM;AAENG,UAAMT,KAAKQ,KAAL,CAAY,CAAZ,EAAeR,KAAKU,MAAL,GAAcJ,GAAGI,MAAhC;AAFA,GAAP;AAIA,CAbD;;AAeA;;;;;;;;;;;AAWA,MAAMC,mBAAmB,SAAnBA,gBAAmB,CAAUX,IAAV,EAAgBY,OAAhB,EAAyBX,cAAzB,EAA0C;AAClE,QAAMK,KAAKM,QAAQN,EAAnB;AACA,MAAK,CAAEA,EAAP,EAAY;AACX,WAAON,IAAP;AACA;AACD,QAAMa,kBAAkB,IAAIV,MAAJ,CAAYF,eAAeG,eAAf,CAA+BS,eAA3C,CAAxB;AACA,QAAMX,QAAQI,GAAGJ,KAAH,CAAUW,eAAV,CAAd;AACA,SAAOX,QAAQU,QAAQH,IAAR,GAAeH,GAAGE,KAAH,CAAU,CAAV,EAAaN,MAAMK,KAAnB,CAAvB,GAAoDP,IAA3D;AACA,CARD;;AAUA;;;;;;;;;;AAUA,MAAMc,kBAAkB,SAAlBA,eAAkB,CAAUd,IAAV,EAAgBY,OAAhB,EAAyBX,cAAzB,EAA0C;AACjE,MAAKW,QAAQN,EAAR,IAAcN,KAAKE,KAAL,CAAY,IAAIC,MAAJ,CAAYF,eAAeG,eAAf,CAA+BW,eAA3C,CAAZ,CAAnB,EAAgG;AAC/F,WAAOf,KAAKQ,KAAL,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP;AACA;AACD,SAAOR,IAAP;AACA,CALD;;AAOA;;;;;;;;;;AAUA,MAAMgB,oBAAoB,SAApBA,iBAAoB,CAAUhB,IAAV,EAAgBY,OAAhB,EAAyBX,cAAzB,EAA0C;AACnE,QAAMK,KAAKM,QAAQN,EAAnB;AACA,MAAKA,MAAMA,GAAGJ,KAAH,CAAU,IAAIC,MAAJ,CAAYF,eAAeG,eAAf,CAA+Ba,cAA3C,CAAV,CAAX,EAAqF;AACpF,WAAOjB,KAAKQ,KAAL,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP;AACA;AACD,SAAOR,IAAP;AACA,CAND;;AAQA;;;;;;;;;;;AAWA,MAAMkB,oBAAoB,SAApBA,iBAAoB,CAAUlB,IAAV,EAAgBY,OAAhB,EAAyBX,cAAzB,EAA0C;AACnE,QAAMK,KAAKM,QAAQN,EAAnB;AACA,MAAKA,EAAL,EAAU;AACT,QAAKA,GAAGJ,KAAH,CAAU,IAAIC,MAAJ,CAAYF,eAAeG,eAAf,CAA+Be,eAA3C,CAAV,CAAL,EAAgF;AAC/E,aAAOnB,KAAKQ,KAAL,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP;AACA;AACD,UAAMN,QAAQI,GAAGJ,KAAH,CAAU,IAAIC,MAAJ,CAAYF,eAAeG,eAAf,CAA+BgB,eAA3C,CAAV,CAAd;AACA,WAAOlB,QAAQU,QAAQH,IAAR,GAAeH,GAAGE,KAAH,CAAU,CAAV,EAAaN,MAAMK,KAAnB,CAAvB,GAAoDP,IAA3D;AACA;AACD,SAAOA,IAAP;AACA,CAVD;;AAYA;;;;;;;AAOe,SAASF,IAAT,CAAeE,IAAf,EAAqBC,cAArB,EAAsC;AACpD,MAAIW,UAAUb,WAAYC,IAAZ,EAAkBC,cAAlB,CAAd;AACA;AACA,QAAMoB,kBAAkBV,iBAAkBX,IAAlB,EAAwBY,OAAxB,EAAiCX,cAAjC,CAAxB;AACA,QAAMqB,kBAAkBR,gBAAiBd,IAAjB,EAAuBY,OAAvB,EAAgCX,cAAhC,CAAxB;;AAEA;AACAD,SAAOqB,gBAAgBX,MAAhB,GAAyBY,gBAAgBZ,MAAzC,GAAkDW,eAAlD,GAAoEC,eAA3E;AACAV,YAAUb,WAAYC,IAAZ,EAAkBC,cAAlB,CAAV;;AAEA;AACAD,SAAOgB,kBAAmBhB,IAAnB,EAAyBY,OAAzB,EAAkCX,cAAlC,CAAP;AACAW,YAAUb,WAAYC,IAAZ,EAAkBC,cAAlB,CAAV;;AAEA;AACAD,SAAOkB,kBAAmBlB,IAAnB,EAAyBY,OAAzB,EAAkCX,cAAlC,CAAP;AACA,SAAOD,IAAP;AACA","file":"stem.js","sourcesContent":["/*\n * MIT License\n *\n * Copyright (c) 2017, Dogan Yazar\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * https://github.com/NaturalNode/natural/blob/master/lib/natural/stemmers/porter_stemmer_sv.js\n *\n */\n\n/**\n * Determines the start index of the R1 region. R1 is the region after the first non-vowel following a vowel. It should include at least 3 letters.\n *\n * @param {string} word             The word for which to determine the R1 region.\n * @param {Object} morphologyData   The morphology data for Swedish.\n *\n * @returns {{rest: string, r1: string}}   The string within the R1 region and the rest string of the word.\n */\nconst getRegions = function( word, morphologyData ) {\n\tconst match = word.match( new RegExp( morphologyData.externalStemmer.regexR1region ) );\n\tlet r1 = \"\";\n\tif ( match && match[ 1 ] ) {\n\t\tr1 = match[ 1 ];\n\t\tif ( match.index + 2 < 3 ) {\n\t\t\tr1 = word.slice( 3 );\n\t\t}\n\t}\n\treturn {\n\t\tr1,\n\t\trest: word.slice( 0, word.length - r1.length ),\n\t};\n};\n\n/**\n * Searches from the longest among the following suffixes: a, arna, erna, heterna, orna, ad, e, ade, ande, arne, are, aste, en,\n * anden, aren, heten, ern, ar, er, heter, or, as, arnas, ernas, ornas, es, ades, andes, ens, arens, hetens, erns, at, andet, het, ast\n * and stems the suffix if in R1.\n *\n * @param {string} word             The word to check for the suffix.\n * @param {Object} regions          The object that contains the string within the R1 region and the rest string of the word.\n * @param {Object} morphologyData   The morphology data for Swedish.\n *\n * @returns {string} The word without the suffix.\n */\nconst removeSuffixes1a = function( word, regions, morphologyData ) {\n\tconst r1 = regions.r1;\n\tif ( ! r1 ) {\n\t\treturn word;\n\t}\n\tconst regexSuffixes1a = new RegExp( morphologyData.externalStemmer.regexSuffixes1a );\n\tconst match = r1.match( regexSuffixes1a );\n\treturn match ? regions.rest + r1.slice( 0, match.index ) : word;\n};\n\n/**\n * Checks if a word ends in -s which is preceded by one of these letters: b, c, d, f, g, h, k, l, m, n, o, p, r, t, v, or y\n * and also has an R1. If it does, -s is stemmed.\n *\n * @param {string} word             The word to check for the suffix.\n * @param {Object} regions          The object that contains the string within the R1 region and the rest string of the word.\n * @param {Object} morphologyData   The morphology data for Swedish.\n *\n * @returns {Object} The word without the suffix.\n */\nconst removeSuffixS1b = function( word, regions, morphologyData ) {\n\tif ( regions.r1 && word.match( new RegExp( morphologyData.externalStemmer.regexSuffixes1b ) ) ) {\n\t\treturn word.slice( 0, -1 );\n\t}\n\treturn word;\n};\n\n/**\n * Checks if a word ends in one of these suffixes:  -dd, -gd, -nn, -dt, -gt, -kt, -tt.\n * If it does, the suffix is stemmed.\n *\n * @param {string} word             The word to check for the suffix.\n * @param {Object} regions          The object that contains the string within the R1 region and the rest string of the word.\n * @param {Object} morphologyData   The morphology data for Swedish.\n *\n * @returns {string}    The word without the suffix.\n */\nconst removeSuffixStep2 = function( word, regions, morphologyData ) {\n\tconst r1 = regions.r1;\n\tif ( r1 && r1.match( new RegExp( morphologyData.externalStemmer.regexSuffixes2 ) ) ) {\n\t\treturn word.slice( 0, -1 );\n\t}\n\treturn word;\n};\n\n/**\n * Searches the following suffixes in R1, and performs the action indicated:\n * (a) delete -lig, -ig, -els\n * (b) remove t ending from -lÃ¶st or -fullt\n *\n * @param {string} word             The word to check for the suffix.\n * @param {Object} regions          The object that contains the string within the R1 region and the rest string of the word.\n * @param {Object} morphologyData   The morphology data for Swedish.\n *\n * @returns {string} The index of the suffix and the kind of suffix used.\n */\nconst removeSuffixStep3 = function( word, regions, morphologyData ) {\n\tconst r1 = regions.r1;\n\tif ( r1 ) {\n\t\tif ( r1.match( new RegExp( morphologyData.externalStemmer.regexSuffixes3a ) ) ) {\n\t\t\treturn word.slice( 0, -1 );\n\t\t}\n\t\tconst match = r1.match( new RegExp( morphologyData.externalStemmer.regexSuffixes3b ) );\n\t\treturn match ? regions.rest + r1.slice( 0, match.index ) : word;\n\t}\n\treturn word;\n};\n\n/**\n * Stems a Swedish word.\n *\n * @param {string} word             The word to stem.\n * @param {Object} morphologyData   The morphology data for Swedish.\n * @returns {string}    The stemmed word.\n */\nexport default function stem( word, morphologyData ) {\n\tlet regions = getRegions( word, morphologyData );\n\t// Search and remove the suffixes from step 1, e.g. -arnas, -ernas, -ornas, -es, -ades, -andes\n\tconst wordAfterStep1a = removeSuffixes1a( word, regions, morphologyData );\n\tconst wordAfterStep1b = removeSuffixS1b( word, regions, morphologyData );\n\n\t// Compare length of word from step 1 (a and b) and return the shorter word\n\tword = wordAfterStep1a.length < wordAfterStep1b.length ? wordAfterStep1a : wordAfterStep1b;\n\tregions = getRegions( word, morphologyData );\n\n\t// Search and remove the suffixes from step 2, e.g. -dd, -gd, -nn, -dt, -gt, -kt, -tt.\n\tword = removeSuffixStep2( word, regions, morphologyData );\n\tregions = getRegions( word, morphologyData );\n\n\t// Search and remove the suffixes from step 3, e.g. -lig, -ig, -els\n\tword = removeSuffixStep3( word, regions, morphologyData );\n\treturn word;\n}\n"]}