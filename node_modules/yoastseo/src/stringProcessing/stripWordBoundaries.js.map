{"version":3,"sources":["../../../src/stringProcessing/stripWordBoundaries.js"],"names":["wordBoundary","wordBoundaryStart","RegExp","wordBoundaryEnd","stripWordBoundariesStart","text","replace","stripWordBoundariesEnd","stripWordBoundariesEverywhere"],"mappings":";;;;;AAAA;;;;;;;AAOA,MAAMA,eAAe,wEAArB;AACA,MAAMC,oBAAoB,IAAIC,MAAJ,CAAY,OAAOF,YAAP,GAAsB,IAAlC,EAAwC,IAAxC,CAA1B;AACA,MAAMG,kBAAkB,IAAID,MAAJ,CAAY,MAAMF,YAAN,GAAqB,KAAjC,EAAwC,IAAxC,CAAxB;;AAEA;;;;;;;AAOA,MAAMI,2BAA2B,SAA3BA,wBAA2B,CAAUC,IAAV,EAAiB;AACjD;AACAA,SAAOA,KAAKC,OAAL,CAAcL,iBAAd,EAAiC,EAAjC,CAAP;;AAEA,SAAOI,IAAP;AACA,CALD;;AAOA;;;;;;;AAOA,MAAME,yBAAyB,SAAzBA,sBAAyB,CAAUF,IAAV,EAAiB;AAC/C;AACAA,SAAOA,KAAKC,OAAL,CAAcH,eAAd,EAA+B,EAA/B,CAAP;;AAEA,SAAOE,IAAP;AACA,CALD;;AAOA;;;;;;;AAOA,MAAMG,gCAAgC,SAAhCA,6BAAgC,CAAUH,IAAV,EAAiB;AACtD;AACAA,SAAOA,KAAKC,OAAL,CAAcL,iBAAd,EAAiC,EAAjC,CAAP;AACAI,SAAOA,KAAKC,OAAL,CAAcH,eAAd,EAA+B,EAA/B,CAAP;;AAEA,SAAOE,IAAP;AACA,CAND;;QASCD,wB,GAAAA,wB;QACAG,sB,GAAAA,sB;QACAC,6B,GAAAA,6B;kBAGc;AACdJ,4BAA0BA,wBADZ;AAEdG,0BAAwBA,sBAFV;AAGdC,iCAA+BA;AAHjB,C","file":"stripWordBoundaries.js","sourcesContent":["/*\n * \\u00a0 - No-break space\n * \\u06d4 - Urdu full stop\n * \\u061f - Arabic question mark\n * \\u060C - Arabic comma\n * \\u061B - Arabic semicolon\n */\nconst wordBoundary = \"[ \\\\u00a0\\\\u06d4\\\\u061f\\\\u060C\\\\u061B \\\\n\\\\r\\\\t.,'()\\\"+\\\\-;!?:/»«‹›<>]\";\nconst wordBoundaryStart = new RegExp( \"^(\" + wordBoundary + \"+)\", \"ig\" );\nconst wordBoundaryEnd = new RegExp( \"(\" + wordBoundary + \"+$)\", \"ig\" );\n\n/**\n * Strip word boundary markers from text in the beginning\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without double word boundary markers.\n */\nconst stripWordBoundariesStart = function( text ) {\n\t// Remove first character if word boundary\n\ttext = text.replace( wordBoundaryStart, \"\" );\n\n\treturn text;\n};\n\n/**\n * Strip word boundary markers from text in the end\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without double word boundary markers.\n */\nconst stripWordBoundariesEnd = function( text ) {\n\t// Remove last character if word boundary\n\ttext = text.replace( wordBoundaryEnd, \"\" );\n\n\treturn text;\n};\n\n/**\n * Strip word boundary markers from text in the beginning and in the end\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without word boundary markers.\n */\nconst stripWordBoundariesEverywhere = function( text ) {\n\t// Remove first/last character if word boundary\n\ttext = text.replace( wordBoundaryStart, \"\" );\n\ttext = text.replace( wordBoundaryEnd, \"\" );\n\n\treturn text;\n};\n\nexport {\n\tstripWordBoundariesStart,\n\tstripWordBoundariesEnd,\n\tstripWordBoundariesEverywhere,\n};\n\nexport default {\n\tstripWordBoundariesStart: stripWordBoundariesStart,\n\tstripWordBoundariesEnd: stripWordBoundariesEnd,\n\tstripWordBoundariesEverywhere: stripWordBoundariesEverywhere,\n};\n"]}