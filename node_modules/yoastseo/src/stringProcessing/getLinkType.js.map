{"version":3,"sources":["../../../src/stringProcessing/getLinkType.js"],"names":["text","url","anchorUrl","urlHelper","getFromAnchorTag","protocol","getProtocol","protocolIsHttpScheme","isRelativeFragmentURL","isInternalLink","getHostname"],"mappings":";;;;;;kBAWe,UAAUA,IAAV,EAAgBC,GAAhB,EAAsB;AACpC,OAAMC,YAAYC,cAAUC,gBAAV,CAA4BJ,IAA5B,CAAlB;;AAEA;;;;;AAKA,OAAMK,WAAWF,cAAUG,WAAV,CAAuBJ,SAAvB,CAAjB;AACA,KAAKG,YAAY,CAAEF,cAAUI,oBAAV,CAAgCF,QAAhC,CAAd,IACJF,cAAUK,qBAAV,CAAiCN,SAAjC,CADD,EACgD;AAC/C,SAAO,OAAP;AACA;;AAED,KAAKC,cAAUM,cAAV,CAA0BP,SAA1B,EAAqCC,cAAUO,WAAV,CAAuBT,GAAvB,CAArC,CAAL,EAA2E;AAC1E,SAAO,UAAP;AACA;;AAED,QAAO,UAAP;AACA,C;;AA5BD","file":"getLinkType.js","sourcesContent":["/** @module stringProcess/getLinkType */\n\nimport urlHelper from \"./url\";\n\n/**\n * Determines the type of link.\n *\n * @param {string} text String with anchor tag.\n * @param {string} url URL to match against.\n * @returns {string} The link type (other, external or internal).\n */\nexport default function( text, url ) {\n\tconst anchorUrl = urlHelper.getFromAnchorTag( text );\n\n\t/**\n\t * A link is \"Other\" if:\n\t * - The protocol is neither null, nor http, nor https.\n\t * - The link is a relative fragment URL (starts with #), because it won't navigate to another page.\n\t */\n\tconst protocol = urlHelper.getProtocol( anchorUrl );\n\tif ( protocol && ! urlHelper.protocolIsHttpScheme( protocol ) ||\n\t\turlHelper.isRelativeFragmentURL( anchorUrl ) ) {\n\t\treturn \"other\";\n\t}\n\n\tif ( urlHelper.isInternalLink( anchorUrl, urlHelper.getHostname( url ) ) ) {\n\t\treturn \"internal\";\n\t}\n\n\treturn \"external\";\n}\n"]}