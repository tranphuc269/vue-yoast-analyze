{"version":3,"sources":["../../../src/stringProcessing/getAnchorsFromText.js"],"names":["text","matches","match"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAiB;AAC/B,KAAIC,OAAJ;;AAEA;;;;;;;;;;;;AAYAA,WAAUD,KAAKE,KAAL,CAAY,sDAAZ,CAAV;;AAEA,KAAKD,YAAY,IAAjB,EAAwB;AACvBA,YAAU,EAAV;AACA;;AAED,QAAOA,OAAP;AACA,C","file":"getAnchorsFromText.js","sourcesContent":["/** @module stringProcessing/getAnchorsFromText */\n\n/**\n * Check for anchors in the textstring and returns them in an array.\n *\n * @param {String} text The text to check for matches.\n * @returns {Array} The matched links in text.\n */\nexport default function( text ) {\n\tvar matches;\n\n\t/*\n\t  * Regex matches everything between <a> and </a>.\n\t  *\n\t  * There must be:\n\t  * - at least one whitespace after the starting `<a`, otherwise it matches `<abbr` tags.\n\t  * - followed by at least one not `>`, to match any attributes that are given.\n\t  *   This could be one or zero (`*`), but an anchor tag without an `href` attribute does not make sense.\n\t  *   The regex could be more precise here, by checking for the `href`, but this is less complex.\n\t  * - losing tag of the opening tag `>`.\n\t  * - content of the anchor tag. Any character, including line separators (`[\\n\\r\\u2028\\u2029]`).\n\t  * - the closing anchor tag.\n\t */\n\tmatches = text.match( /<a[\\s]+(?:[^>]+)>((?:.|[\\n\\r\\u2028\\u2029])*?)<\\/a>/ig );\n\n\tif ( matches === null ) {\n\t\tmatches = [];\n\t}\n\n\treturn matches;\n}\n"]}