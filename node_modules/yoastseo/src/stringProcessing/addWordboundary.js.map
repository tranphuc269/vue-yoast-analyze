{"version":3,"sources":["../../../src/stringProcessing/addWordboundary.js"],"names":["matchString","positiveLookAhead","extraWordBoundary","locale","wordBoundary","wordBoundaryStart","wordBoundaryEnd"],"mappings":";;;;;;kBAce,UAAUA,WAAV,EAAuBC,oBAAoB,KAA3C,EAAkDC,oBAAoB,EAAtE,EAA0EC,SAAS,EAAnF,EAAwF;AACtG,MAAIC,YAAJ,EAAkBC,iBAAlB,EAAqCC,eAArC;;AAEA,MAAKH,WAAW,OAAhB,EAA0B;AACzBC,mBAAe,qDAAqDF,iBAArD,GAAyE,IAAxF;AACA,GAFD,MAEO;AACN;;;;;;;AAOAE,mBAAe,oFAAoFF,iBAApF,GAAwG,IAAvH;AACA;;AAEDG,sBAAoB,QAAQD,YAAR,GAAuB,SAA3C;AACA,MAAKH,iBAAL,EAAyB;AACxBK,sBAAkB,YAAYF,YAAZ,GAA2B,iBAA3B,GAA+CA,YAA/C,GAA8D,MAAhF;AACA,GAFD,MAEO;AACNE,sBAAkB,SAASF,YAAT,GAAwB,gBAAxB,GAA2CA,YAA3C,GAA0D,MAA5E;AACA;;AAED,SAAOC,oBAAoBL,WAApB,GAAkCM,eAAzC;AACA,C","file":"addWordboundary.js","sourcesContent":["/** @module stringProcessing/addWordboundary */\n/* eslint-disable no-useless-escape */\n\n/**\n * Returns a string that can be used in a regex to match a matchString with word boundaries.\n *\n * @param {string}  matchString                 The string to generate a regex string for.\n * @param {boolean} [positiveLookAhead=false]   Boolean indicating whether or not to include a positive look ahead\n * for the word boundaries at the end.\n * @param {string} [extraWordBoundary=\"\"]       Extra characters to match a word boundary on.\n * @param {string} [locale=\"\"]                  The locale used to determine the word boundary.\n *\n * @returns {string} A regex string that matches the matchString with word boundaries.\n */\nexport default function( matchString, positiveLookAhead = false, extraWordBoundary = \"\", locale = \"\" ) {\n\tvar wordBoundary, wordBoundaryStart, wordBoundaryEnd;\n\n\tif ( locale === \"id_ID\" ) {\n\t\twordBoundary = \"[ \\\\u00a0 \\\\n\\\\r\\\\t\\.,\\(\\)”“〝〞〟‟„\\\"+;!¡?¿:\\/»«‹›\" + extraWordBoundary + \"<>\";\n\t} else {\n\t\t/*\n\t\t * \\u00a0 - no-break space\n         * \\u06d4 - Urdu full stop\n         * \\u061f - Arabic question mark\n         * \\u060C - Arabic comma\n         * \\u061B - Arabic semicolon\n         */\n\t\twordBoundary = \"[ \\\\u00a0\\\\u06d4\\\\u061f\\\\u060C\\\\u061B \\\\n\\\\r\\\\t\\.,\\(\\)”“〝〞〟‟„\\\"+\\\\-;!¡?¿:\\/»«‹›\" + extraWordBoundary + \"<>\";\n\t}\n\n\twordBoundaryStart = \"(^|\" + wordBoundary + \"'‘’‛`])\";\n\tif ( positiveLookAhead ) {\n\t\twordBoundaryEnd = \"($|((?=\" + wordBoundary + \"]))|((['‘’‛`])(\" + wordBoundary + \"])))\";\n\t} else {\n\t\twordBoundaryEnd = \"($|(\" + wordBoundary + \"])|((['‘’‛`])(\" + wordBoundary + \"])))\";\n\t}\n\n\treturn wordBoundaryStart + matchString + wordBoundaryEnd;\n}\n"]}