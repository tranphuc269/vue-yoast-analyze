{"version":3,"sources":["../../../../../src/researches/french/passiveVoice/FrenchParticiple.js"],"names":["exceptionsParticiplesAdjectivesVerbs","adjectivesVerbs","exceptionsParticiplesNounsVowel","nounsStartingWithVowel","exceptionsParticiplesNounsConsonant","nounsStartingWithConsonant","exceptionsParticiplesOthers","others","FrenchParticiple","participle","sentencePart","attributes","Participle","call","checkException","require","inherits","checkIrregular","getType","prototype","isPassive","getSentencePart","getParticiple","language","getLanguage","directPrecedenceException","precedenceException","isOnAdjectivesVerbsExceptionList","isOnNounsExceptionList","isOnOthersExceptionList","getExceptionsParticiplesAdjectivesVerbsRegexes","exceptionsParticiplesAdjectivesVerbsRegexes","exceptionParticiplesAdjectivesVerbs","push","RegExp","getExceptionsParticiplesNounsRegexes","exceptionsParticiplesNounsRegexes","exceptionParticipleNounVowel","exceptionParticipleNounConsonant","checkParticipleExceptionRegexes","participleExceptionRegexes","match","participleExceptionRegex","exceptionMatch","length","exceptionsParticiplesNouns"],"mappings":"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","file":"FrenchParticiple.js","sourcesContent":["import { forEach, includes, memoize } from \"lodash-es\";\n\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\nimport precedenceException from \"../../../stringProcessing/precedenceExceptionWithoutRegex\";\nimport Participle from \"../../../values/Participle\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException\";\nimport exceptionsParticiplesFactory from \"./exceptionsParticiples\";\n\nconst {\n\tadjectivesVerbs: exceptionsParticiplesAdjectivesVerbs,\n\tnounsStartingWithVowel: exceptionsParticiplesNounsVowel,\n\tnounsStartingWithConsonant: exceptionsParticiplesNounsConsonant,\n\tothers: exceptionsParticiplesOthers,\n} = exceptionsParticiplesFactory();\n\n/**\n * Creates an Participle object for the French language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar FrenchParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( FrenchParticiple, Participle );\n\n/**\n * Checks whether the participle is irregular.\n *\n * @returns {boolean} Returns true if the passive is irregular.\n */\nvar checkIrregular = function() {\n\tif ( this.getType() === \"irregular\" ) {\n\t\treturn true;\n\t}\n};\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nFrenchParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst language = this.getLanguage();\n\n\t// Only check precedence exceptions for irregular participles.\n\tif ( checkIrregular.call( this ) ) {\n\t\treturn ! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t\t! this.precedenceException( sentencePart, participle, language );\n\t}\n\t// Check precedence exceptions and exception lists for regular participles.\n\treturn ! this.isOnAdjectivesVerbsExceptionList() &&\n\t\t! this.isOnNounsExceptionList() &&\n\t\t! this.isOnOthersExceptionList() &&\n\t\t! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t! this.precedenceException( sentencePart, participle, language );\n};\n\n/**\n * Creates regexes to match adjective and verb participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all adjective and verb participle exceptions.\n */\nvar getExceptionsParticiplesAdjectivesVerbsRegexes = memoize( function() {\n\tconst exceptionsParticiplesAdjectivesVerbsRegexes = [];\n\tforEach( exceptionsParticiplesAdjectivesVerbs, function( exceptionParticiplesAdjectivesVerbs ) {\n\t\texceptionsParticiplesAdjectivesVerbsRegexes.push( new RegExp( \"^\" + exceptionParticiplesAdjectivesVerbs + \"(e|s|es)?$\", \"ig\" ) );\n\t} );\n\treturn exceptionsParticiplesAdjectivesVerbsRegexes;\n} );\n\n/**\n * Creates regexes to match noun participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all noun participle exceptions.\n */\nvar getExceptionsParticiplesNounsRegexes = memoize( function() {\n\tconst exceptionsParticiplesNounsRegexes = [];\n\n\t// Nouns starting with a vowel are checked with -s suffix and l' and d' prefixes.\n\tforEach( exceptionsParticiplesNounsVowel, function( exceptionParticipleNounVowel ) {\n\t\texceptionsParticiplesNounsRegexes.push( new RegExp( \"^(l'|d')?\" + exceptionParticipleNounVowel + \"(s)?$\", \"ig\" ) );\n\t} );\n\t// Nouns starting with a consonant are checked with -s suffix.\n\tforEach( exceptionsParticiplesNounsConsonant, function( exceptionParticipleNounConsonant ) {\n\t\texceptionsParticiplesNounsRegexes.push( new RegExp( \"^\" + exceptionParticipleNounConsonant + \"(s)?$\", \"ig\" ) );\n\t} );\n\n\treturn exceptionsParticiplesNounsRegexes;\n} );\n\n/**\n * Checks whether a given participle matches a list of regex exceptions.\n *\n * @param {Array} participleExceptionRegexes The array of regexes to check.\n * @returns {boolean} Returns true if the participle matches a regex.\n */\nvar checkParticipleExceptionRegexes = function( participleExceptionRegexes ) {\n\tvar participle = this.getParticiple();\n\tvar match = [];\n\n\tforEach( participleExceptionRegexes, function( participleExceptionRegex ) {\n\t\tvar exceptionMatch = participle.match( participleExceptionRegex );\n\t\tif ( exceptionMatch ) {\n\t\t\tmatch.push( exceptionMatch[ 0 ] );\n\t\t}\n\t} );\n\n\tif ( match.length > 0 ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Checks whether a found participle is in the exception list of adjectives and verbs.\n * These words are checked with e/s/es as possible suffixes.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of adjectives and verbs, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnAdjectivesVerbsExceptionList = function() {\n\tvar exceptionParticiplesAdjectivesVerbs = getExceptionsParticiplesAdjectivesVerbsRegexes();\n\treturn checkParticipleExceptionRegexes.call( this, exceptionParticiplesAdjectivesVerbs );\n};\n\n/**\n * Checks whether a found participle is in the exception list of nouns.\n * These words are checked with s as a possible suffix.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnNounsExceptionList = function() {\n\tvar exceptionsParticiplesNouns = getExceptionsParticiplesNounsRegexes();\n\treturn checkParticipleExceptionRegexes.call( this, exceptionsParticiplesNouns );\n};\n\n/**\n * Checks whether a found participle is in the exception list in the 'other' category.\n * If a word is on the list, it isn't a participle.\n * Irregular participles do not end in -é and therefore can't be on the list.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnOthersExceptionList = function() {\n\treturn includes( exceptionsParticiplesOthers, this.getParticiple() );\n};\n\nFrenchParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nFrenchParticiple.prototype.precedenceException = precedenceException;\n\nexport default FrenchParticiple;\n"]}