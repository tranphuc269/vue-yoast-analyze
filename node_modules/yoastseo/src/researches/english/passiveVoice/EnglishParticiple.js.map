{"version":3,"sources":["../../../../../src/researches/english/passiveVoice/EnglishParticiple.js"],"names":["nonVerbsEndingEd","irregularExclusionArray","EnglishParticiple","participle","sentencePart","attributes","Participle","call","checkException","require","inherits","prototype","isPassive","getSentencePart","getParticiple","language","getLanguage","isNonVerbEndingEd","hasRidException","directPrecedenceException","precedenceException","getType","auxiliaries","getAuxiliaries"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAJA,MAAMA,mBAAmB,gCAAzB;;;AAQA,IAAIC,0BAA0B,CAAE,KAAF,EAAS,MAAT,EAAiB,SAAjB,EAA4B,KAA5B,EAAmC,QAAnC,CAA9B;;AAEA;;;;;;;;;AASA,IAAIC,oBAAoB,SAApBA,iBAAoB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AACxEC,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBJ,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACAG,2BAAeD,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAE,QAAS,MAAT,EAAkBC,QAAlB,CAA4BR,iBAA5B,EAA+CI,oBAA/C;;AAEA;;;;;;AAMAJ,kBAAkBS,SAAlB,CAA4BC,SAA5B,GAAwC,YAAW;AAClD,QAAMR,eAAe,KAAKS,eAAL,EAArB;AACA,QAAMV,aAAa,KAAKW,aAAL,EAAnB;AACA,QAAMC,WAAW,KAAKC,WAAL,EAAjB;;AAEA,SAAQ,CAAE,KAAKC,iBAAL,EAAF,IACP,CAAE,KAAKC,eAAL,EADK,IAEP,CAAE,KAAKC,yBAAL,CAAgCf,YAAhC,EAA8CD,UAA9C,EAA0DY,QAA1D,CAFK,IAGP,CAAE,KAAKK,mBAAL,CAA0BhB,YAA1B,EAAwCD,UAAxC,EAAoDY,QAApD,CAHH;AAIA,CATD;;AAWA;;;;;;;AAOAb,kBAAkBS,SAAlB,CAA4BM,iBAA5B,GAAgD,YAAW;AAC1D,MAAK,KAAKI,OAAL,OAAmB,WAAxB,EAAsC;AACrC,WAAO,KAAP;AACA;AACD,SAAO,wBAAUrB,gBAAV,EAA4B,KAAKc,aAAL,EAA5B,CAAP;AACA,CALD;;AAOA;;;;;;;AAOAZ,kBAAkBS,SAAlB,CAA4BO,eAA5B,GAA8C,YAAW;AACxD,MAAK,KAAKJ,aAAL,OAAyB,KAA9B,EAAsC;AACrC,QAAIQ,cAAc,KAAKC,cAAL,EAAlB;AACA,WAAO,CAAE,uBAAS,4BAActB,uBAAd,EAAuCqB,WAAvC,CAAT,CAAT;AACA;AACD,SAAO,KAAP;AACA,CAND;;AAQApB,kBAAkBS,SAAlB,CAA4BQ,yBAA5B,GAAwDA,+CAAxD;;AAEAjB,kBAAkBS,SAAlB,CAA4BS,mBAA5B,GAAkDA,yCAAlD;;kBAEelB,iB","file":"EnglishParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport nonVerbsEndingEdFactory from \"./non-verb-ending-ed.js\";\nconst nonVerbsEndingEd = nonVerbsEndingEdFactory();\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\nimport precedenceException from \"../../../stringProcessing/precedenceExceptionWithoutRegex\";\n\nimport { includes } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\nimport { intersection } from \"lodash-es\";\n\nvar irregularExclusionArray = [ \"get\", \"gets\", \"getting\", \"got\", \"gotten\" ];\n\n/**\n * Creates an Participle object for the English language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar EnglishParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( EnglishParticiple, Participle );\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nEnglishParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst language = this.getLanguage();\n\n\treturn \t! this.isNonVerbEndingEd() &&\n\t\t! this.hasRidException() &&\n\t\t! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t! this.precedenceException( sentencePart, participle, language );\n};\n\n/**\n * Checks whether a found participle is in the nonVerbsEndingEd list.\n * If a word is in the nonVerbsEndingEd list, it isn't a participle.\n * Irregular participles do not end in -ed, and therefore cannot be in the nonVerbsEndingEd list.\n *\n * @returns {boolean} Returns true if it is in the nonVerbsEndingEd list, otherwise returns false.\n */\nEnglishParticiple.prototype.isNonVerbEndingEd = function() {\n\tif ( this.getType() === \"irregular\" ) {\n\t\treturn false;\n\t}\n\treturn includes( nonVerbsEndingEd, this.getParticiple() );\n};\n\n/**\n * Checks whether the participle is 'rid' in combination with 'get', 'gets', 'getting', 'got' or 'gotten'.\n * If this is true, the participle is not passive.\n *\n * @returns {boolean} Returns true if 'rid' is found in combination with a form of 'get'\n * otherwise returns false.\n */\nEnglishParticiple.prototype.hasRidException = function() {\n\tif ( this.getParticiple() === \"rid\" ) {\n\t\tvar auxiliaries = this.getAuxiliaries();\n\t\treturn ! isEmpty( intersection( irregularExclusionArray, auxiliaries ) );\n\t}\n\treturn false;\n};\n\nEnglishParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nEnglishParticiple.prototype.precedenceException = precedenceException;\n\nexport default EnglishParticiple;\n"]}