{"version":3,"sources":["../../../src/researches/getPassiveVoice.js"],"names":["paper","text","getText","locale","getLocale","language","sentences","map","sentence","Sentence","totalNumberSentences","length","morphologicalLanguages","includes","total","passives","getMorphologicalPassives","periphrasticLanguages","getPeriphrasticPassives","morphologicalAndPeriphrasticLanguages","getMorphologicalAndPeriphrasticPassive","passiveSentences","strippedSentence","getSentenceText","toLocaleLowerCase","setPassive","isPassive","push","sentenceParts","passive","sentencePart","getSentencePartText","getAuxiliaries","morphologicalSentences","periphrasticSentences","concat"],"mappings":"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","file":"getPassiveVoice.js","sourcesContent":["import getSentences from \"../stringProcessing/getSentences.js\";\nimport { stripFullTags as stripHTMLTags } from \"../stringProcessing/stripHTMLTags.js\";\nimport getLanguage from \"../helpers/getLanguage.js\";\nimport Sentence from \"../values/Sentence.js\";\n\nimport { forEach } from \"lodash-es\";\n\nimport isPassiveSentencePart from \"./passiveVoice/periphrastic/determinePassiveSentencePart.js\";\nimport isPassiveSentence from \"./passiveVoice/morphological/determinePassiveSentence.js\";\nimport getPeriphrasticSentencePartsDefault from \"./passiveVoice/periphrastic/getSentenceParts.js\";\nimport getPeriphrasticSentencePartsSplitOnStopwords from \"./passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js\";\n\nconst morphologicalLanguages = [ \"ru\", \"tr\", \"sv\", \"id\", \"ar\", \"he\", \"tr\" ];\nconst periphrasticLanguages = [ \"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"cn\", \"pl\" ];\nconst morphologicalAndPeriphrasticLanguages = [ \"hu\" ];\n\n/**\n * Looks for morphological passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getMorphologicalPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\tsentence.setPassive( isPassiveSentence( strippedSentence, language ) );\n\n\t\tif ( sentence.isPassive() === true ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\n\treturn passiveSentences;\n};\n\n/**\n * Looks for periphrastic passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getPeriphrasticPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\t// The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.\n\t\tlet sentenceParts = [];\n\n\t\tif ( language === \"de\" || language === \"nl\" || language === \"pl\" || language === \"hu\" ) {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsSplitOnStopwords( strippedSentence, language );\n\t\t} else {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsDefault( strippedSentence, language );\n\t\t}\n\n\t\tlet passive = false;\n\t\tforEach( sentenceParts, function( sentencePart ) {\n\t\t\tsentencePart.setPassive( isPassiveSentencePart( sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language ) );\n\t\t\tpassive = passive || sentencePart.isPassive();\n\t\t} );\n\t\tif ( passive ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\n\treturn passiveSentences;\n};\n\n/**\n * Looks for both morphological and periphrastic passive voice\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n *\n * @returns {Object} The found passive sentences.\n */\nconst getMorphologicalAndPeriphrasticPassive = function( sentences, language ) {\n\tconst morphologicalSentences = getMorphologicalPassives( sentences, language );\n\tconst periphrasticSentences = getPeriphrasticPassives( sentences, language );\n\n\treturn morphologicalSentences.concat( periphrasticSentences );\n};\n\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Object} The total number of sentences in the text and the found passive sentences.\n */\nexport default function( paper ) {\n\tconst text = paper.getText();\n\tconst locale = paper.getLocale();\n\tconst language = getLanguage( locale );\n\tconst sentences = getSentences( text )\n\t\t.map( function( sentence ) {\n\t\t\treturn new Sentence( sentence, locale );\n\t\t} );\n\tconst totalNumberSentences = sentences.length;\n\n\tif ( morphologicalLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getMorphologicalPassives( sentences, language ),\n\t\t};\n\t}\n\tif ( periphrasticLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getPeriphrasticPassives( sentences, language ),\n\t\t};\n\t}\n\tif ( morphologicalAndPeriphrasticLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getMorphologicalAndPeriphrasticPassive( sentences, language ),\n\t\t};\n\t}\n}\n"]}