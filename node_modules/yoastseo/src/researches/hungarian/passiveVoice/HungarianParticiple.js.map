{"version":3,"sources":["../../../../../src/researches/hungarian/passiveVoice/HungarianParticiple.js"],"names":["HungarianParticiple","participle","sentencePart","attributes","Participle","call","checkException","require","inherits","prototype","isNonPassivesInVaAndVe","nonPassivesInVaAndVe","includes","getParticiple","isPassive"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,MAAMA,sBAAsB,SAAtBA,mBAAsB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AAC5EC,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBJ,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACAG,2BAAeD,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAE,QAAS,MAAT,EAAkBC,QAAlB,CAA4BR,mBAA5B,EAAiDI,oBAAjD;;AAEA;;;;;;AAMAJ,oBAAoBS,SAApB,CAA8BC,sBAA9B,GAAuD,YAAW;AACjE,SAAOC,+BAAqBC,QAArB,CAA+B,KAAKC,aAAL,EAA/B,CAAP;AACA,CAFD;;AAIA;;;;;AAKAb,oBAAoBS,SAApB,CAA8BK,SAA9B,GAA0C,YAAW;AACpD,SAAO,CAAE,KAAKJ,sBAAL,EAAT;AACA,CAFD;;kBAIeV,mB","file":"HungarianParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport nonPassivesInVaAndVe from \"./nonPassivesInVaAndVe.js\";\n\n/**\n * Creates a Participle object for the Hungarian language.\n *\n * @param {string} participle           The participle.\n * @param {string} sentencePart         The sentence part that contains the participle.\n * @param {Object} attributes           The attributes object.\n *\n * @constructor\n */\nconst HungarianParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( HungarianParticiple, Participle );\n\n/**\n * Checks whether a found participle is in the nonPassivesInVaAndVe list.\n * If a word is in the nonPassivesInVaAndVe list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the nonVerbsEndingEd list, otherwise returns false.\n */\nHungarianParticiple.prototype.isNonPassivesInVaAndVe = function() {\n\treturn nonPassivesInVaAndVe.includes( this.getParticiple() );\n};\n\n/**\n * Returns Hungarian participles used as passives unless they are on an exception list.\n *\n * @returns {boolean}       Returns true unless the participles are on an exception list.\n */\nHungarianParticiple.prototype.isPassive = function() {\n\treturn ! this.isNonPassivesInVaAndVe();\n};\n\nexport default HungarianParticiple;\n"]}