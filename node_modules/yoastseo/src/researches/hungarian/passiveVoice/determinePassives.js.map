{"version":3,"sources":["../../../../../src/researches/hungarian/passiveVoice/determinePassives.js"],"names":["sentencePartText","auxiliaries","language","auxiliaryMatches","match","auxiliaryRegex","participles","hungarianAuxiliaries","allAuxiliaries"],"mappings":";;;;;;kBAiBe,UAAUA,gBAAV,EAA4BC,WAA5B,EAAyCC,QAAzC,EAAoD;AAClE,QAAMC,mBAAmBH,iBAAiBI,KAAjB,CAAwBC,cAAxB,CAAzB;;AAEA,MAAKF,qBAAqB,IAA1B,EAAiC;AAChC,WAAO,KAAP;AACA;;AAED,QAAMG,cAAc,8BAAgBN,gBAAhB,EAAkCC,WAAlC,EAA+CC,QAA/C,CAApB;AACA,SAAO,8CAAgCI,WAAhC,CAAP;AACA,C;;AA1BD;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAFA,MAAMC,uBAAuB,6BAA8BC,cAA3D;;;AAIA,MAAMH,iBAAiB,oCAAcE,oBAAd,CAAvB;;AAEA","file":"determinePassives.js","sourcesContent":["import arrayToRegex from \"../../../stringProcessing/createRegexFromArray.js\";\nimport auxiliariesHungarianFactory from \"../../hungarian/passiveVoice/auxiliaries.js\";\nconst hungarianAuxiliaries = auxiliariesHungarianFactory().allAuxiliaries;\nimport getParticiples from \"./getParticiples.js\";\nimport determineSentencePartIsPassive from \"../../passiveVoice/periphrastic/determineSentencePartIsPassive.js\";\n\nconst auxiliaryRegex = arrayToRegex( hungarianAuxiliaries );\n\n/**\n * Determines whether a sentence part is passive.\n *\n * @param {string} sentencePartText         The sentence part to determine voice for.\n * @param {Array} auxiliaries               A list with auxiliaries in this sentence part.\n * @param {string} language                 The language of the sentence part.\n *\n * @returns {boolean}                       Returns true if passive, otherwise returns false.\n */\nexport default function( sentencePartText, auxiliaries, language ) {\n\tconst auxiliaryMatches = sentencePartText.match( auxiliaryRegex );\n\n\tif ( auxiliaryMatches === null ) {\n\t\treturn false;\n\t}\n\n\tconst participles = getParticiples( sentencePartText, auxiliaries, language );\n\treturn determineSentencePartIsPassive( participles );\n}\n"]}