{"version":3,"sources":["../../../src/researches/getLinkStatistics.js"],"names":["linkToSelf","anchor","permalink","anchorLink","urlHelper","getFromAnchorTag","areEqual","filterAnchorsLinkingToSelf","anchors","anchorsLinkingToSelf","map","filter","index","filterAnchorsContainingTopic","topicForms","locale","anchorsContainingKeyphraseOrSynonyms","filterAnchorsContainedInTopic","keyphraseAndSynonymsWords","keyphraseForms","synonymsForms","i","length","push","language","anchorsContainedInTopic","forEach","currentAnchor","anchorWords","every","anchorWord","count","keywordInAnchor","paper","researcher","result","totalKeyword","matchedAnchors","keyword","getKeyword","getLocale","getResearch","countLinkTypes","getText","getPermalink","linkCount","total","totalNaKeyword","internalTotal","internalDofollow","internalNofollow","externalTotal","externalDofollow","externalNofollow","otherTotal","otherDofollow","otherNofollow","linkType","linkFollow","keywordInAnchors"],"mappings":"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","file":"getLinkStatistics.js","sourcesContent":["/** @module analyses/getLinkStatistics */\n\nimport filterFunctionWordsFromArray from \"../helpers/filterFunctionWordsFromArray\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport checkNofollow from \"../stringProcessing/checkNofollow.js\";\nimport getWords from \"../stringProcessing/getWords\";\nimport findKeywordInUrl from \"../stringProcessing/findKeywordInUrl.js\";\nimport getAnchors from \"../stringProcessing/getAnchorsFromText.js\";\nimport getLinkType from \"../stringProcessing/getLinkType.js\";\nimport matchTextWithArray from \"../stringProcessing/matchTextWithArray\";\nimport urlHelper from \"../stringProcessing/url.js\";\n\nimport { flatten } from \"lodash-es\";\nimport { uniq } from \"lodash-es\";\n\n\n/**\n * Checks whether the link is pointing at itself.\n * @param {string} anchor The link anchor.\n * @param {string} permalink The permalink of the paper.\n *\n * @returns {boolean} Whether the anchor is pointing at itself.\n */\nconst linkToSelf = function( anchor, permalink ) {\n\tconst anchorLink = urlHelper.getFromAnchorTag( anchor );\n\n\treturn urlHelper.areEqual( anchorLink, permalink );\n};\n\n/**\n * Filters anchors that are not pointing at itself.\n * @param {Array} anchors An array with all anchors from the paper\n * @param {string} permalink The permalink of the paper.\n *\n * @returns {Array} The array of all anchors that are not pointing at the paper itself.\n */\nconst filterAnchorsLinkingToSelf = function( anchors, permalink ) {\n\tconst anchorsLinkingToSelf = anchors.map( function( anchor ) {\n\t\treturn linkToSelf( anchor, permalink );\n\t} );\n\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsLinkingToSelf[ index ] === false;\n\t} );\n\n\treturn anchors;\n};\n\n/**\n * Filters anchors that contain keyphrase or synonyms.\n * @param {Array} anchors An array with all anchors from the paper\n * @param {Object} topicForms The object with topicForms.\n * @param {string} locale The locale of the paper\n *\n * @returns {Array} The array of all anchors that contain keyphrase or synonyms.\n */\nconst filterAnchorsContainingTopic = function( anchors, topicForms, locale ) {\n\tconst anchorsContainingKeyphraseOrSynonyms = anchors.map( function( anchor ) {\n\t\treturn findKeywordInUrl( anchor, topicForms, locale );\n\t} );\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsContainingKeyphraseOrSynonyms[ index ] === true;\n\t} );\n\n\treturn anchors;\n};\n\n/**\n * Filters anchors that are contained within keyphrase or synonyms.\n * @param {Array}  anchors    An array with all anchors from the paper.\n * @param {Object} topicForms An object containing word forms of words included in the keyphrase or a synonym.\n * @param {string} locale     The locale of the paper.\n *\n * @returns {Array} The array of all anchors contained in the keyphrase or synonyms.\n */\nconst filterAnchorsContainedInTopic = function( anchors, topicForms, locale ) {\n\t// Prepare keyphrase and synonym forms for comparison with anchors.\n\tconst keyphraseAndSynonymsWords = [ flatten( topicForms.keyphraseForms ) ];\n\tconst synonymsForms = topicForms.synonymsForms;\n\tfor ( let i = 0; i < synonymsForms.length; i++ ) {\n\t\tkeyphraseAndSynonymsWords.push( flatten( synonymsForms[ i ] ) );\n\t}\n\n\tconst language = getLanguage( locale );\n\tconst anchorsContainedInTopic = [];\n\n\tanchors.forEach( function( currentAnchor ) {\n\t\t// Get single words from the anchor.\n\t\tlet anchorWords = uniq( getWords( currentAnchor ) );\n\n\t\t// Filter function words out of the anchor text.\n\t\tanchorWords = filterFunctionWordsFromArray( anchorWords, language );\n\n\t\t// Check if anchorWords are contained in the topic phrase words\n\t\tfor ( let i = 0; i < keyphraseAndSynonymsWords.length; i++ ) {\n\t\t\tif ( anchorWords.every( anchorWord => matchTextWithArray( anchorWord, keyphraseAndSynonymsWords[ i ], locale ).count > 0 ) ) {\n\t\t\t\tanchorsContainedInTopic.push( true );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} );\n\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsContainedInTopic[ index ] === true;\n\t} );\n\n\treturn anchors;\n};\n\n\n/**\n * Checks whether or not an anchor contains the passed keyword.\n * @param {Paper} paper The paper to research.\n * @param {Researcher} researcher The researcher to use.\n * @param {Array} anchors The array of anchors of the links found in the paper.\n * @param {string} permalink The string with a permalink of the paper.\n *\n * @returns {Object} How many anchors contained the keyphrase or synonyms, what are these anchors\n */\nconst keywordInAnchor = function( paper, researcher, anchors, permalink ) {\n\tconst result = { totalKeyword: 0, matchedAnchors: [] };\n\n\tconst keyword = paper.getKeyword();\n\n\t// If no keyword is set, return empty result.\n\tif ( keyword === \"\" ) {\n\t\treturn result;\n\t}\n\n\t// Filter out anchors that point at the paper itself.\n\tanchors = filterAnchorsLinkingToSelf( anchors, permalink );\n\tif ( anchors.length === 0 ) {\n\t\treturn result;\n\t}\n\n\tconst locale = paper.getLocale();\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\n\t// Check if any anchors contain keyphrase or synonyms in them.\n\tanchors = filterAnchorsContainingTopic( anchors, topicForms, locale );\n\tif ( anchors.length === 0 ) {\n\t\treturn result;\n\t}\n\n\t// Check if content words from the anchors are all within the keyphrase or the synonyms.\n\tanchors = filterAnchorsContainedInTopic( anchors, topicForms, locale );\n\tresult.totalKeyword = anchors.length;\n\tresult.matchedAnchors = anchors;\n\n\treturn result;\n};\n\n/**\n * Counts the links found in the text.\n *\n * @param {Paper} paper The paper object containing text, keyword and url.\n * @param {Researcher} researcher The researcher to use for the paper.\n *\n * @returns {object} The object containing all linktypes.\n * total: the total number of links found.\n * totalNaKeyword: the total number of links if keyword is not available.\n * keyword: Object containing all the keyword related counts and matches.\n * keyword.totalKeyword: the total number of links with the keyword.\n * keyword.matchedAnchors: Array with the anchors that contain the keyword.\n * internalTotal: the total number of links that are internal.\n * internalDofollow: the internal links without a nofollow attribute.\n * internalNofollow: the internal links with a nofollow attribute.\n * externalTotal: the total number of links that are external.\n * externalDofollow: the external links without a nofollow attribute.\n * externalNofollow: the internal links with a dofollow attribute.\n * otherTotal: all links that are not HTTP or HTTPS.\n * otherDofollow: other links without a nofollow attribute.\n * otherNofollow: other links with a nofollow attribute.\n */\nconst countLinkTypes = function( paper, researcher ) {\n\tconst anchors = getAnchors( paper.getText() );\n\tconst permalink = paper.getPermalink();\n\n\tconst linkCount = {\n\t\ttotal: anchors.length,\n\t\ttotalNaKeyword: 0,\n\t\tkeyword: {\n\t\t\ttotalKeyword: 0,\n\t\t\tmatchedAnchors: [],\n\t\t},\n\t\tinternalTotal: 0,\n\t\tinternalDofollow: 0,\n\t\tinternalNofollow: 0,\n\t\texternalTotal: 0,\n\t\texternalDofollow: 0,\n\t\texternalNofollow: 0,\n\t\totherTotal: 0,\n\t\totherDofollow: 0,\n\t\totherNofollow: 0,\n\t};\n\n\tfor ( let i = 0; i < anchors.length; i++ ) {\n\t\tconst currentAnchor = anchors[ i ];\n\n\t\tconst linkType = getLinkType( currentAnchor, permalink );\n\t\tconst linkFollow = checkNofollow( currentAnchor );\n\n\t\tlinkCount[ linkType + \"Total\" ]++;\n\t\tlinkCount[ linkType + linkFollow ]++;\n\t}\n\n\tconst keywordInAnchors = keywordInAnchor( paper, researcher, anchors, permalink );\n\tlinkCount.keyword.totalKeyword = keywordInAnchors.totalKeyword;\n\tlinkCount.keyword.matchedAnchors = keywordInAnchors.matchedAnchors;\n\n\treturn linkCount;\n};\n\nexport default countLinkTypes;\n"]}