{"version":3,"sources":["../../../../../src/researches/passiveVoice/periphrastic/matchParticiples.js"],"names":["regularParticiples","irregularParticiples","irregularsEnglish","irregularsFrench","irregularsRegularFrench","irregularsRegular","irregularsIrregularFrench","irregularsIrregular","irregularsEndingInSFrench","irregularsEndingInS","spanishParticiples","portugueseParticiples","italianParticiples","irregularsDutch","nlRegex1","nlRegex2","polishParticiples","languageVariables","en","regularParticiplesRegex","fr","nl","regularParticipleRegexPattern1","regularParticipleRegexPattern2","languagesWithoutRegularParticiples","word","language","includes","matches","Object","keys","forEach","regex","match","push","matchFrenchParticipleWithSuffix","irregulars","suffixes","irregular","irregularParticiplesRegex","RegExp","participleMatch","concat","irregularParticiple"],"mappings":"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","file":"matchParticiples.js","sourcesContent":["import { find } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { memoize } from \"lodash-es\";\nimport { includes } from \"lodash-es\";\nimport { flattenDeep } from \"lodash-es\";\n\nimport irregularsEnglishFactory from \"../../english/passiveVoice/irregulars\";\nconst irregularsEnglish = irregularsEnglishFactory();\n\nimport irregularsFrenchFactory from \"../../french/passiveVoice/irregulars\";\n\nconst irregularsFrench = irregularsFrenchFactory();\n\nconst irregularsRegularFrench = irregularsFrench.irregularsRegular;\nconst irregularsIrregularFrench = irregularsFrench.irregularsIrregular;\nconst irregularsEndingInSFrench = irregularsFrench.irregularsEndingInS;\n\nimport spanishParticiplesFactory from \"../../spanish/passiveVoice/participles\";\nconst spanishParticiples = spanishParticiplesFactory();\nimport portugueseParticiplesFactory from \"../../portuguese/passiveVoice/participles\";\nconst portugueseParticiples = portugueseParticiplesFactory();\nimport italianParticiplesFactory from \"../../italian/passiveVoice/participles\";\nconst italianParticiples = italianParticiplesFactory();\nimport irregularsDutchFactory from \"../../dutch/passiveVoice/irregulars\";\nconst irregularsDutch = irregularsDutchFactory();\nconst nlRegex1 = /^(ge|be|ont|ver|her|er)\\S+(d|t)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nconst nlRegex2 = /^(aan|af|bij|binnen|los|mee|na|neer|om|onder|samen|terug|tegen|toe|uit|vast)(ge)\\S+(d|t|n)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nimport polishParticiplesFactory from \"../../polish/passiveVoice/participles\";\nconst polishParticiples = polishParticiplesFactory();\n\n\n// The language-specific participle regexes.\nconst languageVariables = {\n\ten: {\n\t\tregularParticiplesRegex: /\\w+ed($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig,\n\t},\n\tfr: {\n\t\tregularParticiplesRegex: /\\S+(é|ée|és|ées)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig,\n\t},\n\tnl: {\n\t\tregularParticipleRegexPattern1: nlRegex1,\n\t\tregularParticipleRegexPattern2: nlRegex2,\n\t},\n};\nconst languagesWithoutRegularParticiples = [ \"es\", \"it\", \"pl\", \"pt\" ];\n\n/**\n * Returns words that have been determined to be a regular participle.\n *\n * @param {string} word The word to check.\n * @param {string} language The language in which to match.\n *\n * @returns {Array} A list with the matches.\n */\nconst regularParticiples = function( word, language ) {\n\t// In certain languages we don't match participles with a regular regex pattern.\n\tif ( languagesWithoutRegularParticiples.includes( language ) ) {\n\t\treturn [];\n\t}\n\n\t// Matches word with language-specific participle regexes.\n\tlet matches = [];\n\n\tObject.keys( languageVariables[ language ] ).forEach( function( regex ) {\n\t\tconst match = word.match( languageVariables[ language ][ regex ] );\n\t\tif ( match !== null ) {\n\t\t\tmatches.push( match );\n\t\t}\n\t} );\n\n\tmatches = flattenDeep( matches );\n\n\treturn matches;\n};\n\n/**\n * Returns an array of matches of irregular participles with suffixes.\n *\n * @param {string} word The word to match on.\n * @param {Array} irregulars The list of irregulars to match.\n * @param {string} suffixes The suffixes to match the word with.\n *\n * @returns {Array} A list with matched irregular participles.\n */\nconst matchFrenchParticipleWithSuffix = function( word, irregulars, suffixes ) {\n\tconst matches = [];\n\tforEach( irregulars, function( irregular ) {\n\t\tconst irregularParticiplesRegex = new RegExp( \"^\" + irregular + suffixes + \"?$\", \"ig\" );\n\t\tconst participleMatch = word.match( irregularParticiplesRegex );\n\t\tif ( participleMatch ) {\n\t\t\tmatches.push( participleMatch[ 0 ] );\n\t\t}\n\t} );\n\treturn matches;\n};\n\n/**\n * Returns the matches for a word in the list of irregulars.\n *\n * @param {string} word The word to match in the list.\n * @param {string} language The language for which to match.\n *\n * @returns {Array} A list with the matches.\n */\nconst irregularParticiples = function( word, language ) {\n\tlet matches = [];\n\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\t// Match different classes of participles with suffixes.\n\t\t\tmatches = matches.concat( matchFrenchParticipleWithSuffix( word, irregularsRegularFrench, \"(e|s|es)\" ) );\n\t\t\tmatches = matches.concat( matchFrenchParticipleWithSuffix( word, irregularsEndingInSFrench, \"(e|es)\" ) );\n\n\t\t\t// Match irregular participles that don't require adding a suffix.\n\t\t\tfind( irregularsIrregularFrench, function( irregularParticiple ) {\n\t\t\t\tif ( irregularParticiple === word ) {\n\t\t\t\t\tmatches.push( irregularParticiple );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\t// In Spanish, we only match passives from a word list.\n\t\t\tif ( includes( spanishParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\t// In Italian, we only match passives from a word list.\n\t\t\tif ( includes( italianParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"nl\":\n\t\t\tif ( includes( irregularsDutch, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"pl\":\n\t\t\t// In Polish, we only match passives from a word list.\n\t\t\tif ( includes( polishParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"pt\":\n\t\t\t// In Portuguese, we only match passives from a word list.\n\t\t\tif ( includes( portugueseParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tfind( irregularsEnglish, function( irregularParticiple ) {\n\t\t\t\tif ( irregularParticiple === word ) {\n\t\t\t\t\tmatches.push( irregularParticiple );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tbreak;\n\t}\n\treturn matches;\n};\n\n/**\n * Returns methods to return participles for a language.\n *\n * @returns {Object} Methods to return participles in a language.\n */\nexport default function() {\n\treturn {\n\t\tregularParticiples: memoize( regularParticiples ),\n\t\tirregularParticiples: memoize( irregularParticiples ),\n\t};\n}\n"]}