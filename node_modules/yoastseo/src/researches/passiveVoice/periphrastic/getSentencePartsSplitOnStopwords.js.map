{"version":3,"sources":["../../../../../src/researches/passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js"],"names":["auxiliariesGerman","allAuxiliaries","stopwordsGerman","stopwordsDutch","auxiliariesDutch","stopwordsPolish","auxiliariesPolish","stopwordsHungarian","auxiliariesHungarian","languageVariables","de","SentencePart","SentencePartGerman","stopwordRegex","auxiliaryRegex","locale","nl","SentencePartDutch","pl","SentencePartPolish","hu","SentencePartHungarian","sanitizeMatches","matches","match","splitOnWords","sentence","stopwords","splitSentences","stopword","sentenceSplit","split","push","startIndex","indexOf","endIndex","length","substr","createSentenceParts","sentences","language","sentenceParts","part","foundAuxiliaries","splitSentence"],"mappings":"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","file":"getSentencePartsSplitOnStopwords.js","sourcesContent":["import { forEach } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\nimport { map } from \"lodash-es\";\n\nimport arrayToRegex from \"../../../stringProcessing/createRegexFromArray.js\";\nimport stripSpaces from \"../../../stringProcessing/stripSpaces.js\";\n\n// German-specific imports.\nimport SentencePartGerman from \"../../german/passiveVoice/SentencePart.js\";\n\nimport auxiliariesGermanFactory from \"../../german/passiveVoice/auxiliaries.js\";\n\nconst auxiliariesGerman = auxiliariesGermanFactory().allAuxiliaries;\nimport stopwordsGermanFactory from \"../../german/passiveVoice/stopwords.js\";\nconst stopwordsGerman = stopwordsGermanFactory();\n\n// Dutch-specific imports.\nimport SentencePartDutch from \"../../dutch/passiveVoice/SentencePart.js\";\n\nimport stopwordsDutchFactory from \"../../dutch/passiveVoice/stopwords.js\";\nconst stopwordsDutch = stopwordsDutchFactory();\nimport auxiliariesDutchFactory from \"../../dutch/passiveVoice/auxiliaries.js\";\nconst auxiliariesDutch = auxiliariesDutchFactory();\n\n// Polish-specific imports.\nimport SentencePartPolish from \"../../polish/passiveVoice/SentencePart.js\";\n\nimport stopwordsPolishFactory from \"../../polish/passiveVoice/stopwords.js\";\nconst stopwordsPolish = stopwordsPolishFactory();\nimport auxiliariesPolishFactory from \"../../polish/passiveVoice/auxiliaries.js\";\nconst auxiliariesPolish = auxiliariesPolishFactory();\n\n// Hungarian-specific imports.\nimport SentencePartHungarian from \"../../hungarian/passiveVoice/SentencePart.js\";\n\nimport stopwordsHungarianFactory from \"../../hungarian/passiveVoice/stopwords.js\";\nconst stopwordsHungarian = stopwordsHungarianFactory();\nimport auxiliariesHungarianFactory from \"../../hungarian/passiveVoice/auxiliaries.js\";\nconst auxiliariesHungarian = auxiliariesHungarianFactory().allAuxiliaries;\n\n// The language-specific variables.\nconst languageVariables = {\n\tde: {\n\t\tSentencePart: SentencePartGerman,\n\t\tstopwordRegex: arrayToRegex( stopwordsGerman ),\n\t\tauxiliaryRegex: arrayToRegex( auxiliariesGerman ),\n\t\tlocale: \"de_DE\",\n\t},\n\tnl: {\n\t\tSentencePart: SentencePartDutch,\n\t\tstopwordRegex: arrayToRegex( stopwordsDutch ),\n\t\tauxiliaryRegex: arrayToRegex( auxiliariesDutch ),\n\t\tlocale: \"nl_NL\",\n\t},\n\tpl: {\n\t\tSentencePart: SentencePartPolish,\n\t\tstopwordRegex: arrayToRegex( stopwordsPolish ),\n\t\tauxiliaryRegex: arrayToRegex( auxiliariesPolish ),\n\t\tlocale: \"pl_PL\",\n\t},\n\thu: {\n\t\tSentencePart: SentencePartHungarian,\n\t\tstopwordRegex: arrayToRegex( stopwordsHungarian ),\n\t\tauxiliaryRegex: arrayToRegex( auxiliariesHungarian ),\n\t\tlocale: \"hu_HU\",\n\t},\n};\n\n/**\n * Strips spaces from the auxiliary matches.\n *\n * @param {Array} matches       A list with matches of auxiliaries.\n *\n * @returns {Array}             A list with matches with spaces removed.\n */\nfunction sanitizeMatches( matches ) {\n\treturn map( matches, function( match ) {\n\t\treturn stripSpaces( match );\n\t} );\n}\n\n/**\n * Splits sentences into sentence parts based on stopwords.\n *\n * @param {string} sentence     The sentence to split.\n * @param {Array} stopwords     The array with matched stopwords.\n *\n * @returns {Array}             The array with sentence parts.\n */\nfunction splitOnWords( sentence, stopwords ) {\n\tconst splitSentences = [];\n\n\t// Split the sentence on each found stopword and push this part in an array.\n\tforEach( stopwords, function( stopword ) {\n\t\tconst sentenceSplit = sentence.split( stopword );\n\t\tif ( ! isEmpty( sentenceSplit[ 0 ] ) ) {\n\t\t\tsplitSentences.push( sentenceSplit[ 0 ] );\n\t\t}\n\t\tconst startIndex = sentence.indexOf( stopword );\n\t\tconst endIndex = sentence.length;\n\t\tsentence = stripSpaces( sentence.substr( startIndex, endIndex ) );\n\t} );\n\n\t// Push the remainder of the sentence in the sentence parts array.\n\tsplitSentences.push( sentence );\n\treturn splitSentences;\n}\n\n/**\n * Creates sentence parts based on split sentences.\n\n * @param {Array}   sentences   The array with split sentences.\n * @param {string}  language    The language for which to create sentence parts.\n *\n * @returns {Array}             The array with sentence parts.\n */\nfunction createSentenceParts( sentences, language ) {\n\tconst auxiliaryRegex = languageVariables[ language ].auxiliaryRegex;\n\tconst SentencePart = languageVariables[ language ].SentencePart;\n\tconst sentenceParts = [];\n\tforEach( sentences, function( part ) {\n\t\tconst foundAuxiliaries = sanitizeMatches( part.match( auxiliaryRegex || [] ) );\n\t\tsentenceParts.push( new SentencePart( part, foundAuxiliaries, languageVariables[ language ].locale ) );\n\t} );\n\treturn sentenceParts;\n}\n\n/**\n * Splits the sentence into sentence parts based on stopwords.\n *\n * @param {string} sentence     The text to split into sentence parts.\n * @param {string} language     The language for which to split sentences.\n *\n * @returns {Array}             The array with sentence parts.\n */\nfunction splitSentence( sentence, language ) {\n\tconst stopwordRegex = languageVariables[ language ].stopwordRegex;\n\tconst stopwords = sentence.match( stopwordRegex ) || [];\n\tconst splitSentences = splitOnWords( sentence, stopwords );\n\treturn createSentenceParts( splitSentences, language );\n}\n\nexport default splitSentence;\n"]}