{"version":3,"sources":["../../../../../src/researches/passiveVoice/morphological/determinePassiveSentence.js"],"names":["sentenceText","language","includes","determineSentenceIsPassiveListBased","determineSentenceIsPassiveIndonesian","determineSentenceIsPassiveTurkish","determineSentenceIsPassiveArabic","determineSentenceIsPassiveHebrew","determineSentenceIsPassiveHungarian","getPassiveVerbsRussian","all","getPassiveVerbsSwedish","passiveEndingsTurkish","passivePrefixIndonesian","nonPassivesIndonesian","getPassiveVerbsArabic","nifalVerbsHebrew","pualVerbsHebrew","hufalVerbsHebrew","matchPassiveVerbs","sentence","passiveVerbs","word","toLocaleLowerCase","length","words","matchedPassives","filter","startsWith","nonPassive","matchedPassive","matchedPassivesShouldStay","passiveIndex","indexOf","wordPrecedingPassive","checkTurkishNonPassivesStemsList","nonPassivesTurkish","passiveEndings","passive","some","stem","ending","pattern","RegExp","test","nonPassivesFullForms","nonPassiveStems","endsWith","arabicPrepositionalPrefix","slice","wordWithDamma","search","push","checkHebrewVerbRootsList","verbRootsList","affixesList","root","affixes","prefix","suffix","nifalAffixes","nifalPassive","pualAffixes","pualInfix","pualPassive","pualPattern","hufalAffixes","hufalPassive","checkHungarianPassive","prefixes","suffixes","rootAndSuffix","beforeRoot","passiveVerbs1","getPassiveVerbsHungarian","odikVerbStems1","passiveVerbs2","odikVerbStems2","checkPassiveVerb1","verbPrefixes","odikSuffixes1","checkPassiveVerbs2","odikSuffixes2"],"mappings":"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","file":"determinePassiveSentence.js","sourcesContent":["import { filter } from \"lodash-es\";\nimport getWords from \"../../../stringProcessing/getWords.js\";\n\n// Verb-form lists per language\nimport getPassiveVerbsRussianFactory from \"../../russian/passiveVoice/participlesShortenedList.js\";\nconst getPassiveVerbsRussian = getPassiveVerbsRussianFactory().all;\n\nimport getPassiveVerbsSwedishFactory from \"../../swedish/passiveVoice/participles.js\";\nconst getPassiveVerbsSwedish = getPassiveVerbsSwedishFactory().all;\n\nimport getPassiveEndingsTurkish from \"../../turkish/passiveVoice/passiveEndings\";\nconst passiveEndingsTurkish = getPassiveEndingsTurkish();\nimport { nonPassivesFullForms, nonPassiveStems } from \"../../turkish/passiveVoice/nonPassivesTurkish\";\n\nconst passivePrefixIndonesian = \"di\";\nimport nonPassivesIndonesianFactory from \"../../indonesian/passiveVoice/nonPassiveVerbsStartingDi\";\nconst nonPassivesIndonesian = nonPassivesIndonesianFactory();\n\nimport getPassiveVerbsArabicFactory from \"../../arabic/passiveVoice/passiveVerbsWithLongVowel\";\nconst getPassiveVerbsArabic = getPassiveVerbsArabicFactory();\n\nimport getNifalVerbsHebrewFactory from \"../../hebrew/passiveVoice/regularRootsNifal\";\nconst nifalVerbsHebrew = getNifalVerbsHebrewFactory();\n\nimport getPualVerbsHebrewFactory from \"../../hebrew/passiveVoice/regularRootsPual\";\nconst pualVerbsHebrew = getPualVerbsHebrewFactory();\n\nimport getHufalVerbsHebrewFactory from \"../../hebrew/passiveVoice/regularRootsHufal\";\nconst hufalVerbsHebrew = getHufalVerbsHebrewFactory();\n\nimport getPassiveVerbsHungarian from \"../../hungarian/passiveVoice/odikVerbs\";\nimport { verbPrefixes, odikSuffixes1, odikSuffixes2 } from \"../../hungarian/passiveVoice/morphologicalPassiveAffixes\";\n\n/**\n * Matches the sentence against passive verbs.\n *\n * @param {string} sentence       The sentence to match against.\n * @param {Array}  passiveVerbs   The array containing passive verb-forms.\n *\n * @returns {Array}               The found passive verbs.\n */\nconst matchPassiveVerbs = function( sentence, passiveVerbs ) {\n\treturn filter( getWords( sentence ), function( word ) {\n\t\treturn passiveVerbs.includes( word.toLocaleLowerCase() );\n\t} );\n};\n\n/**\n * Checks the passed sentence to see if it contains passive verb-forms.\n *\n * @param {string} sentence   The sentence to match against.\n * @param {string} language   The language of the text.\n *\n * @returns {Boolean}         Whether the sentence contains passive voice.\n */\nconst determineSentenceIsPassiveListBased = function( sentence, language ) {\n\tlet passiveVerbs = [];\n\n\tswitch ( language ) {\n\t\tcase \"ru\":\n\t\t\tpassiveVerbs = getPassiveVerbsRussian;\n\t\t\tbreak;\n\t\tcase \"sv\":\n\t\t\tpassiveVerbs = getPassiveVerbsSwedish;\n\t\t\tbreak;\n\t}\n\treturn matchPassiveVerbs( sentence, passiveVerbs ).length !== 0;\n};\n\n/**\n * Checks the passed sentence to see if it contains Indonesian passive verb-forms.\n *\n * @param {string} sentence   The sentence to match against.\n *\n * @returns {Boolean}         Whether the sentence contains Indonesian passive voice.\n */\nconst determineSentenceIsPassiveIndonesian = function( sentence ) {\n\tconst words = getWords( sentence );\n\tlet matchedPassives = words.filter( word => ( word.length > 4 ) );\n\tmatchedPassives = matchedPassives.filter( word => ( word.startsWith( passivePrefixIndonesian ) ) );\n\tif ( matchedPassives.length === 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check exception list.\n\tfor ( const nonPassive of nonPassivesIndonesian ) {\n\t\tmatchedPassives = matchedPassives.filter( word => ( ! word.startsWith( nonPassive ) ) );\n\t}\n\n\t// Check direct precedence exceptions.\n\tmatchedPassives = matchedPassives.filter( function( matchedPassive ) {\n\t\tlet matchedPassivesShouldStay = true;\n\t\tconst passiveIndex = words.indexOf( matchedPassive );\n\t\tconst wordPrecedingPassive = words[ passiveIndex - 1 ];\n\t\tif ( wordPrecedingPassive === \"untuk\" ) {\n\t\t\tmatchedPassivesShouldStay = false;\n\t\t}\n\t\treturn matchedPassivesShouldStay;\n\t} );\n\treturn matchedPassives.length !== 0;\n};\n\n/**\n * Filters out words that are passive exceptions from an array.\n *\n * @param {string[]} nonPassivesTurkish      The list of exceptions to check\n * @param {string[]} passiveEndings          The list of passive verb endings\n * @param {string[]} matchedPassives         The words from the sentence that could be passives\n * @returns {string[]}               \t\t The array of words with the non-passives filtered out\n *\n */\nconst checkTurkishNonPassivesStemsList = function( nonPassivesTurkish, passiveEndings, matchedPassives ) {\n\treturn matchedPassives.filter( passive => nonPassivesTurkish.some( stem => passiveEndings.some( function( ending ) {\n\t\tconst pattern =  new RegExp( \"^\" + stem + ending + \"$\" );\n\t\treturn ! pattern.test( passive );\n\t} ) ) );\n};\n\n/**\n * Checks the passed sentence to see if it contains Turkish passive verb forms and is not found in the non-passive full forms exception list.\n *\n * @param {string} sentence   The sentence to match against.\n *\n * @returns {Boolean}         Whether the sentence contains a Turkish verb passive voice.\n */\nconst determineSentenceIsPassiveTurkish = function( sentence ) {\n\tconst words = getWords( sentence );\n\tlet matchedPassives = words.filter( word => ( word.length > 5 ) );\n\tmatchedPassives = matchedPassives.filter( word => ! nonPassivesFullForms.includes( word ) );\n\tmatchedPassives = checkTurkishNonPassivesStemsList( nonPassiveStems, passiveEndingsTurkish, matchedPassives );\n\treturn matchedPassives.some( word => passiveEndingsTurkish.some( ending => word.endsWith( ending ) ) );\n};\n\n/**\n * Checks the passed sentence to see if it contains Arabic passive verb-forms.\n *\n * @param {string} sentence     The sentence to match against.\n *\n * @returns {Boolean}           Whether the sentence contains Arabic passive voice.\n */\nconst determineSentenceIsPassiveArabic = function( sentence ) {\n\tconst arabicPrepositionalPrefix =  \"و\";\n\tconst words = getWords( sentence );\n\tconst passiveVerbs = [];\n\n\tfor ( let word of words ) {\n\t\t// Check if the word starts with prefix و\n\t\tif ( word.startsWith( arabicPrepositionalPrefix ) ) {\n\t\t\tword = word.slice( 1 );\n\t\t}\n\t\tlet wordWithDamma = -1;\n\t\t// Check if the first character has a damma or if the word is in the list of Arabic passive verbs\n\t\tif ( word.length >= 2 ) {\n\t\t\twordWithDamma = word[ 1 ].search( \"\\u064F\" );\n\t\t}\n\t\tif ( wordWithDamma !== -1 || getPassiveVerbsArabic.includes( word ) ) {\n\t\t\tpassiveVerbs.push( word );\n\t\t}\n\t}\n\n\treturn passiveVerbs.length !== 0;\n};\n\n/**\n * Checks if the input word's root is in the Hebrew verb roots list.\n *\n * @param {string} word             The word to check.\n * @param {string[]} verbRootsList  The Hebrew verb roots list.\n * @param {Object[]} affixesList    The list of prefixes and suffixes.\n *\n * @returns {Boolean}           Returns true if the root of the input word is in the list.\n */\nconst checkHebrewVerbRootsList = function( word, verbRootsList, affixesList ) {\n\treturn verbRootsList.some( root => affixesList.some( function( affixes ) {\n\t\tconst pattern =  new RegExp( \"^\" + affixes.prefix + root + affixes.suffix + \"$\" );\n\t\treturn pattern.test( word );\n\t} ) );\n};\n\n/**\n * Checks the passed sentence to see if it contains Hebrew passive verb-forms.\n *\n * @param {string} sentence    The sentence to match against.\n *\n * @returns {Boolean}          Whether the sentence contains Hebrew passive voice.\n */\nconst determineSentenceIsPassiveHebrew = function( sentence ) {\n\tconst words = getWords( sentence );\n\tfor ( const word of words ) {\n\t\t// The list of prefixes and suffixes for nif'al.\n\t\tconst nifalAffixes =  [\n\t\t\t{ prefix: \"(נ|אי|תי|הי|יי|ני|להי)\", suffix: \"\" },\n\t\t\t{ prefix: \"(תי|הי)\", suffix: \"(י|ו|נה)\" },\n\t\t\t{ prefix: \"נ\", suffix: \"(ים|ת|ות|תי|ה|נו|תם|תן|ו)\" },\n\t\t\t{ prefix: \"יי\", suffix: \"ו\" },\n\t\t];\n\n\t\t// Check if the root is in nif'al.\n\t\tconst nifalPassive = checkHebrewVerbRootsList( word, nifalVerbsHebrew, nifalAffixes );\n\n\t\tif ( nifalPassive ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// The list of prefixes and suffixes for pu'al.\n\t\tconst pualAffixes = [\n\t\t\t{ prefix: \"(מ|א|ת|י|נ)\", suffix: \"\" },\n\t\t\t{ prefix: \"תי\", suffix: \"נה\" },\n\t\t\t{ prefix: \"מ\", suffix: \"(ת|ים|ות)\" },\n\t\t\t{ prefix: \"ת\", suffix: \"(י|ו|נה)\" },\n\t\t\t{ prefix: \"י\", suffix: \"ו\" },\n\t\t\t{ prefix: \"\", suffix: \"(תי|ת|ה|נו|תם|תן|ו)\" },\n\t\t\t{ prefix: \"\", suffix: \"\" },\n\t\t];\n\t\tconst pualInfix = \"ו\";\n\n\t\t// Check if the root is in pu'al.\n\t\tconst pualPassive = pualVerbsHebrew.some( root => pualAffixes.some( function( affixes ) {\n\t\t\tconst pualPattern = new RegExp( \"^\" + affixes.prefix + root[ 0 ] + pualInfix + root[ 1 ] + root[ 2 ] + affixes.suffix + \"$\" );\n\n\t\t\treturn pualPattern.test( word );\n\t\t} ) );\n\n\t\tif ( pualPassive ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// The list of prefixes and suffixes for huf'al.\n\t\tconst hufalAffixes = [\n\t\t\t{ prefix: \"(מו|הו|או|תו|יו|נו)\", suffix: \"\" },\n\t\t\t{ prefix: \"מו\", suffix: \"(ת|ים|ות)\" },\n\t\t\t{ prefix: \"הו\", suffix: \"(תי|ת|ית|ה|נו|תם|תן|ו)\" },\n\t\t\t{ prefix: \"תו\", suffix: \"(ו|נה|י)\" },\n\t\t\t{ prefix: \"יו\", suffix: \"ו\" },\n\t\t];\n\n\t\t// Check if the root is in huf'al.\n\t\tconst hufalPassive = checkHebrewVerbRootsList( word, hufalVerbsHebrew, hufalAffixes );\n\n\t\tif ( hufalPassive ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Checks if the input word's root is in the Hungarian verb roots list.\n *\n * @param {string} word             The word to check.\n * @param {string[]} verbRootsList  The Hungarian verb roots list.\n * @param {string[]} prefixes       The list of prefixes.\n * @param {string[]} suffixes       The list of suffixes.\n *\n * @returns {Boolean}               Returns true if the root of the input word is in the list.\n */\nconst checkHungarianPassive = function( word, verbRootsList, prefixes, suffixes ) {\n\treturn verbRootsList.some( root => {\n\t\treturn suffixes.some( function( suffix ) {\n\t\t\tconst rootAndSuffix = root + suffix;\n\n\t\t\t// Check whether the word ends in a root + suffix combination.\n\t\t\tif ( word.endsWith( rootAndSuffix ) ) {\n\t\t\t\tconst beforeRoot = word.slice( 0, word.indexOf( rootAndSuffix ) );\n\n\t\t\t\t// Word is passive if nothing precedes the root or the root is preceded by a valid prefix.\n\t\t\t\treturn beforeRoot === \"\" || prefixes.includes( beforeRoot );\n\t\t\t}\n\t\t} );\n\t} );\n};\n\n/**\n * Checks the passed sentence to see if it contains Hungarian passive verb-forms.\n *\n * @param {string} sentence     The sentence to match against.\n *\n * @returns {Boolean}           Whether the sentence contains Hungarian passive voice.\n */\nconst determineSentenceIsPassiveHungarian = function( sentence ) {\n\tconst words = getWords( sentence );\n\tconst passiveVerbs1 = getPassiveVerbsHungarian.odikVerbStems1;\n\tconst passiveVerbs2 = getPassiveVerbsHungarian.odikVerbStems2;\n\n\tfor ( const word of words ) {\n\t\tconst checkPassiveVerb1 = checkHungarianPassive( word, passiveVerbs1, verbPrefixes, odikSuffixes1 );\n\t\tif ( checkPassiveVerb1 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst  checkPassiveVerbs2 = checkHungarianPassive( word, passiveVerbs2, verbPrefixes, odikSuffixes2 );\n\t\tif ( checkPassiveVerbs2 ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Determines whether a sentence is passive.\n *\n * @param {string} sentenceText     The sentence to determine voice for.\n * @param {string} language         The language of the sentence part.\n *\n * @returns {boolean}               Returns true if passive, otherwise returns false.\n */\nexport default function( sentenceText, language ) {\n\tif ( [ \"ru\", \"sv\" ].includes( language ) ) {\n\t\treturn determineSentenceIsPassiveListBased( sentenceText, language );\n\t}\n\n\tif ( language === \"id\" ) {\n\t\treturn determineSentenceIsPassiveIndonesian( sentenceText );\n\t}\n\n\tif ( language === \"tr\" ) {\n\t\treturn determineSentenceIsPassiveTurkish( sentenceText );\n\t}\n\n\tif ( language === \"ar\" ) {\n\t\treturn determineSentenceIsPassiveArabic( sentenceText );\n\t}\n\tif ( language === \"he\" ) {\n\t\treturn determineSentenceIsPassiveHebrew( sentenceText );\n\t}\n\tif ( language === \"hu\" ) {\n\t\treturn determineSentenceIsPassiveHungarian( sentenceText );\n\t}\n}\n"]}