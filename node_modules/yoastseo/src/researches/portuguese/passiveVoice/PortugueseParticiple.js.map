{"version":3,"sources":["../../../../../src/researches/portuguese/passiveVoice/PortugueseParticiple.js"],"names":["PortugueseParticiple","participle","sentencePart","attributes","Participle","call","checkException","require","inherits","prototype","isPassive","getSentencePart","getParticiple","language","getLanguage","directPrecedenceException","precedenceException"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;;;;;;;;;AASA,MAAMA,uBAAuB,SAAvBA,oBAAuB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AAC7EC,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBJ,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACAG,2BAAeD,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAE,QAAS,MAAT,EAAkBC,QAAlB,CAA4BR,oBAA5B,EAAkDI,oBAAlD;;AAEA;;;;;;AAMAJ,qBAAqBS,SAArB,CAA+BC,SAA/B,GAA2C,YAAW;AACrD,QAAMR,eAAe,KAAKS,eAAL,EAArB;AACA,QAAMV,aAAa,KAAKW,aAAL,EAAnB;AACA,QAAMC,WAAW,KAAKC,WAAL,EAAjB;;AAEA,SAAO,CAAE,KAAKC,yBAAL,CAAgCb,YAAhC,EAA8CD,UAA9C,EAA0DY,QAA1D,CAAF,IACN,CAAE,KAAKG,mBAAL,CAA0Bd,YAA1B,EAAwCD,UAAxC,EAAoDY,QAApD,CADH;AAEA,CAPD;;AASAb,qBAAqBS,SAArB,CAA+BM,yBAA/B,GAA2DA,+CAA3D;;AAEAf,qBAAqBS,SAArB,CAA+BO,mBAA/B,GAAqDA,yCAArD;;kBAEehB,oB","file":"PortugueseParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\nimport precedenceException from \"../../../stringProcessing/precedenceExceptionWithoutRegex\";\n\n\n/**\n * Creates an Participle object for the Portuguese language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nconst PortugueseParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( PortugueseParticiple, Participle );\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nPortugueseParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst language = this.getLanguage();\n\n\treturn ! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t! this.precedenceException( sentencePart, participle, language );\n};\n\nPortugueseParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nPortugueseParticiple.prototype.precedenceException = precedenceException;\n\nexport default PortugueseParticiple;\n"]}