{"version":3,"sources":["../../../src/researches/matchKeywordInSubheadings.js"],"names":["paper","researcher","text","getText","topicForms","getResearch","locale","getLocale","result","count","matches","percentReflectingTopic","useSynonyms","subheadings","length","numberOfSubheadingsReflectingTopic","functionWordLanguages","isFunctionWordLanguage","filter","subheading","matchedTopicForms","percentWordMatches"],"mappings":";;;;;;kBA2Ce,UAAUA,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,OAAMC,OAAO,gCAAeF,MAAMG,OAAN,EAAf,CAAb;AACA,OAAMC,aAAaH,WAAWI,WAAX,CAAwB,YAAxB,CAAnB;AACA,OAAMC,SAASN,MAAMO,SAAN,EAAf;AACA,OAAMC,SAAS,EAAEC,OAAO,CAAT,EAAYC,SAAS,CAArB,EAAwBC,wBAAwB,CAAhD,EAAf;AACA,OAAMC,cAAc,IAApB;AACA,OAAMC,cAAc,mDAA+BX,IAA/B,CAApB;;AAEA,KAAKW,YAAYC,MAAZ,KAAuB,CAA5B,EAAgC;AAC/BN,SAAOC,KAAP,GAAeI,YAAYC,MAA3B;AACAN,SAAOE,OAAP,GAAiBK,mCAAoCX,UAApC,EAAgDS,WAAhD,EAA6DD,WAA7D,EAA0EN,MAA1E,CAAjB;AACAE,SAAOG,sBAAP,GAAgCH,OAAOE,OAAP,GAAiBF,OAAOC,KAAxB,GAAgC,GAAhE;AACA;;AAED,QAAOD,MAAP;AACA,C;;AA1DD;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA,MAAMQ,wBAAwB,0CAA9B;;AAEA;;;;;;;;;;AAUA,MAAMD,qCAAqC,SAArCA,kCAAqC,CAAUX,UAAV,EAAsBS,WAAtB,EAAmCD,WAAnC,EAAgDN,MAAhD,EAAyD;AACnG,OAAMW,yBAAyB,wBAAUD,qBAAV,EAAiC,2BAAaV,MAAb,CAAjC,CAA/B;;AAEA,QAAOO,YAAYK,MAAZ,CAAoBC,cAAc;AACxC,QAAMC,oBAAoB,sDAAwBhB,UAAxB,EAAoCe,UAApC,EAAgDP,WAAhD,EAA6DN,MAA7D,CAA1B;;AAEA,MAAK,CAAEW,sBAAP,EAAgC;AAC/B,UAAOG,kBAAkBC,kBAAlB,KAAyC,GAAhD;AACA;AACD,SAAOD,kBAAkBC,kBAAlB,GAAuC,EAA9C;AACA,EAPM,EAOHP,MAPJ;AAQA,CAXD;;AAaA","file":"matchKeywordInSubheadings.js","sourcesContent":["import { includes } from \"lodash-es\";\nimport getFunctionWordsLanguages from \"../helpers/getFunctionWordsLanguages\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport { getSubheadingContentsTopLevel } from \"../stringProcessing/getSubheadings\";\nimport stripSomeTags from \"../stringProcessing/stripNonTextTags\";\nimport { findTopicFormsInString } from \"./findKeywordFormsInString\";\n\nconst functionWordLanguages = getFunctionWordsLanguages();\n\n/**\n * Computes the amount of subheadings reflecting the topic.\n *\n * @param {Object}      topicForms      The main key phrase and its synonyms to check.\n * @param {string[]}    subheadings     The subheadings to check.\n * @param {boolean}     useSynonyms     Whether to match synonyms or only main keyphrase.\n * @param {string}      locale          The current locale.\n *\n * @returns {number} The amount of subheadings reflecting the topic.\n */\nconst numberOfSubheadingsReflectingTopic = function( topicForms, subheadings, useSynonyms, locale ) {\n\tconst isFunctionWordLanguage = includes( functionWordLanguages, getLanguage( locale ) );\n\n\treturn subheadings.filter( subheading => {\n\t\tconst matchedTopicForms = findTopicFormsInString( topicForms, subheading, useSynonyms, locale );\n\n\t\tif ( ! isFunctionWordLanguage ) {\n\t\t\treturn matchedTopicForms.percentWordMatches === 100;\n\t\t}\n\t\treturn matchedTopicForms.percentWordMatches > 50;\n\t} ).length;\n};\n\n/**\n * Checks if there are any subheadings like h2 in the text\n * and if they have the key phrase and the keywords' respective morphological forms in them.\n *\n * Also checks for synonyms.\n *\n * @param {Object}      paper       The paper object containing the text and keyword.\n * @param {Researcher}  researcher  The researcher object.\n *\n * @returns {Object} The result object.\n */\nexport default function( paper, researcher ) {\n\tconst text = stripSomeTags( paper.getText() );\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\tconst locale = paper.getLocale();\n\tconst result = { count: 0, matches: 0, percentReflectingTopic: 0 };\n\tconst useSynonyms = true;\n\tconst subheadings = getSubheadingContentsTopLevel( text );\n\n\tif ( subheadings.length !== 0 ) {\n\t\tresult.count = subheadings.length;\n\t\tresult.matches = numberOfSubheadingsReflectingTopic( topicForms, subheadings, useSynonyms, locale );\n\t\tresult.percentReflectingTopic = result.matches / result.count * 100;\n\t}\n\n\treturn result;\n}\n"]}