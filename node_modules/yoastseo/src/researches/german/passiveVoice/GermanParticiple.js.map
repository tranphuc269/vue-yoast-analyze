{"version":3,"sources":["../../../../../src/researches/german/passiveVoice/GermanParticiple.js"],"names":["exceptionsParticiplesActive","auxiliaries","participleLike","exceptionsRegex","GermanParticiple","participle","sentencePart","attributes","Participle","call","setSentencePartPassiveness","isPassive","require","inherits","prototype","hasNounSuffix","isInExceptionList","hasHabenSeinException","isAuxiliary","getParticiple","match","participleIndices","getSentencePart","habenSeinIndices","length","currentParticiple","index"],"mappings":";;;;;;AAAA;;;;AACA;;AAEA;;;;AAGA;;;;AAMA;;;;AARA,MAAMA,8BAA8B,4CAApC;;AAGA,MAAMC,cAAc,6BAAqBC,cAAzC;;AAEA,MAAMC,kBACL,4HADD;;AAMA;;;;;;;;;AASA,MAAMC,mBAAmB,SAAnBA,gBAAmB,CAAWC,UAAX,EAAuBC,YAAvB,EAAqCC,UAArC,EAAkD;AAC1EC,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBJ,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACA,OAAKG,0BAAL,CAAiC,KAAKC,SAAL,EAAjC;AACA,CAHD;;AAKAC,QAAS,MAAT,EAAkBC,QAAlB,CAA4BT,gBAA5B,EAA8CI,oBAA9C;;AAEA;;;;;AAKAJ,iBAAiBU,SAAjB,CAA2BH,SAA3B,GAAuC,YAAW;AACjD,SAAQ,CAAE,KAAKI,aAAL,EAAF,IACL,CAAE,KAAKC,iBAAL,EADG,IAEL,CAAE,KAAKC,qBAAL,EAFG,IAGL,CAAE,KAAKC,WAAL,EAHL;AAIA,CALD;;AAOA;;;;;;AAMAd,iBAAiBU,SAAjB,CAA2BE,iBAA3B,GAA+C,YAAW;AACzD,SAAO,wBAAUhB,2BAAV,EAAuC,KAAKmB,aAAL,EAAvC,CAAP;AACA,CAFD;;AAIA;;;;;;AAMAf,iBAAiBU,SAAjB,CAA2BC,aAA3B,GAA2C,YAAW;AACrD,SAAO,KAAKI,aAAL,GAAqBC,KAArB,CAA4BjB,eAA5B,MAAkD,IAAzD;AACA,CAFD;;AAIA;;;;;;AAMAC,iBAAiBU,SAAjB,CAA2BG,qBAA3B,GAAmD,YAAW;AAC7D,QAAMI,oBAAoB,+BAAY,KAAKF,aAAL,EAAZ,EAAkC,KAAKG,eAAL,EAAlC,CAA1B;AACA,MAAIC,mBAAmB,mCAAkB,CAAE,OAAF,EAAW,MAAX,CAAlB,EAAuC,KAAKD,eAAL,EAAvC,CAAvB;;AAEA;AACA,MAAKD,kBAAkBG,MAAlB,KAA6B,CAA7B,IAAkCD,iBAAiBC,MAAjB,KAA4B,CAAnE,EAAuE;AACtE,WAAO,KAAP;AACA;;AAEDD,qBAAmB,mBAAKA,gBAAL,EAAuB,OAAvB,CAAnB;AACA,QAAME,oBAAoBJ,kBAAmB,CAAnB,CAA1B;;AAEA,SAAO,wBAAUE,gBAAV,EAA4BE,kBAAkBC,KAAlB,GAA0BD,kBAAkBL,KAAlB,CAAwBI,MAAlD,GAA2D,CAAvF,CAAP;AACA,CAbD;;AAeA;;;;;;AAMApB,iBAAiBU,SAAjB,CAA2BI,WAA3B,GAAyC,YAAW;AACnD,SAAO,wBAAUjB,WAAV,EAAuB,KAAKkB,aAAL,EAAvB,CAAP;AACA,CAFD;;kBAKef,gB","file":"GermanParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport { getIndicesByWord as getIndices } from \"../../../stringProcessing/indices.js\";\nimport { getIndicesByWordList as getIndicesOfList } from \"../../../stringProcessing/indices.js\";\nimport exceptionsParticiplesActiveFactory from \"./exceptionsParticiplesActive.js\";\nconst exceptionsParticiplesActive = exceptionsParticiplesActiveFactory();\n\nimport auxiliariesFactory from \"./auxiliaries.js\";\nconst auxiliaries = auxiliariesFactory().participleLike;\n\nconst exceptionsRegex =\n\t/\\S+(apparat|arbeit|dienst|haft|halt|keit|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \\n\\r\\t.,'()\"+-;!?:/»«‹›<>])/ig;\n\nimport { includes } from \"lodash-es\";\nimport { map } from \"lodash-es\";\n\n/**\n * Creates an Participle object for the German language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {object} attributes  The attributes object.\n *\n * @constructor\n */\nconst GermanParticiple = function(  participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tthis.setSentencePartPassiveness( this.isPassive() );\n};\n\nrequire( \"util\" ).inherits( GermanParticiple, Participle );\n\n/**\n * Checks if the text is passive based on the participle exceptions.\n *\n * @returns {boolean} Returns true if there is no exception, and the sentence is passive.\n */\nGermanParticiple.prototype.isPassive = function() {\n\treturn \t! this.hasNounSuffix() &&\n\t\t\t\t! this.isInExceptionList() &&\n\t\t\t\t! this.hasHabenSeinException() &&\n\t\t\t\t! this.isAuxiliary();\n};\n\n/**\n * Checks whether a found participle is in the exception list.\n * If a word is in the exceptionsParticiplesActive list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list, otherwise returns false.\n */\nGermanParticiple.prototype.isInExceptionList = function() {\n\treturn includes( exceptionsParticiplesActive, this.getParticiple() );\n};\n\n/**\n * Checks whether a found participle ends in a noun suffix.\n * If a word ends in a noun suffix from the exceptionsRegex, it isn't a participle.\n *\n * @returns {boolean} Returns true if it ends in a noun suffix, otherwise returns false.\n */\nGermanParticiple.prototype.hasNounSuffix = function() {\n\treturn this.getParticiple().match( exceptionsRegex ) !== null;\n};\n\n/**\n * Checks whether a participle is followed by 'haben' or 'sein'.\n * If a participle is followed by one of these, the sentence is not passive.\n *\n * @returns {boolean} Returns true if it is an exception, otherwise returns false.\n */\nGermanParticiple.prototype.hasHabenSeinException = function() {\n\tconst participleIndices = getIndices( this.getParticiple(), this.getSentencePart() );\n\tlet habenSeinIndices = getIndicesOfList( [ \"haben\", \"sein\" ], this.getSentencePart() );\n\n\t// Don't check further if there is no participle or no haben/sein.\n\tif ( participleIndices.length === 0 || habenSeinIndices.length === 0 ) {\n\t\treturn false;\n\t}\n\n\thabenSeinIndices = map( habenSeinIndices, \"index\" );\n\tconst currentParticiple = participleIndices[ 0 ];\n\n\treturn includes( habenSeinIndices, currentParticiple.index + currentParticiple.match.length + 1 );\n};\n\n/**\n * Checks whether a found participle is an auxiliary.\n * If a word is an auxiliary, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is an auxiliary, otherwise returns false.\n */\nGermanParticiple.prototype.isAuxiliary = function() {\n\treturn includes( auxiliaries, this.getParticiple() );\n};\n\n\nexport default GermanParticiple;\n"]}