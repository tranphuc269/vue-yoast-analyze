{"version":3,"sources":["../../../../src/assessments/readability/paragraphTooLongAssessment.js"],"names":["recommendedValue","getTooLongParagraphs","paragraphsLength","paragraph","wordCount","calculateParagraphLengthResult","tooLongParagraphs","i18n","score","urlTitle","urlCallToAction","length","longestParagraphLength","hasMarks","text","sprintf","dgettext","dngettext","sortParagraphs","paragraphs","sort","a","b","paragraphLengthMarker","paper","researcher","getResearch","paragraphText","marked","Mark","original","paragraphLengthAssessment","paragraphLengthResult","assessmentResult","AssessmentResult","setScore","setText","setHasMarks","isApplicable","hasText","identifier","getResult","getMarks"],"mappings":"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","file":"paragraphTooLongAssessment.js","sourcesContent":["import { filter, map } from \"lodash-es\";\n\nimport { inRangeEndInclusive as inRange } from \"../../helpers/inRange\";\nimport isParagraphTooLong from \"../../helpers/isValueTooLong\";\nimport marker from \"../../markers/addMark\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport { stripBlockTagsAtStartEnd as stripHTMLTags } from \"../../stringProcessing/stripHTMLTags\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport Mark from \"../../values/Mark\";\n\n// 150 is the recommendedValue for the maximum paragraph length.\nconst recommendedValue = 150;\n\n/**\n * Returns an array containing only the paragraphs longer than the recommended length.\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @returns {number} The number of too long paragraphs.\n */\nconst getTooLongParagraphs = function( paragraphsLength  ) {\n\treturn filter( paragraphsLength, function( paragraph ) {\n\t\treturn isParagraphTooLong( recommendedValue, paragraph.wordCount );\n\t} );\n};\n\n/**\n * Returns the scores and text for the ParagraphTooLongAssessment\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @param {number} tooLongParagraphs The number of too long paragraphs.\n * @param {object} i18n The i18n object used for translations.\n * @returns {{score: number, text: string }} the assessmentResult.\n */\nconst calculateParagraphLengthResult = function( paragraphsLength, tooLongParagraphs, i18n ) {\n\tlet score;\n\tconst urlTitle = createAnchorOpeningTag( \"https://yoa.st/35d\" );\n\tconst urlCallToAction = createAnchorOpeningTag( \"https://yoa.st/35e\" );\n\n\tif ( paragraphsLength.length === 0 ) {\n\t\treturn {};\n\t}\n\n\tconst longestParagraphLength = paragraphsLength[ 0 ].wordCount;\n\n\tif ( longestParagraphLength <= 150 ) {\n\t\t// Green indicator.\n\t\tscore = 9;\n\t}\n\n\tif ( inRange( longestParagraphLength, 150, 200 ) ) {\n\t\t// Orange indicator.\n\t\tscore = 6;\n\t}\n\n\tif ( longestParagraphLength > 200 ) {\n\t\t// Red indicator.\n\t\tscore = 3;\n\t}\n\n\tif ( score >= 7 ) {\n\t\treturn {\n\t\t\tscore: score,\n\t\t\thasMarks: false,\n\n\t\t\ttext: i18n.sprintf(\n\t\t\t\t/* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n\t\t\t\ti18n.dgettext( \"js-text-analysis\",\n\t\t\t\t\t\"%1$sParagraph length%2$s: None of the paragraphs are too long. Great job!\" ),\n\t\t\t\turlTitle,\n\t\t\t\t\"</a>\"\n\t\t\t),\n\t\t};\n\t}\n\treturn {\n\t\tscore: score,\n\t\thasMarks: true,\n\t\ttext: i18n.sprintf(\n\t\t\t/* Translators: %1$s and %5$s expand to a link on yoast.com, %2$s expands to the anchor end tag, %3$d expands to the\n\t\t\tnumber of paragraphs over the recommended word limit, %4$d expands to the word limit */\n\t\t\ti18n.dngettext( \"js-text-analysis\",\n\t\t\t\t\"%1$sParagraph length%2$s: %3$d of the paragraphs contains more than the recommended maximum of %4$d words.\" +\n\t\t\t\t\" %5$sShorten your paragraphs%2$s!\", \"%1$sParagraph length%2$s: %3$d of the paragraphs contain more than the \" +\n\t\t\t\t\"recommended maximum of %4$d words. %5$sShorten your paragraphs%2$s!\", tooLongParagraphs.length ),\n\t\t\turlTitle,\n\t\t\t\"</a>\",\n\t\t\ttooLongParagraphs.length,\n\t\t\trecommendedValue,\n\t\t\turlCallToAction\n\t\t),\n\t};\n};\n\n/**\n * Sort the paragraphs based on word count.\n *\n * @param {Array} paragraphs The array with paragraphs.\n * @returns {Array} The array sorted on word counts.\n */\nvar sortParagraphs = function( paragraphs ) {\n\treturn paragraphs.sort(\n\t\tfunction( a, b ) {\n\t\t\treturn b.wordCount - a.wordCount;\n\t\t}\n\t);\n};\n\n/**\n * Creates a marker for the paragraphs.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {Array} An array with marked paragraphs.\n */\nvar paragraphLengthMarker = function( paper, researcher ) {\n\tvar paragraphsLength = researcher.getResearch( \"getParagraphLength\" );\n\tvar tooLongParagraphs = getTooLongParagraphs( paragraphsLength );\n\treturn map( tooLongParagraphs, function( paragraph ) {\n\t\tvar paragraphText = stripHTMLTags( paragraph.text );\n\t\tvar marked = marker( paragraphText );\n\t\treturn new Mark( {\n\t\t\toriginal: paragraphText,\n\t\t\tmarked: marked,\n\t\t} );\n\t} );\n};\n\n/**\n * Runs the getParagraphLength module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nvar paragraphLengthAssessment = function( paper, researcher, i18n ) {\n\tvar paragraphsLength = researcher.getResearch( \"getParagraphLength\" );\n\n\tparagraphsLength = sortParagraphs( paragraphsLength );\n\n\tvar tooLongParagraphs = getTooLongParagraphs( paragraphsLength );\n\tvar paragraphLengthResult = calculateParagraphLengthResult( paragraphsLength, tooLongParagraphs, i18n );\n\tvar assessmentResult = new AssessmentResult();\n\n\tassessmentResult.setScore( paragraphLengthResult.score );\n\tassessmentResult.setText( paragraphLengthResult.text );\n\tassessmentResult.setHasMarks( paragraphLengthResult.hasMarks );\n\n\treturn assessmentResult;\n};\n\n/**\n * Checks if the paragraphTooLong assessment is applicable to the paper.\n *\n * @param {Paper} paper The paper to check.\n *\n * @returns {boolean} Returns true if the assessment is applicable to the paper.\n */\nvar isApplicable = function( paper ) {\n\treturn paper.hasText();\n};\n\nexport default {\n\tidentifier: \"textParagraphTooLong\",\n\tgetResult: paragraphLengthAssessment,\n\tisApplicable: isApplicable,\n\tgetMarks: paragraphLengthMarker,\n};\n"]}