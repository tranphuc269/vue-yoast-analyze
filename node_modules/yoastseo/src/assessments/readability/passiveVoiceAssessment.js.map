{"version":3,"sources":["../../../../src/assessments/readability/passiveVoiceAssessment.js"],"names":["availableLanguages","calculatePassiveVoiceResult","passiveVoice","i18n","score","percentage","recommendedValue","urlTitle","urlCallToAction","total","passives","length","hasMarks","text","sprintf","dgettext","passiveVoiceMarker","paper","researcher","getResearch","sentence","marked","Mark","original","passiveVoiceAssessment","passiveVoiceResult","assessmentResult","AssessmentResult","setScore","setText","setHasMarks","isApplicable","isLanguageAvailable","getLocale","hasText","identifier","getResult","getMarks"],"mappings":"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","file":"passiveVoiceAssessment.js","sourcesContent":["import { map } from \"lodash-es\";\n\nimport formatNumber from \"../../helpers/formatNumber\";\nimport getLanguageAvailability from \"../../helpers/getLanguageAvailability\";\nimport { inRangeEndInclusive as inRange } from \"../../helpers/inRange\";\nimport marker from \"../../markers/addMark\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport { stripIncompleteTags as stripTags } from \"../../stringProcessing/stripHTMLTags\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport Mark from \"../../values/Mark\";\n\nconst availableLanguages = [ \"en\", \"de\", \"fr\", \"es\", \"ru\", \"it\", \"nl\", \"pl\", \"sv\", \"pt\", \"id\", \"ar\", \"he\", \"hu\", \"tr\" ];\n\n/**\n * Calculates the result based on the number of sentences and passives.\n * @param {object} passiveVoice The object containing the number of sentences and passives\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nconst calculatePassiveVoiceResult = function( passiveVoice, i18n ) {\n\tlet score;\n\tlet percentage = 0;\n\tconst recommendedValue = 10;\n\tconst urlTitle = createAnchorOpeningTag( \"https://yoa.st/34t\" );\n\tconst urlCallToAction = createAnchorOpeningTag( \"https://yoa.st/34u\" );\n\n\t// Prevent division by zero errors.\n\tif ( passiveVoice.total !== 0 ) {\n\t\tpercentage = formatNumber( ( passiveVoice.passives.length / passiveVoice.total ) * 100 );\n\t}\n\n\tconst hasMarks = percentage > 0;\n\n\tif ( percentage <= 10 ) {\n\t\t// Green indicator.\n\t\tscore = 9;\n\t}\n\n\tif ( inRange( percentage, 10, 15 ) ) {\n\t\t// Orange indicator.\n\t\tscore = 6;\n\t}\n\n\tif ( percentage > 15 ) {\n\t\t// Red indicator.\n\t\tscore = 3;\n\t}\n\n\tif ( score >= 7 ) {\n\t\treturn {\n\t\t\tscore: score,\n\t\t\thasMarks: hasMarks,\n\t\t\ttext: i18n.sprintf(\n\t\t\t\t/* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n\t\t\t\ti18n.dgettext(\n\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\"%1$sPassive voice%2$s: You're using enough active voice. That's great!\" ),\n\t\t\t\turlTitle,\n\t\t\t\t\"</a>\"\n\t\t\t),\n\t\t};\n\t}\n\treturn {\n\t\tscore: score,\n\t\thasMarks: hasMarks,\n\t\ttext: i18n.sprintf(\n\t\t\t/* Translators: %1$s and %5$s expand to a link on yoast.com, %2$s expands to the anchor end tag,\n\t\t\t%3$s expands to the percentage of sentences in passive voice, %4$s expands to the recommended value. */\n\t\t\ti18n.dgettext(\n\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\"%1$sPassive voice%2$s: %3$s of the sentences contain passive voice, which is more than the recommended maximum of %4$s. \" +\n\t\t\t\t\"%5$sTry to use their active counterparts%2$s.\"\n\n\t\t\t),\n\t\t\turlTitle,\n\t\t\t\"</a>\",\n\t\t\tpercentage + \"%\",\n\t\t\trecommendedValue + \"%\",\n\t\t\turlCallToAction\n\t\t),\n\t};\n};\n\n/**\n * Marks all sentences that have the passive voice.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nconst passiveVoiceMarker = function( paper, researcher ) {\n\tconst passiveVoice = researcher.getResearch( \"passiveVoice\" );\n\treturn map( passiveVoice.passives, function( sentence ) {\n\t\tsentence = stripTags( sentence );\n\t\tconst marked = marker( sentence );\n\t\treturn new Mark( {\n\t\t\toriginal: sentence,\n\t\t\tmarked: marked,\n\t\t} );\n\t} );\n};\n\n/**\n * Runs the passiveVoice module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nconst passiveVoiceAssessment = function( paper, researcher, i18n ) {\n\tconst passiveVoice = researcher.getResearch( \"passiveVoice\" );\n\n\tconst passiveVoiceResult = calculatePassiveVoiceResult( passiveVoice, i18n );\n\n\tconst assessmentResult = new AssessmentResult();\n\n\tassessmentResult.setScore( passiveVoiceResult.score );\n\tassessmentResult.setText( passiveVoiceResult.text );\n\tassessmentResult.setHasMarks( passiveVoiceResult.hasMarks );\n\n\treturn assessmentResult;\n};\n\n/**\n * Checks if passive voice analysis is available for the language of the paper.\n *\n * @param {Object} paper The paper to check.\n *\n * @returns {boolean} Returns true if the language is available and the paper is not empty.\n */\nconst isApplicable = function( paper ) {\n\tconst isLanguageAvailable = getLanguageAvailability( paper.getLocale(), availableLanguages );\n\treturn ( isLanguageAvailable && paper.hasText() );\n};\n\nexport default {\n\tidentifier: \"passiveVoice\",\n\tgetResult: passiveVoiceAssessment,\n\tisApplicable: isApplicable,\n\tgetMarks: passiveVoiceMarker,\n};\n"]}