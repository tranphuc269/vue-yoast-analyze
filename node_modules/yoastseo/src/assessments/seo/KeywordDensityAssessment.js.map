{"version":3,"sources":["../../../../src/assessments/seo/KeywordDensityAssessment.js"],"names":["KeywordDensityAssessment","Assessment","constructor","config","defaultConfig","parameters","noWordForms","overMaximum","maximum","minimum","multipleWordForms","scores","wayOverMaximum","correctDensity","underMinimum","urlTitle","urlCallToAction","identifier","_config","setBoundaries","text","keyphraseLength","_hasMorphologicalForms","_boundaries","_minRecommendedKeywordCount","_maxRecommendedKeywordCount","getResult","paper","researcher","i18n","getData","includes","getLocale","_keywordCount","getResearch","length","getText","assessmentResult","AssessmentResult","_keywordDensity","calculatedScore","calculateResult","setScore","score","setText","resultText","setHasMarks","count","hasNoMatches","hasTooFewMatches","hasGoodNumberOfMatches","hasTooManyMatches","sprintf","dgettext","dngettext","getMarks","markings","isApplicable","hasText","hasKeyword"],"mappings":"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","file":"KeywordDensityAssessment.js","sourcesContent":["import { merge } from \"lodash-es\";\n\nimport recommendedKeywordCount from \"../../assessmentHelpers/recommendedKeywordCount.js\";\nimport Assessment from \"../../assessment\";\nimport getLanguage from \"../../helpers/getLanguage\";\nimport getLanguagesWithWordFormSupport from \"../../helpers/getLanguagesWithWordFormSupport\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport { inRangeEndInclusive, inRangeStartEndInclusive, inRangeStartInclusive } from \"../../helpers/inRange\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport keyphraseLengthFactor from \"../../helpers/keyphraseLengthFactor.js\";\nimport countWords from \"../../stringProcessing/countWords\";\n\n/**\n * Represents the assessment that will look if the keyphrase density is within the recommended range.\n */\nclass KeywordDensityAssessment extends Assessment {\n\t/**\n\t * Sets the identifier and the config.\n\t *\n\t * @param {Object} [config] The configuration to use.\n\t *\n\t * If word forms are not available:\n\t * @param {number} [config.parameters.noWordForms.overMaximum] The percentage of keyphrase instances in the text that\n\t * is way over the maximum.\n\t * @param {number} [config.parameters.noWordForms.maximum] The maximum percentage of keyphrase instances in the text.\n\t * @param {number} [config.parameters.noWordForms.minimum] The minimum percentage of keyphrase instances in the text.\n\t *\n\t * If word forms are available:\n\t * @param {number} [config.parameters.multipleWordForms.overMaximum] The percentage of keyphrase instances in the text that\n\t * is way over the maximum.\n\t * @param {number} [config.parameters.multipleWordForms.maximum] The maximum percentage of keyphrase instances in the text.\n\t * @param {number} [config.parameters.multipleWordForms.minimum] The minimum percentage of keyphrase instances in the text.\n\t *\n\t * @param {number} [config.scores.wayOverMaximum] The score to return if there are way too many instances of keyphrase in the text.\n\t * @param {number} [config.scores.overMaximum] The score to return if there are too many instances of keyphrase in the text.\n\t * @param {number} [config.scores.correctDensity] The score to return if there is a good number of keyphrase instances in the text.\n\t * @param {number} [config.scores.underMinimum] The score to return if there is not enough keyphrase instances in the text.\n\t *\n\t * @param {string} [config.url] The URL to the relevant KB article.\n\t *\n\t * @returns {void}\n\t */\n\tconstructor( config = {} ) {\n\t\tsuper();\n\n\t\tconst defaultConfig = {\n\t\t\tparameters: {\n\t\t\t\tnoWordForms: {\n\t\t\t\t\toverMaximum: 4,\n\t\t\t\t\tmaximum: 3,\n\t\t\t\t\tminimum: 0.5,\n\t\t\t\t},\n\t\t\t\tmultipleWordForms: {\n\t\t\t\t\toverMaximum: 4,\n\t\t\t\t\tmaximum: 3.5,\n\t\t\t\t\tminimum: 0.5,\n\t\t\t\t},\n\t\t\t},\n\t\t\tscores: {\n\t\t\t\twayOverMaximum: -50,\n\t\t\t\toverMaximum: -10,\n\t\t\t\tcorrectDensity: 9,\n\t\t\t\tunderMinimum: 4,\n\t\t\t},\n\t\t\turlTitle: createAnchorOpeningTag( \"https://yoa.st/33v\" ),\n\t\t\turlCallToAction: createAnchorOpeningTag( \"https://yoa.st/33w\" ),\n\t\t};\n\n\t\tthis.identifier = \"keywordDensity\";\n\t\tthis._config = merge( defaultConfig, config );\n\t}\n\n\t/**\n\t * Determines correct boundaries depending on the availability\n\t * of morphological forms.\n\t *\n\t * @param {string} text The paper text.\n\t * @param {number} keyphraseLength The length of the keyphrase in words.\n\t *\n\t * @returns {void}\n\t */\n\tsetBoundaries( text, keyphraseLength ) {\n\t\tif ( this._hasMorphologicalForms ) {\n\t\t\tthis._boundaries = this._config.parameters.multipleWordForms;\n\t\t} else {\n\t\t\tthis._boundaries = this._config.parameters.noWordForms;\n\t\t}\n\t\tthis._minRecommendedKeywordCount = recommendedKeywordCount( text, keyphraseLength, this._boundaries.minimum, \"min\" );\n\t\tthis._maxRecommendedKeywordCount = recommendedKeywordCount( text, keyphraseLength, this._boundaries.maximum, \"max\" );\n\t}\n\n\t/**\n\t * Runs the keyphrase density module, based on this returns an assessment\n\t * result with score.\n\t *\n\t * @param {Paper} paper The paper to use for the assessment.\n\t * @param {Researcher} researcher The researcher used for calling the\n\t *                                research.\n\t * @param {Jed} i18n The object used for translations.\n\t *\n\t * @returns {AssessmentResult} The result of the assessment.\n\t */\n\tgetResult( paper, researcher, i18n ) {\n\t\tthis._hasMorphologicalForms = researcher.getData( \"morphology\" ) !== false &&\n\t\t\tgetLanguagesWithWordFormSupport().includes( getLanguage( paper.getLocale() ) );\n\n\t\tthis._keywordCount = researcher.getResearch( \"keywordCount\" );\n\t\tconst keyphraseLength = this._keywordCount.length;\n\n\t\tthis.setBoundaries( paper.getText(), keyphraseLength );\n\n\t\tconst assessmentResult = new AssessmentResult();\n\n\t\tthis._keywordDensity = researcher.getResearch( \"getKeywordDensity\" );\n\n\t\tthis._keywordDensity = this._keywordDensity * keyphraseLengthFactor( keyphraseLength );\n\t\tconst calculatedScore = this.calculateResult( i18n );\n\n\t\tassessmentResult.setScore( calculatedScore.score );\n\t\tassessmentResult.setText( calculatedScore.resultText );\n\t\tassessmentResult.setHasMarks( this._keywordCount.count > 0 );\n\n\t\treturn assessmentResult;\n\t}\n\n\t/**\n\t * Checks whether there are no keyphrase matches in the text.\n\t *\n\t * @returns {boolean} Returns true if the keyphrase count is 0.\n\t */\n\thasNoMatches() {\n\t\treturn this._keywordCount.count === 0;\n\t}\n\n\t/**\n\t * Checks whether there are too few keyphrase matches in the text.\n\t *\n\t * @returns {boolean} Returns true if the rounded keyword density is between 0 and the recommended minimum\n\t * or if there there is only 1 keyword match (regardless of the density).\n\t */\n\thasTooFewMatches() {\n\t\treturn inRangeStartInclusive(\n\t\t\tthis._keywordDensity,\n\t\t\t0,\n\t\t\tthis._boundaries.minimum,\n\t\t) || this._keywordCount.count === 1;\n\t}\n\n\t/**\n\t * Checks whether there is a good number of keyphrase matches in the text.\n\t *\n\t * @returns {boolean} Returns true if the rounded keyword density is between the recommended minimum\n\t * and the recommended maximum or if the keyword count is 2 and the recommended minimum is lower than 2.\n\t */\n\thasGoodNumberOfMatches() {\n\t\treturn inRangeStartEndInclusive(\n\t\t\tthis._keywordDensity,\n\t\t\tthis._boundaries.minimum,\n\t\t\tthis._boundaries.maximum\n\t\t) || ( this._keywordCount.count === 2 && this._minRecommendedKeywordCount <= 2 );\n\t}\n\n\t/**\n\t * Checks whether the number of keyphrase matches in the text is between the\n\t * recommended maximum and the specified overMaximum value.\n\t *\n\t * @returns {boolean} Returns true if the rounded keyphrase density is between\n\t *                    the recommended maximum and the specified overMaximum\n\t *                    value.\n\t */\n\thasTooManyMatches() {\n\t\treturn inRangeEndInclusive(\n\t\t\tthis._keywordDensity,\n\t\t\tthis._boundaries.maximum,\n\t\t\tthis._boundaries.overMaximum\n\t\t);\n\t}\n\n\t/**\n\t * Returns the score for the keyphrase density.\n\t *\n\t * @param {Jed} i18n The object used for translations.\n\t *\n\t * @returns {Object} The object with calculated score and resultText.\n\t */\n\tcalculateResult( i18n ) {\n\t\tif ( this.hasNoMatches() ) {\n\t\t\treturn {\n\t\t\t\tscore: this._config.scores.underMinimum,\n\t\t\t\tresultText: i18n.sprintf(\n\t\t\t\t\t/* Translators:\n\t\t\t\t\t%1$s and %4$s expand to links to Yoast.com,\n\t\t\t\t\t%2$s expands to the anchor end tag,\n\t\t\t\t\t%3$d expands to the recommended minimal number of times the keyphrase should occur in the text. */\n\t\t\t\t\ti18n.dgettext(\n\t\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found 0 times. \" +\n\t\t\t\t\t\t\"That's less than the recommended minimum of %3$d times for a text of this length. \" +\n\t\t\t\t\t\t\"%4$sFocus on your keyphrase%2$s!\",\n\t\t\t\t\t),\n\t\t\t\t\tthis._config.urlTitle,\n\t\t\t\t\t\"</a>\",\n\t\t\t\t\tthis._minRecommendedKeywordCount,\n\t\t\t\t\tthis._config.urlCallToAction,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif ( this.hasTooFewMatches() ) {\n\t\t\treturn {\n\t\t\t\tscore: this._config.scores.underMinimum,\n\t\t\t\tresultText: i18n.sprintf(\n\t\t\t\t\t/* Translators:\n\t\t\t\t\t%1$s and %4$s expand to links to Yoast.com,\n\t\t\t\t\t%2$s expands to the anchor end tag,\n\t\t\t\t\t%3$d expands to the recommended minimal number of times the keyphrase should occur in the text,\n\t\t\t\t\t%5$d expands to the number of times the keyphrase occurred in the text. */\n\t\t\t\t\ti18n.dngettext(\n\t\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d time. That's less than the \" +\n\t\t\t\t\t\t\"recommended minimum of %3$d times for a text of this length. %4$sFocus on your keyphrase%2$s!\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d times. That's less than the \" +\n\t\t\t\t\t\t\"recommended minimum of %3$d times for a text of this length. %4$sFocus on your keyphrase%2$s!\",\n\t\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t\t),\n\t\t\t\t\tthis._config.urlTitle,\n\t\t\t\t\t\"</a>\",\n\t\t\t\t\tthis._minRecommendedKeywordCount,\n\t\t\t\t\tthis._config.urlCallToAction,\n\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif ( this.hasGoodNumberOfMatches()  ) {\n\t\t\treturn {\n\t\t\t\tscore: this._config.scores.correctDensity,\n\t\t\t\tresultText: i18n.sprintf(\n\t\t\t\t\t/* Translators:\n\t\t\t\t\t%1$s expands to a link to Yoast.com,\n\t\t\t\t\t%2$s expands to the anchor end tag,\n\t\t\t\t\t%3$d expands to the number of times the keyphrase occurred in the text. */\n\t\t\t\t\ti18n.dngettext(\n\t\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %3$d time. This is great!\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %3$d times. This is great!\",\n\t\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t\t),\n\t\t\t\t\tthis._config.urlTitle,\n\t\t\t\t\t\"</a>\",\n\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif ( this.hasTooManyMatches() ) {\n\t\t\treturn {\n\t\t\t\tscore: this._config.scores.overMaximum,\n\t\t\t\tresultText: i18n.sprintf(\n\t\t\t\t\t/* Translators:\n\t\t\t\t\t%1$s and %4$s expand to links to Yoast.com,\n\t\t\t\t\t%2$s expands to the anchor end tag,\n\t\t\t\t\t%3$d expands to the recommended maximal number of times the keyphrase should occur in the text,\n\t\t\t\t\t%5$d expands to the number of times the keyphrase occurred in the text. */\n\t\t\t\t\ti18n.dngettext(\n\t\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d time. That's more than the \" +\n\t\t\t\t\t\t\"recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!\",\n\t\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d times. That's more than the \" +\n\t\t\t\t\t\t\"recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!\",\n\t\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t\t),\n\t\t\t\t\tthis._config.urlTitle,\n\t\t\t\t\t\"</a>\",\n\t\t\t\t\tthis._maxRecommendedKeywordCount,\n\t\t\t\t\tthis._config.urlCallToAction,\n\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\t// Implicitly returns this if the rounded keyphrase density is higher than overMaximum.\n\t\treturn {\n\t\t\tscore: this._config.scores.wayOverMaximum,\n\t\t\tresultText: i18n.sprintf(\n\t\t\t\t/* Translators:\n\t\t\t\t%1$s and %4$s expand to links to Yoast.com,\n\t\t\t\t%2$s expands to the anchor end tag,\n\t\t\t\t%3$d expands to the recommended maximal number of times the keyphrase should occur in the text,\n\t\t\t\t%5$d expands to the number of times the keyphrase occurred in the text. */\n\t\t\t\ti18n.dngettext(\n\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d time. That's way more than the \" +\n\t\t\t\t\t\"recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!\",\n\t\t\t\t\t\"%1$sKeyphrase density%2$s: The focus keyphrase was found %5$d times. That's way more than the \" +\n\t\t\t\t\t\"recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!\",\n\t\t\t\t\tthis._keywordCount.count\n\t\t\t\t),\n\t\t\t\tthis._config.urlTitle,\n\t\t\t\t\"</a>\",\n\t\t\t\tthis._maxRecommendedKeywordCount,\n\t\t\t\tthis._config.urlCallToAction,\n\t\t\t\tthis._keywordCount.count\n\t\t\t),\n\t\t};\n\t}\n\n\n\t/**\n\t * Marks keywords in the text for the keyword density assessment.\n\t *\n\t * @returns {Array<Mark>} Marks that should be applied.\n\t */\n\tgetMarks() {\n\t\treturn this._keywordCount.markings;\n\t}\n\n\n\t/**\n\t * Checks whether the paper has a text with at least 100 words and a keyword\n\t * is set.\n\t *\n\t * @param {Paper} paper The paper to use for the assessment.\n\t *\n\t * @returns {boolean} True if applicable.\n\t */\n\tisApplicable( paper ) {\n\t\treturn paper.hasText() && paper.hasKeyword() && countWords( paper.getText() ) >= 100;\n\t}\n}\n\nexport default KeywordDensityAssessment;\n"]}