{"version":3,"sources":["../../../../src/worker/scheduler/Scheduler.js"],"names":["DEFAULT_CONFIGURATION","pollTime","Scheduler","constructor","configuration","_configuration","_tasks","standard","extensions","analyze","analyzeRelatedKeywords","_pollHandle","_started","startPolling","bind","stopPolling","tick","executeNextTask","then","setTimeout","clearTimeout","schedule","id","execute","done","data","type","task","Task","push","getNextTask","length","shift","Promise","resolve","result"],"mappings":"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","file":"Scheduler.js","sourcesContent":["// External dependencies.\nimport { merge } from \"lodash-es\";\n\n// Internal dependencies.\nimport Task from \"./Task\";\n\n\nconst DEFAULT_CONFIGURATION = {\n\tpollTime: 50,\n};\n\n/**\n * The scheduler is used in the analysis web worker to schedule tasks.\n *\n * Tasks have priorities based on their type.\n * When a task is executed, the task id and data are its arguments.\n * When a task is done, the task id and the execute result are its arguments.\n *\n * Start polling runs tick.\n * 1. Tick tries to run the next task.\n * 2. After the task is run, a timeout is set (configuration.pollTime).\n * 3. On the timeout execution, tick is called again (back to step 1).\n */\nexport default class Scheduler {\n\t/**\n\t * Initializes a Scheduler.\n\t *\n\t * @param {Object}  [configuration]             The configuration.\n\t * @param {number}  [configuration.pollTime]    The time in between each task\n\t *                                              poll in milliseconds,\n\t *                                              defaults to 50.\n\t */\n\tconstructor( configuration = {} ) {\n\t\tthis._configuration = merge( DEFAULT_CONFIGURATION, configuration );\n\t\tthis._tasks = {\n\t\t\tstandard: [],\n\t\t\textensions: [],\n\t\t\tanalyze: [],\n\t\t\tanalyzeRelatedKeywords: [],\n\t\t};\n\t\tthis._pollHandle = null;\n\t\tthis._started = false;\n\n\t\t// Bind functions to this scope.\n\t\tthis.startPolling = this.startPolling.bind( this );\n\t\tthis.stopPolling = this.stopPolling.bind( this );\n\t\tthis.tick = this.tick.bind( this );\n\t}\n\n\t/**\n\t * Initialize polling.\n\t *\n\t * @returns {void}\n\t */\n\tstartPolling() {\n\t\tif ( this._started ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = true;\n\n\t\tthis.tick();\n\t}\n\n\t/**\n\t * Do a tick and execute a task.\n\t *\n\t * @returns {void}\n\t */\n\ttick() {\n\t\tthis.executeNextTask()\n\t\t\t.then( () => {\n\t\t\t\tthis._pollHandle = setTimeout( this.tick, this._configuration.pollTime );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Stop polling.\n\t *\n\t * @returns {void}\n\t */\n\tstopPolling() {\n\t\tclearTimeout( this._pollHandle );\n\t\tthis._pollHandle = null;\n\t\tthis._started = false;\n\t}\n\n\t/**\n\t * Schedule a task.\n\t *\n\t * @param {Object}   task         The task object.\n\t * @param {number}   task.id      The task id.\n\t * @param {function} task.execute The function to run for task execution.\n\t * @param {function} task.done    The function to run when the task is done.\n\t * @param {Object}   task.data    The data object to execute with.\n\t * @param {string}   task.type    The type of the task.\n\t *\n\t * @returns {void}\n\t */\n\tschedule( { id, execute, done, data, type } ) {\n\t\tconst task = new Task( id, execute, done, data, type );\n\t\tswitch ( type ) {\n\t\t\tcase \"customMessage\":\n\t\t\tcase \"loadScript\":\n\t\t\t\tthis._tasks.extensions.push( task );\n\t\t\t\tbreak;\n\t\t\tcase \"analyze\":\n\t\t\t\tthis._tasks.analyze = [ task ];\n\t\t\t\tbreak;\n\t\t\tcase \"analyzeRelatedKeywords\":\n\t\t\t\tthis._tasks.analyzeRelatedKeywords = [ task ];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._tasks.standard.push( task );\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the next task from the queue. Queues are sorted from lowest to highest priority.\n\t *\n\t * @returns {Task|null} The next task or null if none are available.\n\t */\n\tgetNextTask() {\n\t\tif ( this._tasks.extensions.length > 0 ) {\n\t\t\treturn this._tasks.extensions.shift();\n\t\t}\n\n\t\tif ( this._tasks.analyze.length > 0 ) {\n\t\t\treturn this._tasks.analyze.shift();\n\t\t}\n\n\t\tif ( this._tasks.analyzeRelatedKeywords.length > 0 ) {\n\t\t\treturn this._tasks.analyzeRelatedKeywords.shift();\n\t\t}\n\n\t\tif ( this._tasks.standard.length > 0 ) {\n\t\t\treturn this._tasks.standard.shift();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Executes the next task.\n\t *\n\t * @returns {Promise} Resolves once the task is done, with the result of the task.\n\t */\n\texecuteNextTask() {\n\t\tconst task = this.getNextTask();\n\t\tif ( task === null ) {\n\t\t\treturn Promise.resolve( null );\n\t\t}\n\n\t\treturn Promise.resolve()\n\t\t\t.then( () => {\n\t\t\t\treturn task.execute( task.id, task.data );\n\t\t\t} )\n\t\t\t.then( ( result ) => {\n\t\t\t\ttask.done( task.id, result );\n\n\t\t\t\treturn result;\n\t\t\t} );\n\t}\n}\n"]}