{"version":3,"sources":["../../../src/worker/AnalysisWebWorker.js"],"names":["assessments","bundledPlugins","helpers","markers","string","interpreters","config","YoastSEO","Assessor","Assessment","SEOAssessor","ContentAssessor","TaxonomyAssessor","Pluggable","Researcher","SnippetPreview","RelatedKeywordAssessor","Paper","AssessmentResult","keyphraseDistribution","seo","KeyphraseDistributionAssessment","logger","setDefaultLevel","AnalysisWebWorker","constructor","scope","_scope","_configuration","contentAnalysisActive","keywordAnalysisActive","useCornerstone","useTaxonomy","useKeywordDistribution","locale","_scheduler","Scheduler","_paper","_relatedKeywords","_i18n","createI18n","_researcher","_contentAssessor","_seoAssessor","_relatedKeywordAssessor","_results","readability","results","score","_registeredAssessments","_registeredMessageHandlers","_registeredParsers","setupTreeAnalysis","bindActions","assessRelatedKeywords","bind","registerAssessment","registerMessageHandler","refreshAssessment","handleMessage","analyzeRelatedKeywords","analyze","runResearch","analyzeDone","analyzeRelatedKeywordsDone","loadScript","loadScriptDone","customMessage","customMessageDone","clearCache","runResearchDone","_treeResearcher","_contentTreeAssessor","_seoTreeAssessor","_relatedKeywordTreeAssessor","_registeredTreeAssessments","_seoScoreAggregator","SEOScoreAggregator","_contentScoreAggregator","ReadabilityScoreAggregator","_tree","_treeBuilder","register","onmessage","analysisWorker","registerParser","yoast","analysis","data","type","id","payload","Transporter","parse","debug","initialize","startPolling","schedule","execute","done","name","error","Error","console","warn","translations","domain","locale_data","Jed","createContentAssessor","assessor","CornerstoneContentAssessor","createSEOAssessor","researcher","CornerstoneSEOAssessor","getAssessment","addAssessment","forEach","assessment","createRelatedKeywordsAssessor","RelatedKeywordTaxonomyAssessor","CornerstoneRelatedKeywordAssessor","send","serialize","postMessage","shouldAssessorsUpdate","configuration","contentAssessor","seoAssessor","configurationKeys","Object","keys","update","researchData","research","addResearchData","params","defaultQueryParams","setLevel","logLevel","enabledFeatures","pluginName","InvalidTypeError","combinedName","push","handler","parser","isApplicable","setLocale","shouldReadabilityUpdate","paper","getText","getLocale","shouldSeoUpdate","key","keyword","synonyms","relatedKeywords","_text","removeHtmlBlocks","paperHasChanges","equals","setPaper","exception","assess","oldAssessor","treeAssessor","scoreAggregator","requestedRelatedKeywordKeys","relatedKeyphraseResults","result","length","relatedKeyword","analysisCombination","tree","oldAssessmentResults","treeAssessmentResults","aggregate","generateAssessmentError","setScore","setText","sprintf","dgettext","keywordKeys","Promise","all","map","relatedPaper","then","url","loaded","message","importScripts","success","morphologyData","getData","getResearch"],"mappings":"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","file":"AnalysisWebWorker.js","sourcesContent":["// External dependencies.\nimport { autop } from \"@wordpress/autop\";\nimport { enableFeatures } from \"@yoast/feature-flag\";\nimport Jed from \"jed\";\nimport { forEach, has, includes, isNull, isObject, isString, isUndefined, merge, pickBy, isEmpty } from \"lodash-es\";\nimport { getLogger } from \"loglevel\";\n\n// YoastSEO.js dependencies.\nimport * as assessments from \"../assessments\";\nimport * as bundledPlugins from \"../bundledPlugins\";\nimport * as helpers from \"../helpers\";\nimport * as markers from \"../markers\";\nimport * as string from \"../stringProcessing\";\nimport * as interpreters from \"../interpreters\";\nimport * as config from \"../config\";\n\nimport Assessor from \"../assessor\";\nimport Assessment from \"../assessment\";\nimport SEOAssessor from \"../seoAssessor\";\nimport ContentAssessor from \"../contentAssessor\";\nimport TaxonomyAssessor from \"../taxonomyAssessor\";\nimport Pluggable from \"../pluggable\";\nimport Researcher from \"../researcher\";\nimport SnippetPreview from \"../snippetPreview\";\nimport Paper from \"../values/Paper\";\nimport AssessmentResult from \"../values/AssessmentResult\";\nimport RelatedKeywordAssessor from \"../relatedKeywordAssessor\";\n\nconst YoastSEO = {\n\tAssessor,\n\tAssessment,\n\tSEOAssessor,\n\tContentAssessor,\n\tTaxonomyAssessor,\n\tPluggable,\n\tResearcher,\n\tSnippetPreview,\n\tRelatedKeywordAssessor,\n\n\tPaper,\n\tAssessmentResult,\n\n\tassessments,\n\tbundledPlugins,\n\thelpers,\n\tmarkers,\n\tstring,\n\tinterpreters,\n\tconfig,\n};\n\n// Internal dependencies.\nimport CornerstoneContentAssessor from \"../cornerstone/contentAssessor\";\nimport CornerstoneRelatedKeywordAssessor from \"../cornerstone/relatedKeywordAssessor\";\nimport CornerstoneSEOAssessor from \"../cornerstone/seoAssessor\";\nimport InvalidTypeError from \"../errors/invalidType\";\nimport includesAny from \"../helpers/includesAny\";\nimport { configureShortlinker } from \"../helpers/shortlinker\";\nimport RelatedKeywordTaxonomyAssessor from \"../relatedKeywordTaxonomyAssessor\";\nimport Scheduler from \"./scheduler\";\nimport Transporter from \"./transporter\";\nimport wrapTryCatchAroundAction from \"./wrapTryCatchAroundAction\";\n\n// Tree assessor functionality.\nimport { ReadabilityScoreAggregator, SEOScoreAggregator } from \"../parsedPaper/assess/scoreAggregators\";\n\nconst keyphraseDistribution = new assessments.seo.KeyphraseDistributionAssessment();\n\nconst logger = getLogger( \"yoast-analysis-worker\" );\nlogger.setDefaultLevel( \"error\" );\n\n/**\n * Analysis Web Worker.\n *\n * Worker API:     https://developer.mozilla.org/en-US/docs/Web/API/Worker\n * Webpack loader: https://github.com/webpack-contrib/worker-loader\n */\nexport default class AnalysisWebWorker {\n\t/**\n\t * Initializes the AnalysisWebWorker class.\n\t *\n\t * @param {Object} scope The scope for the messaging. Expected to have the\n\t *                       `onmessage` event and the `postMessage` function.\n\t */\n\tconstructor( scope ) {\n\t\tthis._scope = scope;\n\n\t\tthis._configuration = {\n\t\t\tcontentAnalysisActive: true,\n\t\t\tkeywordAnalysisActive: true,\n\t\t\tuseCornerstone: false,\n\t\t\tuseTaxonomy: false,\n\t\t\tuseKeywordDistribution: false,\n\t\t\t// The locale used for language-specific configurations in Flesch-reading ease and Sentence length assessments.\n\t\t\tlocale: \"en_US\",\n\t\t};\n\n\t\tthis._scheduler = new Scheduler();\n\n\t\tthis._paper = null;\n\t\tthis._relatedKeywords = {};\n\n\t\tthis._i18n = AnalysisWebWorker.createI18n();\n\t\tthis._researcher = new Researcher( this._paper );\n\n\t\tthis._contentAssessor = null;\n\t\tthis._seoAssessor = null;\n\t\tthis._relatedKeywordAssessor = null;\n\n\t\t/*\n\t\t * The cached analyses results.\n\t\t *\n\t\t * A single result has the following structure:\n\t\t * {AssessmentResult[]} readability.results An array of assessment results; in serialized format.\n\t\t * {number}             readability.score   The overall score.\n\t\t *\n\t\t * The results have the following structure.\n\t\t * {Object} readability Content assessor results.\n\t\t * {Object} seo         SEO assessor results, per keyword identifier or empty string for the main.\n\t\t * {Object} seo[ \"\" ]   The result of the paper analysis for the main keyword.\n\t\t * {Object} seo[ key ]  Same as above, but instead for a related keyword.\n\t\t */\n\t\tthis._results = {\n\t\t\treadability: {\n\t\t\t\tresults: [],\n\t\t\t\tscore: 0,\n\t\t\t},\n\t\t\tseo: {\n\t\t\t\t\"\": {\n\t\t\t\t\tresults: [],\n\t\t\t\t\tscore: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tthis._registeredAssessments = [];\n\t\tthis._registeredMessageHandlers = {};\n\t\tthis._registeredParsers = [];\n\n\t\t// Set up everything for the analysis on the tree.\n\t\tthis.setupTreeAnalysis();\n\n\t\tthis.bindActions();\n\n\t\tthis.assessRelatedKeywords = this.assessRelatedKeywords.bind( this );\n\n\t\t// Bind register functions to this scope.\n\t\tthis.registerAssessment = this.registerAssessment.bind( this );\n\t\tthis.registerMessageHandler = this.registerMessageHandler.bind( this );\n\t\tthis.refreshAssessment = this.refreshAssessment.bind( this );\n\n\t\t// Bind event handlers to this scope.\n\t\tthis.handleMessage = this.handleMessage.bind( this );\n\n\t\t// Wrap try/catch around actions.\n\t\tthis.analyzeRelatedKeywords = wrapTryCatchAroundAction( logger, this.analyze,\n\t\t\t\"An error occurred while running the related keywords analysis.\" );\n\t\t/*\n\t\t * Overwrite this.analyze after we use it in this.analyzeRelatedKeywords so that this.analyzeRelatedKeywords\n\t\t * doesn't use the overwritten version. Therefore, this order shouldn't be changed.\n\t\t */\n\t\tthis.analyze = wrapTryCatchAroundAction( logger, this.analyze,\n\t\t\t\"An error occurred while running the analysis.\" );\n\t\tthis.runResearch = wrapTryCatchAroundAction( logger, this.runResearch,\n\t\t\t\"An error occurred after running the '%%name%%' research.\" );\n\t}\n\n\t/**\n\t * Binds actions to this scope.\n\t *\n\t * @returns {void}\n\t */\n\tbindActions() {\n\t\t// Bind actions to this scope.\n\t\tthis.analyze = this.analyze.bind( this );\n\t\tthis.analyzeDone = this.analyzeDone.bind( this );\n\t\tthis.analyzeRelatedKeywordsDone = this.analyzeRelatedKeywordsDone.bind( this );\n\t\tthis.loadScript = this.loadScript.bind( this );\n\t\tthis.loadScriptDone = this.loadScriptDone.bind( this );\n\t\tthis.customMessage = this.customMessage.bind( this );\n\t\tthis.customMessageDone = this.customMessageDone.bind( this );\n\t\tthis.clearCache = this.clearCache.bind( this );\n\t\tthis.runResearch = this.runResearch.bind( this );\n\t\tthis.runResearchDone = this.runResearchDone.bind( this );\n\t}\n\n\t/**\n\t * Sets up the web worker for running the tree readability and SEO analysis.\n\t *\n\t * @returns {void}\n\t */\n\tsetupTreeAnalysis() {\n\t\t// Researcher\n\t\t/*\n\t\t * Disabled code:\n\t\t * this._treeResearcher = new TreeResearcher();\n\t\t */\n\t\tthis._treeResearcher = null;\n\n\t\t// Assessors\n\t\tthis._contentTreeAssessor = null;\n\t\tthis._seoTreeAssessor = null;\n\t\tthis._relatedKeywordTreeAssessor = null;\n\n\t\t// Registered assessments\n\t\tthis._registeredTreeAssessments = [];\n\n\t\t// Score aggregators\n\t\tthis._seoScoreAggregator = new SEOScoreAggregator();\n\t\tthis._contentScoreAggregator = new ReadabilityScoreAggregator();\n\n\t\t// Tree representation of text to analyze\n\t\tthis._tree = null;\n\n\t\t// Tree builder.\n\t\tthis._treeBuilder = null;\n\t}\n\n\t/**\n\t * Registers this web worker with the scope passed to it's constructor.\n\t *\n\t * @returns {void}\n\t */\n\tregister() {\n\t\tthis._scope.onmessage = this.handleMessage;\n\t\tthis._scope.analysisWorker = {\n\t\t\tregisterAssessment: this.registerAssessment,\n\t\t\tregisterParser: this.registerParser,\n\t\t\tregisterMessageHandler: this.registerMessageHandler,\n\t\t\trefreshAssessment: this.refreshAssessment,\n\t\t};\n\t\tthis._scope.yoast = this._scope.yoast || {};\n\t\tthis._scope.yoast.analysis = YoastSEO;\n\t}\n\n\t/**\n\t * Receives the post message and determines the action.\n\t *\n\t * See: https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage\n\t *\n\t * @param {MessageEvent} event              The post message event.\n\t * @param {Object}       event.data         The data object.\n\t * @param {string}       event.data.type    The action type.\n\t * @param {string}       event.data.id      The request id.\n\t * @param {string}       event.data.payload The payload of the action.\n\t *\n\t * @returns {void}\n\t */\n\thandleMessage( { data: { type, id, payload } } ) {\n\t\tpayload = Transporter.parse( payload );\n\n\t\tlogger.debug( \"AnalysisWebWorker incoming:\", type, id, payload );\n\n\t\tswitch ( type ) {\n\t\t\tcase \"initialize\":\n\t\t\t\tthis.initialize( id, payload );\n\t\t\t\tthis._scheduler.startPolling();\n\t\t\t\tbreak;\n\t\t\tcase \"analyze\":\n\t\t\t\tthis._scheduler.schedule( {\n\t\t\t\t\tid,\n\t\t\t\t\texecute: this.analyze,\n\t\t\t\t\tdone: this.analyzeDone,\n\t\t\t\t\tdata: payload,\n\t\t\t\t\ttype: type,\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\tcase \"analyzeRelatedKeywords\":\n\t\t\t\tthis._scheduler.schedule( {\n\t\t\t\t\tid,\n\t\t\t\t\texecute: this.analyzeRelatedKeywords,\n\t\t\t\t\tdone: this.analyzeRelatedKeywordsDone,\n\t\t\t\t\tdata: payload,\n\t\t\t\t\ttype: type,\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\tcase \"loadScript\":\n\t\t\t\tthis._scheduler.schedule( {\n\t\t\t\t\tid,\n\t\t\t\t\texecute: this.loadScript,\n\t\t\t\t\tdone: this.loadScriptDone,\n\t\t\t\t\tdata: payload,\n\t\t\t\t\ttype: type,\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\tcase \"runResearch\":\n\t\t\t\tthis._scheduler.schedule( {\n\t\t\t\t\tid,\n\t\t\t\t\texecute: this.runResearch,\n\t\t\t\t\tdone: this.runResearchDone,\n\t\t\t\t\tdata: payload,\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\tcase \"customMessage\": {\n\t\t\t\tconst name = payload.name;\n\t\t\t\tif ( name && this._registeredMessageHandlers[ name ] ) {\n\t\t\t\t\tthis._scheduler.schedule( {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\texecute: this.customMessage,\n\t\t\t\t\t\tdone: this.customMessageDone,\n\t\t\t\t\t\tdata: payload,\n\t\t\t\t\t\ttype: type,\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.customMessageDone( id, { error: new Error( \"No message handler registered for messages with name: \" + name ) } );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconsole.warn( \"AnalysisWebWorker unrecognized action:\", type );\n\t\t}\n\t}\n\n\t/**\n\t * Initializes i18n object based on passed configuration.\n\t *\n\t * @param {Object} [translations] The translations to be used in the current\n\t *                                instance.\n\t *\n\t * @returns {Jed} Jed instance.\n\t */\n\tstatic createI18n( translations ) {\n\t\t// Use default object to prevent Jed from erroring out.\n\t\ttranslations = translations || {\n\t\t\tdomain: \"js-text-analysis\",\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tlocale_data: {\n\t\t\t\t\"js-text-analysis\": {\n\t\t\t\t\t\"\": {},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn new Jed( translations );\n\t}\n\n\t/**\n\t * Initializes the appropriate content assessor.\n\t *\n\t * @returns {null|ContentAssessor|CornerstoneContentAssessor} The chosen\n\t *                                                            content\n\t *                                                            assessor.\n\t */\n\tcreateContentAssessor() {\n\t\tconst {\n\t\t\tcontentAnalysisActive,\n\t\t\tuseCornerstone,\n\t\t\tlocale,\n\t\t} = this._configuration;\n\n\t\tif ( contentAnalysisActive === false ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst assessor = useCornerstone === true\n\t\t\t? new CornerstoneContentAssessor( this._i18n, { locale } )\n\t\t\t: new ContentAssessor( this._i18n, { locale } );\n\n\t\treturn assessor;\n\t}\n\n\t/**\n\t * Initializes the appropriate SEO assessor.\n\t *\n\t * @returns {null|SEOAssessor|CornerstoneSEOAssessor|TaxonomyAssessor} The chosen\n\t *                                                                     SEO\n\t *                                                                     assessor.\n\t */\n\tcreateSEOAssessor() {\n\t\tconst {\n\t\t\tkeywordAnalysisActive,\n\t\t\tuseCornerstone,\n\t\t\tuseKeywordDistribution,\n\t\t\tuseTaxonomy,\n\t\t\tlocale,\n\t\t} = this._configuration;\n\n\t\tif ( keywordAnalysisActive === false ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet assessor;\n\n\t\tif ( useTaxonomy === true ) {\n\t\t\tassessor = new TaxonomyAssessor( this._i18n, { locale: locale, researcher: this._researcher } );\n\t\t} else {\n\t\t\tassessor = useCornerstone === true\n\t\t\t\t? new CornerstoneSEOAssessor( this._i18n, { locale: locale, researcher: this._researcher } )\n\t\t\t\t: new SEOAssessor( this._i18n, { locale: locale, researcher: this._researcher } );\n\t\t}\n\n\n\t\tif ( useKeywordDistribution && isUndefined( assessor.getAssessment( \"keyphraseDistribution\" ) ) ) {\n\t\t\tassessor.addAssessment( \"keyphraseDistribution\", keyphraseDistribution );\n\t\t}\n\n\t\tthis._registeredAssessments.forEach( ( { name, assessment } ) => {\n\t\t\tif ( isUndefined( assessor.getAssessment( name ) ) ) {\n\t\t\t\tassessor.addAssessment( name, assessment );\n\t\t\t}\n\t\t} );\n\n\t\treturn assessor;\n\t}\n\n\t/**\n\t * Initializes the appropriate SEO assessor for related keywords.\n\t *\n\t * @returns {null|SEOAssessor|CornerstoneSEOAssessor|TaxonomyAssessor} The chosen\n\t *                                                                     related keywords\n\t *                                                                     assessor.\n\t */\n\tcreateRelatedKeywordsAssessor() {\n\t\tconst {\n\t\t\tkeywordAnalysisActive,\n\t\t\tuseCornerstone,\n\t\t\tuseTaxonomy,\n\t\t\tlocale,\n\t\t} = this._configuration;\n\n\t\tif ( keywordAnalysisActive === false ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet assessor;\n\n\t\tif ( useTaxonomy === true ) {\n\t\t\tassessor = new RelatedKeywordTaxonomyAssessor( this._i18n, { locale: locale, researcher: this._researcher } );\n\t\t} else {\n\t\t\tassessor = useCornerstone === true\n\t\t\t\t? new CornerstoneRelatedKeywordAssessor( this._i18n, { locale: locale, researcher: this._researcher } )\n\t\t\t\t: new RelatedKeywordAssessor( this._i18n, { locale: locale, researcher: this._researcher } );\n\t\t}\n\n\t\tthis._registeredAssessments.forEach( ( { name, assessment } ) => {\n\t\t\tif ( isUndefined( assessor.getAssessment( name ) ) ) {\n\t\t\t\tassessor.addAssessment( name, assessment );\n\t\t\t}\n\t\t} );\n\n\t\treturn assessor;\n\t}\n\n\t/**\n\t * Creates an SEO assessor for a tree, based on the given combination of cornerstone, taxonomy and related keyphrase flags.\n\t *\n\t * @param {Object}  assessorConfig                    The assessor configuration.\n\t * @param {boolean} [assessorConfig.relatedKeyphrase] If this assessor is for a related keyphrase, instead of the main one.\n\t * @param {boolean} [assessorConfig.taxonomy]         If this assessor is for a taxonomy page, instead of a regular page.\n\t * @param {boolean} [assessorConfig.cornerstone]      If this assessor is for cornerstone content.\n\t *\n\t * @returns {module:parsedPaper/assess.TreeAssessor} The created tree assessor.\n\t */\n\t/*\n\t * Disabled code:\n\t * createSEOTreeAssessor( assessorConfig ) {\n\t * \t return constructSEOAssessor( this._i18n, this._treeResearcher, assessorConfig );\n\t * }\n\t */\n\n\t/**\n\t * Sends a message.\n\t *\n\t * @param {string} type      The message type.\n\t * @param {number} id        The request id.\n\t * @param {Object} [payload] The payload to deliver.\n\t *\n\t * @returns {void}\n\t */\n\tsend( type, id, payload = {} ) {\n\t\tlogger.debug( \"AnalysisWebWorker outgoing:\", type, id, payload );\n\n\t\tpayload = Transporter.serialize( payload );\n\n\t\tthis._scope.postMessage( {\n\t\t\ttype,\n\t\t\tid,\n\t\t\tpayload,\n\t\t} );\n\t}\n\n\t/**\n\t * Checks which assessors should update giving a configuration.\n\t *\n\t * @param {Object}   configuration          The configuration to check.\n\t * @param {Assessor} [contentAssessor=null] The content assessor.\n\t * @param {Assessor} [seoAssessor=null]     The SEO assessor.\n\t *\n\t * @returns {Object} Containing seo and readability with true or false.\n\t */\n\tstatic shouldAssessorsUpdate( configuration, contentAssessor = null, seoAssessor = null ) {\n\t\tconst readability = [ \"contentAnalysisActive\", \"useCornerstone\", \"locale\", \"translations\" ];\n\t\tconst seo = [ \"keywordAnalysisActive\", \"useCornerstone\", \"useTaxonomy\", \"useKeywordDistribution\", \"locale\", \"translations\", \"researchData\" ];\n\t\tconst configurationKeys = Object.keys( configuration );\n\n\t\treturn {\n\t\t\treadability: isNull( contentAssessor ) || includesAny( configurationKeys, readability ),\n\t\t\tseo: isNull( seoAssessor ) || includesAny( configurationKeys, seo ),\n\t\t};\n\t}\n\n\t/**\n\t * Configures the analysis worker.\n\t *\n\t * @param {number}   id                                     The request id.\n\t * @param {Object}   configuration                          The configuration object.\n\t * @param {boolean}  [configuration.contentAnalysisActive]  Whether the content analysis is active.\n\t * @param {boolean}  [configuration.keywordAnalysisActive]  Whether the keyword analysis is active.\n\t * @param {boolean}  [configuration.useCornerstone]         Whether the paper is cornerstone or not.\n\t * @param {boolean}  [configuration.useTaxonomy]            Whether the taxonomy assessor should be used.\n\t * @param {boolean}  [configuration.useKeywordDistribution] Whether the keyphraseDistribution assessment should run.\n\t * @param {string}   [configuration.locale]                 The locale used in the seo assessor.\n\t * @param {Object}   [configuration.translations]           The translation strings.\n\t * @param {Object}   [configuration.researchData]           Extra research data.\n\t * @param {Object}   [configuration.defaultQueryParams]     The default query params for the Shortlinker.\n\t * @param {string}   [configuration.logLevel]               Log level, see: https://github.com/pimterry/loglevel#documentation\n\t * @param {string[]} [configuration.enabledFeatures]        A list of feature name flags of the experimental features to enable.\n\t *\n\t * @returns {void}\n\t */\n\tinitialize( id, configuration ) {\n\t\tconst update = AnalysisWebWorker.shouldAssessorsUpdate( configuration, this._contentAssessor, this._seoAssessor );\n\n\t\tif ( has( configuration, \"translations\" ) ) {\n\t\t\tthis._i18n = AnalysisWebWorker.createI18n( configuration.translations );\n\t\t\tdelete configuration.translations;\n\t\t}\n\n\t\tif ( has( configuration, \"researchData\" ) ) {\n\t\t\tforEach( configuration.researchData, ( data, research ) => {\n\t\t\t\tthis._researcher.addResearchData( research, data );\n\t\t\t} );\n\t\t\tdelete configuration.researchData;\n\t\t}\n\n\t\tif ( has( configuration, \"defaultQueryParams\" ) ) {\n\t\t\tconfigureShortlinker( { params: configuration.defaultQueryParams } );\n\t\t\tdelete configuration.defaultQueryParams;\n\t\t}\n\n\t\tif ( has( configuration, \"logLevel\" ) ) {\n\t\t\tlogger.setLevel( configuration.logLevel, false );\n\t\t\tdelete configuration.logLevel;\n\t\t}\n\n\t\tif ( has( configuration, \"enabledFeatures\" ) ) {\n\t\t\t// Make feature flags available inside of the web worker.\n\t\t\tenableFeatures( configuration.enabledFeatures );\n\t\t\tdelete  configuration.enabledFeatures;\n\t\t}\n\n\t\tthis._configuration = merge( this._configuration, configuration );\n\n\t\tif ( update.readability ) {\n\t\t\tthis._contentAssessor = this.createContentAssessor();\n\t\t\t/*\n\t\t\t * Disabled code:\n\t\t\t * this._contentTreeAssessor = constructReadabilityAssessor( this._i18n, this._treeResearcher, configuration.useCornerstone );\n\t\t\t */\n\t\t\tthis._contentTreeAssessor = null;\n\t\t}\n\t\tif ( update.seo ) {\n\t\t\tthis._seoAssessor = this.createSEOAssessor();\n\t\t\tthis._relatedKeywordAssessor = this.createRelatedKeywordsAssessor();\n\t\t\t// Tree assessors\n\t\t\t/*\n\t\t\t * Disabled code:\n\t\t\t * const { useCornerstone, useTaxonomy } = this._configuration;\n\t\t\t * this._seoTreeAssessor = useTaxonomy\n\t\t\t * \t? this.createSEOTreeAssessor( { taxonomy: true } )\n\t\t\t * \t: this.createSEOTreeAssessor( { cornerstone: useCornerstone } );\n\t\t\t * this._relatedKeywordTreeAssessor = this.createSEOTreeAssessor( {\n\t\t\t * \tcornerstone: useCornerstone, relatedKeyphrase: true,\n\t\t\t * } );\n\t\t\t */\n\t\t}\n\n\t\t// Reset the paper in order to not use the cached results on analyze.\n\t\tthis.clearCache();\n\n\t\tthis.send( \"initialize:done\", id );\n\t}\n\n\t/**\n\t * Register an assessment for a specific plugin.\n\t *\n\t * @param {string}   name       The name of the assessment.\n\t * @param {function} assessment The function to run as an assessment.\n\t * @param {string}   pluginName The name of the plugin associated with the assessment.\n\t *\n\t * @returns {boolean} Whether registering the assessment was successful.\n\t */\n\tregisterAssessment( name, assessment, pluginName ) {\n\t\tif ( ! isString( name ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register assessment for plugin \" + pluginName + \". Expected parameter `name` to be a string.\" );\n\t\t}\n\n\t\tif ( ! isObject( assessment ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register assessment for plugin \" + pluginName +\n\t\t\t\t\". Expected parameter `assessment` to be a function.\" );\n\t\t}\n\n\t\tif ( ! isString( pluginName ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register assessment for plugin \" + pluginName +\n\t\t\t\t\". Expected parameter `pluginName` to be a string.\" );\n\t\t}\n\n\t\t// Prefix the name with the pluginName so the test name is always unique.\n\t\tconst combinedName = pluginName + \"-\" + name;\n\n\t\tif ( this._seoAssessor !== null ) {\n\t\t\tthis._seoAssessor.addAssessment( combinedName, assessment );\n\t\t}\n\t\tthis._registeredAssessments.push( { combinedName, assessment } );\n\n\t\tthis.refreshAssessment( name, pluginName );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Register a message handler for a specific plugin.\n\t *\n\t * @param {string}   name       The name of the message handler.\n\t * @param {function} handler    The function to run as an message handler.\n\t * @param {string}   pluginName The name of the plugin associated with the message handler.\n\t *\n\t * @returns {boolean} Whether registering the message handler was successful.\n\t */\n\tregisterMessageHandler( name, handler, pluginName ) {\n\t\tif ( ! isString( name ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register handler for plugin \" + pluginName + \". Expected parameter `name` to be a string.\" );\n\t\t}\n\n\t\tif ( ! isObject( handler ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register handler for plugin \" + pluginName +\n\t\t\t\t\". Expected parameter `handler` to be a function.\" );\n\t\t}\n\n\t\tif ( ! isString( pluginName ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register handler for plugin \" + pluginName +\n\t\t\t\t\". Expected parameter `pluginName` to be a string.\" );\n\t\t}\n\n\t\t// Prefix the name with the pluginName so the test name is always unique.\n\t\tname = pluginName + \"-\" + name;\n\n\t\tthis._registeredMessageHandlers[ name ] = handler;\n\t}\n\n\t/**\n\t * Refreshes an assessment in the analysis.\n\t *\n\t * Custom assessments can use this to mark their assessment as needing a\n\t * refresh.\n\t *\n\t * @param {string} name The name of the assessment.\n\t * @param {string} pluginName The name of the plugin associated with the assessment.\n\t *\n\t * @returns {boolean} Whether refreshing the assessment was successful.\n\t */\n\trefreshAssessment( name, pluginName ) {\n\t\tif ( ! isString( name ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to refresh assessment for plugin \" + pluginName + \". Expected parameter `name` to be a string.\" );\n\t\t}\n\n\t\tif ( ! isString( pluginName ) ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to refresh assessment for plugin \" + pluginName +\n\t\t\t\t\". Expected parameter `pluginName` to be a string.\" );\n\t\t}\n\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Register a parser that parses a formatted text\n\t * to a structured tree representation that can be further analyzed.\n\t *\n\t * @param {Object}   parser                              The parser to register.\n\t * @param {function(Paper): boolean} parser.isApplicable A method that checks whether this parser is applicable for a paper.\n\t * @param {function(Paper): module:parsedPaper/structure.Node } parser.parse A method that parses a paper to a structured tree representation.\n\t *\n\t * @returns {void}\n\t */\n\tregisterParser( parser ) {\n\t\tif ( typeof parser.isApplicable !== \"function\" ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register the custom parser. Expected parameter 'parser' to have a method 'isApplicable'.\" );\n\t\t}\n\t\tif ( typeof parser.parse !== \"function\" ) {\n\t\t\tthrow new InvalidTypeError( \"Failed to register the custom parser. Expected parameter 'parser' to have a method 'parse'.\" );\n\t\t}\n\n\t\tthis._registeredParsers.push( parser );\n\t}\n\n\t/**\n\t * Clears the worker cache to force a new analysis.\n\t *\n\t * @returns {void}\n\t */\n\tclearCache() {\n\t\tthis._paper = null;\n\t}\n\n\t/**\n\t * Changes the locale in the configuration.\n\t *\n\t * If the locale is different:\n\t * - Update the configuration locale.\n\t * - Create the content assessor.\n\t *\n\t * @param {string} locale The locale to set.\n\t *\n\t * @returns {void}\n\t */\n\tsetLocale( locale ) {\n\t\tif ( this._configuration.locale === locale ) {\n\t\t\treturn;\n\t\t}\n\t\tthis._configuration.locale = locale;\n\t\tthis._contentAssessor = this.createContentAssessor();\n\t}\n\n\t/**\n\t * Checks if the paper contains changes that are used for readability.\n\t *\n\t * @param {Paper} paper The paper to check against the cached paper.\n\t *\n\t * @returns {boolean} True if there are changes detected.\n\t */\n\tshouldReadabilityUpdate( paper ) {\n\t\tif ( this._paper === null ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( this._paper.getText() !== paper.getText() ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._paper.getLocale() !== paper.getLocale();\n\t}\n\n\t/**\n\t * Checks if the related keyword contains changes that are used for seo.\n\t *\n\t * @param {string} key                     The identifier of the related keyword.\n\t * @param {Object} relatedKeyword          The related keyword object.\n\t * @param {string} relatedKeyword.keyword  The keyword.\n\t * @param {string} relatedKeyword.synonyms The synonyms.\n\t *\n\t * @returns {boolean} True if there are changes detected.\n\t */\n\tshouldSeoUpdate( key, { keyword, synonyms } ) {\n\t\tif ( isUndefined( this._relatedKeywords[ key ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( this._relatedKeywords[ key ].keyword !== keyword ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._relatedKeywords[ key ].synonyms !== synonyms;\n\t}\n\n\t/**\n\t * Runs analyses on a paper.\n\t *\n\t * The paper includes the keyword and synonyms data. However, this is\n\t * possibly just one instance of these. From here we are going to split up\n\t * this data and keep track of the different sets of keyword-synonyms and\n\t * their results.\n\t *\n\t * @param {number} id                        The request id.\n\t * @param {Object} payload                   The payload object.\n\t * @param {Object} payload.paper             The paper to analyze.\n\t * @param {Object} [payload.relatedKeywords] The related keywords.\n\t *\n\t * @returns {Object} The result, may not contain readability or seo.\n\t */\n\tasync analyze( id, { paper, relatedKeywords = {} } ) {\n\t\t// Automatically add paragraph tags, like Wordpress does, on blocks padded by double newlines or html elements.\n\t\tpaper._text = autop( paper._text );\n\t\tpaper._text = string.removeHtmlBlocks( paper._text );\n\t\tconst paperHasChanges = this._paper === null || ! this._paper.equals( paper );\n\t\tconst shouldReadabilityUpdate = this.shouldReadabilityUpdate( paper );\n\n\t\t// Only set the paper and build the tree if the paper has any changes.\n\t\tif ( paperHasChanges ) {\n\t\t\tthis._paper = paper;\n\t\t\tthis._researcher.setPaper( this._paper );\n\n\t\t\t// Try to build the tree, for analysis using the tree assessors.\n\t\t\ttry {\n\t\t\t\t/*\n\t\t\t\t * Disabled tree.\n\t\t\t\t * Please not that text here should be the `paper._text` before processing (e.g. autop and more).\n\t\t\t\t * this._tree = this._treeBuilder.build( text );\n\t\t\t\t */\n\t\t\t} catch ( exception ) {\n\t\t\t\tlogger.debug( \"Yoast SEO and readability analysis: \" +\n\t\t\t\t\t\"An error occurred during the building of the tree structure used for some assessments.\\n\\n\", exception );\n\t\t\t\tthis._tree = null;\n\t\t\t}\n\n\t\t\t// Update the configuration locale to the paper locale.\n\t\t\tthis.setLocale( this._paper.getLocale() );\n\t\t}\n\n\t\tif ( this._configuration.keywordAnalysisActive && this._seoAssessor ) {\n\t\t\t// Only assess the focus keyphrase if the paper has any changes.\n\t\t\tif ( paperHasChanges ) {\n\t\t\t\t// Assess the SEO of the content regarding the main keyphrase.\n\t\t\t\tthis._results.seo[ \"\" ] = await this.assess( this._paper, this._tree, {\n\t\t\t\t\toldAssessor: this._seoAssessor,\n\t\t\t\t\ttreeAssessor: this._seoTreeAssessor,\n\t\t\t\t\tscoreAggregator: this._seoScoreAggregator,\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Only assess the related keyphrases when they have been given.\n\t\t\tif ( ! isEmpty( relatedKeywords ) ) {\n\t\t\t\t// Get the related keyphrase keys (one for each keyphrase).\n\t\t\t\tconst requestedRelatedKeywordKeys = Object.keys( relatedKeywords );\n\n\t\t\t\t// Analyze the SEO for each related keyphrase and wait for the results.\n\t\t\t\tconst relatedKeyphraseResults = await this.assessRelatedKeywords( paper, this._tree, relatedKeywords );\n\n\t\t\t\t// Put the related keyphrase results on the SEO results, under the right key.\n\t\t\t\trelatedKeyphraseResults.forEach( result => {\n\t\t\t\t\tthis._results.seo[ result.key ] = result.results;\n\t\t\t\t} );\n\n\t\t\t\t// Clear the unrequested results, but only if there are requested related keywords.\n\t\t\t\tif ( requestedRelatedKeywordKeys.length > 1 ) {\n\t\t\t\t\tthis._results.seo = pickBy( this._results.seo,\n\t\t\t\t\t\t( relatedKeyword, key ) => includes( requestedRelatedKeywordKeys, key )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( this._configuration.contentAnalysisActive && this._contentAssessor && shouldReadabilityUpdate ) {\n\t\t\tconst analysisCombination = {\n\t\t\t\toldAssessor: this._contentAssessor,\n\t\t\t\ttreeAssessor: this._contentTreeAssessor,\n\t\t\t\tscoreAggregator: this._contentScoreAggregator,\n\t\t\t};\n\t\t\t// Set the locale (we are more lenient for languages that have full analysis support).\n\t\t\tanalysisCombination.scoreAggregator.setLocale( this._configuration.locale );\n\t\t\tthis._results.readability = await this.assess( this._paper, this._tree, analysisCombination );\n\t\t}\n\n\t\treturn this._results;\n\t}\n\n\t/**\n\t * Assesses a given paper and tree combination\n\t * using an original Assessor (that works on a string representation of the text)\n\t * and a new Tree Assessor (that works on a tree representation).\n\t *\n\t * The results of both analyses are combined using the given score aggregator.\n\t *\n\t * @param {Paper}                      paper The paper to analyze.\n\t * @param {module:parsedPaper/structure.Node} tree  The tree to analyze.\n\t *\n\t * @param {Object}                             analysisCombination                 Which assessors and score aggregator to use.\n\t * @param {Assessor}                           analysisCombination.oldAssessor     The original assessor.\n\t * @param {module:parsedPaper/assess.TreeAssessor}    analysisCombination.treeAssessor    The new assessor.\n\t * @param {module:parsedPaper/assess.ScoreAggregator} analysisCombination.scoreAggregator The score aggregator to use.\n\t *\n\t * @returns {Promise<{score: number, results: AssessmentResult[]}>} The analysis results.\n\t */\n\tasync assess( paper, tree, analysisCombination ) {\n\t\t// Disabled code: The variable `treeAssessor` is removed from here.\n\t\tconst { oldAssessor, scoreAggregator } = analysisCombination;\n\t\t/*\n\t\t * Assess the paper and the tree\n\t\t * using the original assessor and the tree assessor.\n\t\t */\n\t\toldAssessor.assess( paper );\n\t\tconst oldAssessmentResults = oldAssessor.results;\n\n\t\tconst treeAssessmentResults = [];\n\n\t\t/*\n\t\t * Disable code:\n\t\t * // Only assess tree if it has been built.\n\t\t * if ( tree ) {\n\t\t * const treeAssessorResult = await treeAssessor.assess( paper, tree );\n\t\t * treeAssessmentResults = treeAssessorResult.results;\n\t\t * } else {\n\t\t * // Cannot assess the tree, generate errors on the assessments that use the tree assessor.\n\t\t * const treeAssessments = treeAssessor.getAssessments();\n\t\t * treeAssessmentResults = treeAssessments.map( assessment => this.generateAssessmentError( assessment ) );\n\t\t * }\n\t\t */\n\n\t\t// Combine the results of the tree assessor and old assessor.\n\t\tconst results = [ ...treeAssessmentResults, ... oldAssessmentResults ];\n\n\t\t// Aggregate the results.\n\t\tconst score = scoreAggregator.aggregate( results );\n\n\t\treturn {\n\t\t\tresults: results,\n\t\t\tscore: score,\n\t\t};\n\t}\n\n\t/**\n\t * Generates an error message (\"grey bullet\") for the given assessment.\n\t *\n\t * @param {module:parsedPaper/assess.Assessment} assessment The assessment to generate an error message for.\n\t *\n\t * @returns {AssessmentResult} The generated assessment result.\n\t */\n\tgenerateAssessmentError( assessment ) {\n\t\tconst result = new AssessmentResult();\n\n\t\tresult.setScore( -1 );\n\t\tresult.setText( this._i18n.sprintf(\n\t\t\t/* Translators: %1$s expands to the name of the assessment. */\n\t\t\tthis._i18n.dgettext( \"js-text-analysis\", \"An error occurred in the '%1$s' assessment\" ),\n\t\t\tassessment.name,\n\t\t) );\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Assesses the SEO of a paper and tree combination on the given related keyphrases and their synonyms.\n\t *\n\t * The old assessor as well as the new tree assessor are used and their results are combined.\n\t *\n\t * @param {Paper}                 paper           The paper to analyze.\n\t * @param {module:parsedPaper/structure} tree            The tree to analyze.\n\t * @param {Object}                relatedKeywords The related keyphrases to use in the analysis.\n\t *\n\t * @returns {Promise<[{results: {score: number, results: AssessmentResult[]}, key: string}]>} The results, one for each keyphrase.\n\t */\n\tasync assessRelatedKeywords( paper, tree, relatedKeywords ) {\n\t\tconst keywordKeys = Object.keys( relatedKeywords );\n\t\treturn await Promise.all( keywordKeys.map( key => {\n\t\t\tthis._relatedKeywords[ key ] = relatedKeywords[ key ];\n\n\t\t\tconst relatedPaper = Paper.parse( {\n\t\t\t\t...paper.serialize(),\n\t\t\t\tkeyword: this._relatedKeywords[ key ].keyword,\n\t\t\t\tsynonyms: this._relatedKeywords[ key ].synonyms,\n\t\t\t} );\n\n\t\t\t// Which combination of (tree) assessors and score aggregator to use.\n\t\t\tconst analysisCombination = {\n\t\t\t\toldAssessor: this._relatedKeywordAssessor,\n\t\t\t\ttreeAssessor: this._relatedKeywordTreeAssessor,\n\t\t\t\tscoreAggregator: this._seoScoreAggregator,\n\t\t\t};\n\n\t\t\t// We need to remember the key, since the SEO results are stored in an object, not an array.\n\t\t\treturn this.assess( relatedPaper, tree, analysisCombination ).then(\n\t\t\t\tresults => ( { key: key, results: results } )\n\t\t\t);\n\t\t} ) );\n\t}\n\n\t/**\n\t * Loads a new script from an external source.\n\t *\n\t * @param {number} id  The request id.\n\t * @param {string} url The url of the script to load;\n\t *\n\t * @returns {Object} An object containing whether or not the url was loaded, the url and possibly an error message.\n\t */\n\tloadScript( id, { url } ) {\n\t\tif ( isUndefined( url ) ) {\n\t\t\treturn { loaded: false, url, message: \"Load Script was called without an URL.\" };\n\t\t}\n\n\t\ttry {\n\t\t\tthis._scope.importScripts( url );\n\t\t} catch ( error ) {\n\t\t\treturn { loaded: false, url, message: error.message };\n\t\t}\n\n\t\treturn { loaded: true, url };\n\t}\n\n\t/**\n\t * Sends the load script result back.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {Object} result The result.\n\t *\n\t * @returns {void}\n\t */\n\tloadScriptDone( id, result ) {\n\t\tif ( ! result.loaded ) {\n\t\t\tthis.send( \"loadScript:failed\", id, result );\n\t\t\treturn;\n\t\t}\n\n\t\tthis.send( \"loadScript:done\", id, result );\n\t}\n\n\t/**\n\t * Sends the analyze result back.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {Object} result The result.\n\t *\n\t * @returns {void}\n\t */\n\tanalyzeDone( id, result ) {\n\t\tif ( result.error ) {\n\t\t\tthis.send( \"analyze:failed\", id, result );\n\t\t\treturn;\n\t\t}\n\t\tthis.send( \"analyze:done\", id, result );\n\t}\n\n\t/**\n\t * Sends the analyze related keywords result back.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {Object} result The result.\n\t *\n\t * @returns {void}\n\t */\n\tanalyzeRelatedKeywordsDone( id, result ) {\n\t\tif ( result.error ) {\n\t\t\tthis.send( \"analyzeRelatedKeywords:failed\", id, result );\n\t\t\treturn;\n\t\t}\n\t\tthis.send( \"analyzeRelatedKeywords:done\", id, result );\n\t}\n\n\t/**\n\t * Handle a custom message using the registered handler.\n\t *\n\t * @param {number} id   The request id.\n\t * @param {string} name The name of the message.\n\t * @param {Object} data The data of the message.\n\t *\n\t * @returns {Object} An object containing either success and data or an error.\n\t */\n\tcustomMessage( id, { name, data } ) {\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: this._registeredMessageHandlers[ name ]( data ),\n\t\t\t};\n\t\t} catch ( error ) {\n\t\t\treturn { error };\n\t\t}\n\t}\n\n\t/**\n\t * Send the result of a custom message back.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {Object} result The result.\n\t *\n\t * @returns {void}\n\t */\n\tcustomMessageDone( id, result ) {\n\t\tif ( result.success ) {\n\t\t\tthis.send( \"customMessage:done\", id, result.data );\n\t\t\treturn;\n\t\t}\n\t\tthis.send( \"customMessage:failed\", result.error );\n\t}\n\n\t/**\n\t * Runs the specified research in the worker. Optionally pass a paper.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {string} name   The name of the research to run.\n\t * @param {Paper} [paper] The paper to run the research on if it shouldn't\n\t *                        be run on the latest paper.\n\t *\n\t * @returns {Object} The result of the research.\n\t */\n\trunResearch( id, { name, paper = null } ) {\n\t\t// Save morphology data if it is available in the current researcher.\n\t\tconst morphologyData = this._researcher.getData( \"morphology\" );\n\n\t\tlet researcher = this._researcher;\n\t\t// When a specific paper is passed we create a temporary new researcher.\n\t\tif ( paper !== null ) {\n\t\t\tresearcher = new Researcher( paper );\n\t\t\tresearcher.addResearchData( \"morphology\", morphologyData );\n\t\t}\n\n\t\treturn researcher.getResearch( name );\n\t}\n\n\t/**\n\t * Send the result of a custom message back.\n\t *\n\t * @param {number} id     The request id.\n\t * @param {Object} result The result.\n\t *\n\t * @returns {void}\n\t */\n\trunResearchDone( id, result ) {\n\t\tif ( result.error ) {\n\t\t\tthis.send( \"runResearch:failed\", id, result );\n\t\t\treturn;\n\t\t}\n\t\tthis.send( \"runResearch:done\", id, result );\n\t}\n}\n"]}