{"version":3,"sources":["../../../src/worker/createWorker.js"],"names":["createExceptionHandler","originalScript","createBlobScript","url","isSameOrigin","urlA","urlB","URL","window","location","origin","hostname","port","protocol","createBlobURL","webkitURL","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","blobScript","blob","Blob","type","e1","blobBuilder","append","getBlob","createObjectURL","createWorkerFallback","blobUrl","Worker","createWorker","worker","e","e2"],"mappings":";;;;;AAAA;;;;;;AAMA,SAASA,sBAAT,CAAiCC,cAAjC,EAAkD;AACjD,QAAQ;;KAEHA,cAAgB;;;;;EAFrB;AAQA;;AAED;;;;;;AAMA,SAASC,gBAAT,CAA2BC,GAA3B,EAAiC;AAChC,QAAQ;6BACqBA,GAAK;mBACfA,GAAK;EAFxB;AAIA;;AAED;;;;;;;;AAQA,SAASC,YAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAoC;AACnCD,QAAO,IAAIE,GAAJ,CAASF,IAAT,EAAeG,OAAOC,QAAP,CAAgBC,MAA/B,CAAP;AACAJ,QAAO,IAAIC,GAAJ,CAASD,IAAT,EAAeE,OAAOC,QAAP,CAAgBC,MAA/B,CAAP;;AAEA,QAAOL,KAAKM,QAAL,KAAkBL,KAAKK,QAAvB,IACNN,KAAKO,IAAL,KAAcN,KAAKM,IADb,IAENP,KAAKQ,QAAL,KAAkBP,KAAKO,QAFxB;AAGA;;AAED;;;;;;AAMA,SAASC,aAAT,CAAwBX,GAAxB,EAA8B;AAC7B,OAAMI,MAAMC,OAAOD,GAAP,IAAcC,OAAOO,SAAjC;AACA,OAAMC,cAAcR,OAAOQ,WAAP,IAAsBR,OAAOS,iBAA7B,IAAkDT,OAAOU,cAA7E;;AAEA,OAAMC,aAAanB,uBAClBE,iBAAkBC,GAAlB,CADkB,CAAnB;;AAIA,KAAIiB,IAAJ;AACA,KAAI;AACHA,SAAO,IAAIC,IAAJ,CAAU,CAAEF,UAAF,CAAV,EAA0B,EAAEG,MAAM,wBAAR,EAA1B,CAAP;AACA,EAFD,CAEE,OAAQC,EAAR,EAAa;AACd,QAAMC,cAAc,IAAIR,WAAJ,EAApB;AACAQ,cAAYC,MAAZ,CAAoBN,UAApB;AACAC,SAAOI,YAAYE,OAAZ,CAAqB,wBAArB,CAAP;AACA;AACD,QAAOnB,IAAIoB,eAAJ,CAAqBP,IAArB,CAAP;AACA;;AAED;;;;;;AAMA,SAASQ,oBAAT,CAA+BzB,GAA/B,EAAqC;AACpC,OAAM0B,UAAUf,cAAeX,GAAf,CAAhB;;AAEA,QAAO,IAAI2B,MAAJ,CAAYD,OAAZ,CAAP;AACA;;AAED;;;;;;;AAOA,SAASE,YAAT,CAAuB5B,GAAvB,EAA6B;AAC5B;AACA,KAAK,CAAEC,aAAcI,OAAOC,QAArB,EAA+BN,GAA/B,CAAP,EAA8C;AAC7C,SAAOyB,qBAAsBzB,GAAtB,CAAP;AACA;;AAED,KAAI6B,SAAS,IAAb;AACA,KAAI;AACHA,WAAS,IAAIF,MAAJ,CAAY3B,GAAZ,CAAT;AACA,EAFD,CAEE,OAAQ8B,CAAR,EAAY;AACb,MAAI;AACHD,YAASJ,qBAAsBzB,GAAtB,CAAT;AACA,GAFD,CAEE,OAAQ+B,EAAR,EAAa;AACd,SAAMA,EAAN;AACA;AACD;AACD,QAAOF,MAAP;AACA;;kBAEcD,Y","file":"createWorker.js","sourcesContent":["/**\n * Creates a try catch for a web worker around a script.\n *\n * @param {string} originalScript The script to put a try-catch around.\n * @returns {string} The new script including a try-catch.\n */\nfunction createExceptionHandler( originalScript ) {\n\treturn `\n\t\ttry {\n\t\t\t${ originalScript }\n\t\t} catch ( error ) {\n\t\t\tconsole.log( \"Error occured during worker initialization:\" );\n\t\t\tconsole.log( error );\n\t\t}\n\t`;\n}\n\n/**\n * Creates the script to run inside the fallback web worker.\n *\n * @param {string} url The URL for which to create a script.\n * @returns {string} A script that can be run inside a worker as a blob.\n */\nfunction createBlobScript( url ) {\n\treturn `\n\t\tself.yoastOriginalUrl = '${ url }';\n\t\timportScripts('${ url }');\n\t`;\n}\n\n/**\n * Determines whether or not two URLs have the same origin.\n *\n * @param {string} urlA First URL to test.\n * @param {string} urlB Second URL to test.\n *\n * @returns {boolean} Whether the URLs have the same origin.\n */\nfunction isSameOrigin( urlA, urlB ) {\n\turlA = new URL( urlA, window.location.origin );\n\turlB = new URL( urlB, window.location.origin );\n\n\treturn urlA.hostname === urlB.hostname &&\n\t\turlA.port === urlB.port &&\n\t\turlA.protocol === urlB.protocol;\n}\n\n/**\n * Creates an URL to a blob. This blob imports a script for use in a web worker (using `importScripts`).\n *\n * @param {string} url The URL to the script that has to be loaded.\n * @returns {string} the URL to the blob.\n */\nfunction createBlobURL( url ) {\n\tconst URL = window.URL || window.webkitURL;\n\tconst BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n\n\tconst blobScript = createExceptionHandler(\n\t\tcreateBlobScript( url )\n\t);\n\n\tlet blob;\n\ttry {\n\t\tblob = new Blob( [ blobScript ], { type: \"application/javascript\" } );\n\t} catch ( e1 ) {\n\t\tconst blobBuilder = new BlobBuilder();\n\t\tblobBuilder.append( blobScript );\n\t\tblob = blobBuilder.getBlob( \"application/javascript\" );\n\t}\n\treturn URL.createObjectURL( blob );\n}\n\n/**\n * Creates a worker fallback using the blob URL method.\n *\n * @param {string} url The URL to create a worker for.\n * @returns {Worker} The web worker.\n */\nfunction createWorkerFallback( url ) {\n\tconst blobUrl = createBlobURL( url );\n\n\treturn new Worker( blobUrl );\n}\n\n/**\n * Creates a WebWorker using the given url.\n *\n * @param {string} url The url of the worker.\n *\n * @returns {Worker} The worker.\n */\nfunction createWorker( url ) {\n\t// If we are not on the same domain, we require a fallback worker.\n\tif ( ! isSameOrigin( window.location, url ) ) {\n\t\treturn createWorkerFallback( url );\n\t}\n\n\tlet worker = null;\n\ttry {\n\t\tworker = new Worker( url );\n\t} catch ( e ) {\n\t\ttry {\n\t\t\tworker = createWorkerFallback( url );\n\t\t} catch ( e2 ) {\n\t\t\tthrow e2;\n\t\t}\n\t}\n\treturn worker;\n}\n\nexport default createWorker;\n"]}