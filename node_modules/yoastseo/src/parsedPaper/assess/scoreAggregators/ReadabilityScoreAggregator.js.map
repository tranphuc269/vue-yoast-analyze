{"version":3,"sources":["../../../../../src/parsedPaper/assess/scoreAggregators/ReadabilityScoreAggregator.js"],"names":["PENALTY_MAPPING_FULL_SUPPORT","bad","ok","good","PENALTY_MAPPING_PARTIAL_SUPPORT","READABILITY_SCORES","GOOD","OKAY","NEEDS_IMPROVEMENT","NOT_AVAILABLE","FULLY_SUPPORTED_LANGUAGES","ReadabilityScoreAggregator","ScoreAggregator","isFullySupported","locale","includes","language","calculateScore","penalty","calculatePenalty","results","reduce","sum","result","rating","getScore","getValidResults","filter","hasScore","hasText","setLocale","aggregate","validResults","length"],"mappings":";;;;;;;AAAA;;;;AACA;;AAGA;;;;;;AAEA;;;;;;;;;;AAUA,MAAMA,+BAA+B;AACpCC,MAAK,CAD+B;AAEpCC,KAAI,CAFgC;AAGpCC,OAAM;AAH8B,CAArC;;AAMA;;;;;;;;;;;;AAnBA;AA6BA,MAAMC,kCAAkC;AACvCH,MAAK,CADkC;AAEvCC,KAAI,CAFmC;AAGvCC,OAAM;AAHiC,CAAxC;;AAMA;;;;;;;;AAQO,MAAME,kDAAqB;AACjCC,OAAM,EAD2B;AAEjCC,OAAM,EAF2B;AAGjCC,oBAAmB,EAHc;AAIjCC,gBAAe;AAJkB,CAA3B;;AAOP;;;;;;AAMA,MAAMC,4BAA4B,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,CAAlC;;AAEA;;;;;AAKA,MAAMC,0BAAN,SAAyCC,yBAAzC,CAAyD;AACxD;;;;;;;AAOAC,kBAAkBC,MAAlB,EAA2B;AAC1B;AACA,MAAKA,UAAUA,OAAOC,QAAP,CAAiB,GAAjB,CAAf,EAAwC;AACvC,SAAMC,WAAW,2BAAaF,MAAb,CAAjB;AACA,UAAOJ,0BAA0BK,QAA1B,CAAoCC,QAApC,CAAP;AACA;AACD;AACA,SAAO,KAAP;AACA;;AAED;;;;;;;;;AASAC,gBAAgBJ,gBAAhB,EAAkCK,OAAlC,EAA4C;AAC3C,MAAKL,gBAAL,EAAwB;AACvB;;;;AAIA,OAAKK,UAAU,CAAf,EAAmB;AAClB,WAAOb,mBAAmBG,iBAA1B;AACA;;AAED,OAAKU,UAAU,CAAf,EAAmB;AAClB;;;;;;AAMA,WAAOb,mBAAmBE,IAA1B;AACA;AACD,GAlBD,MAkBO;AACN;;;;AAIA,OAAKW,UAAU,CAAf,EAAmB;AAClB,WAAOb,mBAAmBG,iBAA1B;AACA;;AAED,OAAKU,UAAU,CAAf,EAAmB;AAClB;;;;;AAKA,WAAOb,mBAAmBE,IAA1B;AACA;AACD;AACD,SAAOF,mBAAmBC,IAA1B;AACA;;AAED;;;;;;;AAOAa,kBAAkBC,OAAlB,EAA4B;AAC3B,SAAOA,QAAQC,MAAR,CAAgB,CAAEC,GAAF,EAAOC,MAAP,KAAmB;AACzC;AACA,SAAMC,SAAS,iCAAeD,OAAOE,QAAP,EAAf,CAAf;;AAEA,SAAMP,UAAU,KAAKL,gBAAL,CAAuB,KAAKC,MAA5B,IACbd,6BAA8BwB,MAA9B,CADa,GAEbpB,gCAAiCoB,MAAjC,CAFH;;AAIA;AACA,UAAON,UAAUI,MAAMJ,OAAhB,GAA0BI,GAAjC;AACA,GAVM,EAUJ,CAVI,CAAP;AAWA;;AAED;;;;;;;;AAQAI,iBAAiBN,OAAjB,EAA2B;AAC1B,SAAOA,QAAQO,MAAR,CAAgBJ,UAAUA,OAAOK,QAAP,MAAqBL,OAAOM,OAAP,EAA/C,CAAP;AACA;;AAED;;;;;;;;AAQAC,WAAWhB,MAAX,EAAoB;AACnB,OAAKA,MAAL,GAAcA,MAAd;AACA;;AAED;;;;;;;AAOAiB,WAAWX,OAAX,EAAqB;AACpB,QAAMY,eAAe,KAAKN,eAAL,CAAsBN,OAAtB,CAArB;;AAEA;;;;AAIA,MAAKY,aAAaC,MAAb,IAAuB,CAA5B,EAAgC;AAC/B,UAAO5B,mBAAmBI,aAA1B;AACA;;AAED,QAAMS,UAAU,KAAKC,gBAAL,CAAuBa,YAAvB,CAAhB;AACA,QAAMnB,mBAAmB,KAAKA,gBAAL,CAAuB,KAAKC,MAA5B,CAAzB;AACA,SAAO,KAAKG,cAAL,CAAqBJ,gBAArB,EAAuCK,OAAvC,CAAP;AACA;AArIuD;;kBAwI1CP,0B","file":"ReadabilityScoreAggregator.js","sourcesContent":["import getLanguage from \"../../../helpers/getLanguage\";\nimport { scoreToRating } from \"../../../interpreters\";\n\n/* Internal dependencies */\nimport ScoreAggregator from \"./ScoreAggregator\";\n\n/**\n * Penalties that can be given on each assessment\n * when all assessments are currently supported\n * for the user's language.\n *\n * @type {{ok: number, bad: number, good: number}}\n * @const\n *\n * @memberOf module:parsedPaper/assess\n */\nconst PENALTY_MAPPING_FULL_SUPPORT = {\n\tbad: 3,\n\tok: 2,\n\tgood: 0,\n};\n\n/**\n * Penalties that can be given on each assessment\n * when only a part of the assessments are currently supported\n * for the user's language.\n *\n * @type {{ok: number, bad: number, good: number}}\n * @const\n *\n * @memberOf module:parsedPaper/assess\n */\nconst PENALTY_MAPPING_PARTIAL_SUPPORT = {\n\tbad: 4,\n\tok: 2,\n\tgood: 0,\n};\n\n/**\n * The scores that can be given on the readability analysis.\n *\n * @type {{GOOD: number, OKAY: number, NEEDS_IMPROVEMENT: number, NOT_AVAILABLE: number}}\n * @const\n *\n * @memberOf module:parsedPaper/assess\n */\nexport const READABILITY_SCORES = {\n\tGOOD: 90,\n\tOKAY: 60,\n\tNEEDS_IMPROVEMENT: 30,\n\tNOT_AVAILABLE: 0,\n};\n\n/**\n * A list of all the languages that have full support in the readability analysis.\n *\n * @type {string[]}\n * @const\n */\nconst FULLY_SUPPORTED_LANGUAGES = [ \"en\", \"nl\", \"de\", \"it\", \"ru\", \"fr\", \"es\" ];\n\n/**\n * Aggregates the results of the readability analysis into a single score.\n *\n * @memberOf module:parsedPaper/assess\n */\nclass ReadabilityScoreAggregator extends ScoreAggregator {\n\t/**\n\t * Determines whether a language is fully supported.\n\t *\n\t * @param {string} locale The locale for which the content is written, e.g. `sv-SE` for Sweden.\n\t *\n\t * @returns {boolean} `true` if fully supported.\n\t */\n\tisFullySupported( locale ) {\n\t\t// Sanity check if this is actually a locale string.\n\t\tif ( locale && locale.includes( \"_\" ) ) {\n\t\t\tconst language = getLanguage( locale );\n\t\t\treturn FULLY_SUPPORTED_LANGUAGES.includes( language );\n\t\t}\n\t\t// Default to not fully supported.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Calculates the overall score (GOOD, OKAY or NEEDS IMPROVEMENT)\n\t * based on the penalty.\n\t *\n\t * @param {boolean} isFullySupported Whether this language is fully supported.\n\t * @param {number}  penalty          The total penalty.\n\t *\n\t * @returns {number} The overall score.\n\t */\n\tcalculateScore( isFullySupported, penalty ) {\n\t\tif ( isFullySupported ) {\n\t\t\t/*\n\t\t\t * If the language is fully supported, we are more lenient.\n\t\t\t * A higher penalty is needed to get lower scores.\n\t\t\t */\n\t\t\tif ( penalty > 6 ) {\n\t\t\t\treturn READABILITY_SCORES.NEEDS_IMPROVEMENT;\n\t\t\t}\n\n\t\t\tif ( penalty > 4 ) {\n\t\t\t\t/*\n\t\t\t\t * A penalty between 4 and 6 means either:\n\t\t\t\t *  - One \"ok\" and one \"bad\" result (5).\n\t\t\t\t *  - Two \"bad\" results of 3 points each (6).\n\t\t\t\t *  - Three \"ok\" results of 2 points each (6).\n\t\t\t\t */\n\t\t\t\treturn READABILITY_SCORES.OKAY;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\t * If the language is NOT fully supported, we are more stringent.\n\t\t\t * The penalty threshold for getting lower scores is set lower.\n\t\t\t */\n\t\t\tif ( penalty > 4 ) {\n\t\t\t\treturn READABILITY_SCORES.NEEDS_IMPROVEMENT;\n\t\t\t}\n\n\t\t\tif ( penalty > 2 ) {\n\t\t\t\t/*\n\t\t\t\t * A penalty of 3 or 4 means:\n\t\t\t\t *  - Two \"ok\" results of 2 points each (4).\n\t\t\t\t *  - One \"bad\" result of 4 points (4).\n\t\t\t\t */\n\t\t\t\treturn READABILITY_SCORES.OKAY;\n\t\t\t}\n\t\t}\n\t\treturn READABILITY_SCORES.GOOD;\n\t}\n\n\t/**\n\t * Calculates the total penalty based on the given assessment results.\n\t *\n\t * @param {AssessmentResult[]} results The valid results from which to calculate the total penalty.\n\t *\n\t * @returns {number} The total penalty for the results.\n\t */\n\tcalculatePenalty( results ) {\n\t\treturn results.reduce( ( sum, result ) => {\n\t\t\t// Compute the rating (\"error\", \"feedback\", \"bad\", \"ok\" or \"good\").\n\t\t\tconst rating = scoreToRating( result.getScore() );\n\n\t\t\tconst penalty = this.isFullySupported( this.locale )\n\t\t\t\t? PENALTY_MAPPING_FULL_SUPPORT[ rating ]\n\t\t\t\t: PENALTY_MAPPING_PARTIAL_SUPPORT[ rating ];\n\n\t\t\t// Add penalty when available.\n\t\t\treturn penalty ? sum + penalty : sum;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * Returns the list of valid results.\n\t * Valid results are all results that have a score and a text.\n\t *\n\t * @param {AssessmentResult[]} results The results to filter the valid results from.\n\t *\n\t * @returns {AssessmentResult[]} The list of valid results.\n\t */\n\tgetValidResults( results ) {\n\t\treturn results.filter( result => result.hasScore() && result.hasText() );\n\t}\n\n\t/**\n\t * Sets the locale of the content. We are more lenient on languages\n\t * that are fully supported in the analysis.\n\t *\n\t * @param {string} locale The locale of the content.\n\t *\n\t * @returns {void}\n\t */\n\tsetLocale( locale ) {\n\t\tthis.locale = locale;\n\t}\n\n\t/**\n\t * Aggregates the given assessment results into a single analysis score.\n\t *\n\t * @param {AssessmentResult[]} results The assessment results.\n\t *\n\t * @returns {number} The aggregated score.\n\t */\n\taggregate( results ) {\n\t\tconst validResults = this.getValidResults( results );\n\n\t\t/*\n\t\t * If you have no content, you have a gray indicator.\n\t\t * (Assume that one result always means the 'no content' assessment result).\n\t\t */\n\t\tif ( validResults.length <= 1 ) {\n\t\t\treturn READABILITY_SCORES.NOT_AVAILABLE;\n\t\t}\n\n\t\tconst penalty = this.calculatePenalty( validResults );\n\t\tconst isFullySupported = this.isFullySupported( this.locale );\n\t\treturn this.calculateScore( isFullySupported, penalty );\n\t}\n}\n\nexport default ReadabilityScoreAggregator;\n"]}